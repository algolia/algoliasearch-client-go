name: Checks

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Uncomment the line below to enable artifacts debugging
# env:
#   ACTIONS_RUNNER_DEBUG: true

jobs:
  setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup
        with:
          type: matrix

      - name: Lint GitHub actions
        run: yarn github-actions:lint

      - name: Lint generators
        run: |
          yarn cli format java generators
          diff=$(git status --porcelain ./generators | wc -l)

          if [[ $diff > 0 ]]; then
            echo "Format the generators folder by running 'yarn docker format java generators'"
          fi

          exit $diff

      - name: Lint json files
        run: yarn eslint --ext=json .

    outputs:
      RUN_SCRIPTS: ${{ steps.setup.outputs.RUN_SCRIPTS }}

      SPECS_MATRIX: ${{ steps.setup.outputs.SPECS_MATRIX }}

      RUN_GEN: ${{ steps.setup.outputs.RUN_GEN }}
      GEN_MATRIX: ${{ steps.setup.outputs.GEN_MATRIX }}

      RUN_GEN_JAVASCRIPT: ${{ steps.setup.outputs.RUN_GEN_JAVASCRIPT }}
      RUN_GEN_JAVA: ${{ steps.setup.outputs.RUN_GEN_JAVA }}
      RUN_GEN_PHP: ${{ steps.setup.outputs.RUN_GEN_PHP }}

      RUN_JS_ALGOLIASEARCH: ${{ steps.setup.outputs.RUN_JS_ALGOLIASEARCH }}
      RUN_JS_UTILS: ${{ steps.setup.outputs.RUN_JS_UTILS }}
      RUN_JS_TESTS: ${{ steps.setup.outputs.RUN_JS_TESTS }}

      RUN_CODEGEN: ${{ steps.setup.outputs.RUN_CODEGEN }}

  scripts:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    if: ${{ needs.setup.outputs.RUN_SCRIPTS == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Check script linting
        run: yarn scripts:lint

      - name: Test scripts
        run: yarn scripts:test

      - name: Test custom eslint plugin
        run: yarn workspace eslint-plugin-automation-custom test

  specs:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.SPECS_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache bundled specs
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.client.cacheKey }}
          path: ${{ matrix.client.bundledPath }}

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Building specs
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn cli build specs ${{ matrix.client.toRun }}

      - name: Store bundled specs
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: specs
          path: ${{ matrix.client.bundledPath }}

  client_javascript_utils:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: setup
    if: ${{ needs.setup.outputs.RUN_JS_UTILS == 'true' }}
    strategy:
      matrix:
        client:
          - client-common
          - requester-browser-xhr
          - requester-node-http
    steps:
      - uses: actions/checkout@v2

      - name: Cache '${{ matrix.client }}' client folder
        id: cache
        uses: actions/cache@v3
        with:
          key: |
            ${{ matrix.client }}-${{ hashFiles(
              format('clients/algoliasearch-client-javascript/packages/{0}/**', matrix.client)
            )}}
          path: clients/algoliasearch-client-javascript/packages/${{ matrix.client }}

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Build '${{ matrix.client }}' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn workspace algoliasearch-client-javascript build ${{ matrix.client }}

      - name: Run tests for 'client-common'
        if: ${{
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.RUN_JS_TESTS == 'true' &&
          matrix.client == 'client-common' }}
        run: yarn workspace @experimental-api-clients-automation/client-common test

      - name: Store '${{ matrix.client }}' JavaScript utils package
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: client-javascript-utils-${{ matrix.client }}
          path: clients/algoliasearch-client-javascript/packages/${{ matrix.client }}

  client_gen:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    needs:
      - setup
      - specs
      - scripts
      - client_javascript_utils
    if: |
      always() &&
      needs.setup.outputs.RUN_GEN == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.GEN_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache clients folder
        id: cache
        uses: actions/cache@v3
        with:
          key: ${{ matrix.client.cacheKey }}
          path: ${{ matrix.client.path }}

      - name: Download specs artifacts
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/restore-artifacts
        with:
          type: specs

      - name: Download JavaScript utils artifacts
        if: ${{ matrix.client.language == 'javascript' && steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/restore-artifacts
        with:
          type: js_utils

      - name: Setup
        uses: ./.github/actions/setup

      - name: Generate clients
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn cli generate ${{ matrix.client.language }} ${{ matrix.client.toRun }}

      - name: Build clients
        if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.client.language != 'php' }}
        run: yarn cli build clients ${{ matrix.client.language }} ${{ matrix.client.toRun }}

      - name: Clean CTS output before generate
        run: rm -rf ${{ matrix.client.testsOutputPath }} || true

      - name: Generate CTS
        run: yarn cli cts generate ${{ matrix.client.language }} ${{ matrix.client.toRun }}

      - name: Run CTS
        run: yarn cli cts run ${{ matrix.client.language }}

      - name: Zip artifact before storing
        run: zip -q -r clients-${{ matrix.client.language }}.zip ${{ matrix.client.path }} ${{ matrix.client.testsOutputPath }} -x "${{ matrix.client.path }}/node_modules/.**"

      - name: Store ${{ matrix.client.language }} clients
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: clients-${{matrix.client.language }}
          path: clients-${{matrix.client.language }}.zip

  client_javascript_algoliasearch:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs:
      - setup
      - client_gen
    if: |
      always() &&
      needs.setup.outputs.RUN_JS_ALGOLIASEARCH == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v2

      - name: Cache 'algoliasearch' client folder
        id: cache
        uses: actions/cache@v3
        with:
          key: |
            algoliasearch-${{ hashFiles(
              'clients/algoliasearch-client-javascript/packages/algoliasearch/**'
            )}}
          path: clients/algoliasearch-client-javascript/packages/algoliasearch/

      - name: Restore clients
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: clients-javascript
          path: clients/algoliasearch-client-javascript/

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Download JavaScript clients
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/restore-artifacts
        with:
          javascript: true
          type: all

      - name: Build 'algoliasearch' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn cli build clients javascript algoliasearch

  codegen:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - setup
      - client_gen
    if: |
      always() &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.TOKEN_GENERATE_BOT }}

      - name: Setup
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Download all artifacts
        if: ${{ needs.setup.outputs.RUN_CODEGEN == 'true' }}
        uses: ./.github/actions/restore-artifacts
        with:
          type: all
          javascript: ${{ needs.setup.outputs.RUN_GEN_JAVASCRIPT }}
          php: ${{ needs.setup.outputs.RUN_GEN_PHP }}
          java: ${{ needs.setup.outputs.RUN_GEN_JAVA }}

      - name: Push generated code
        id: pushGeneratedCode
        if: ${{ needs.setup.outputs.RUN_CODEGEN == 'true' }}
        run: yarn workspace scripts pushGeneratedCode
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GENERATE_BOT }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Spread generation to each repository
        if: ${{ steps.pushGeneratedCode.exitcode == 0 && github.ref == 'refs/heads/main' }}
        run: yarn workspace scripts spreadGeneration
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GENERATE_BOT }}
