name: Checks

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

env:
  CACHE_VERSION: '8'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup

      - name: Lint GitHub actions
        run: yarn github-actions:lint

    outputs:
      RUN_SPECS: ${{ steps.setup.outputs.RUN_SPECS }}
      SPECS_MATRIX: ${{ steps.setup.outputs.SPECS_MATRIX }}

      RUN_JS: ${{ steps.setup.outputs.RUN_JS }}
      RUN_JS_COMMON: ${{ steps.setup.outputs.RUN_JS_COMMON }}
      JS_MATRIX: ${{ steps.setup.outputs.JS_MATRIX }}

      RUN_JAVA: ${{ steps.setup.outputs.RUN_JAVA }}
      JAVA_MATRIX: ${{ steps.setup.outputs.JAVA_MATRIX }}

      RUN_PHP: ${{ steps.setup.outputs.RUN_PHP }}
      PHP_MATRIX: ${{ steps.setup.outputs.PHP_MATRIX }}

      RUN_CTS: ${{ steps.setup.outputs.RUN_CTS }}

  scripts:
    runs-on: ubuntu-20.04
    needs: setup
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache

      - name: Check script linting
        run: yarn scripts:lint

      - name: Test scripts
        run: yarn scripts:test

  specs:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    if: ${{ needs.setup.outputs.RUN_SPECS == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.SPECS_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache

      - name: Cache '${{ matrix.client }}' bundled specs
        id: cache
        uses: actions/cache@v2
        with:
          path: specs/bundled/${{ matrix.client }}.yml
          key: ${{ env.CACHE_VERSION }}-${{ hashFiles(format('specs/{0}/**', matrix.client), 'specs/common/**') }}

      - name: Building '${{ matrix.client }}' specs
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli build specs ${{ matrix.client }}

      - name: Check diff with pushed spec
        run: |
          git status
          exit $(git status --porcelain specs/bundled/${{ matrix.client }}.yml | wc -l)

  client_javascript_common:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: setup
    if: ${{ needs.setup.outputs.RUN_JS_COMMON == 'true' }}
    strategy:
      matrix:
        client:
          - client-common
          - requester-browser-xhr
          - requester-node-http
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache

      - name: Cache '${{ matrix.client }}' client
        id: cache
        uses: actions/cache@v2
        with:
          path: clients/algoliasearch-client-javascript/packages/${{ matrix.client }}
          key: |
            ${{ env.CACHE_VERSION }}-${{
            hashFiles(
              format('clients/algoliasearch-client-javascript/packages/{0}/**', matrix.client),
              format('!clients/algoliasearch-client-javascript/packages/{0}/dist', matrix.client)
            )}}

      - name: Build '${{ matrix.client }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn workspace algoliasearch-client-javascript build ${{ matrix.client }}

  client_javascript:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs:
      - setup
      - specs
      - client_javascript_common
    if: ${{ needs.setup.outputs.RUN_JS == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.JS_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache
        with:
          job: client
          language: javascript

      - name: Cache '${{ matrix.client.name }}' client
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.client.folder }}
          key: |
            ${{ env.CACHE_VERSION }}-${{
            hashFiles(
              format('{0}/**', matrix.client.folder),
              format('!{0}/dist', matrix.client.folder),
              format('specs/bundled/{0}.yml', matrix.client.name)
            )}}

      - name: Generate '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true' && matrix.client.name != 'algoliasearch'
        run: yarn cli generate javascript ${{ matrix.client.name }}

      - name: Check diff with pushed client
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git status
          exit $(git status --porcelain ${{ matrix.client.folder }} | wc -l)

      - name: Build '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli build clients javascript ${{ matrix.client.name }}

  client_java:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - setup
      - specs
    if: ${{ needs.setup.outputs.RUN_JAVA == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.JAVA_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache
        with:
          job: client
          language: java

      - name: Cache '${{ matrix.client.name }}' client
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.client.folder }}
          key: |
            ${{ env.CACHE_VERSION }}-${{
            hashFiles(
              format('{0}/**', matrix.client.folder),
              format('!{0}/target', matrix.client.folder),
              format('specs/bundled/{0}.yml', matrix.client.name)
            )}}

      - name: Generate '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli generate java ${{ matrix.client.name }}

      - name: Check diff with pushed client
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git status
          exit $(git status --porcelain ${{ matrix.client.folder }} | wc -l)

      - name: Build '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli build clients java ${{ matrix.client.name }}

  client_php:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - setup
      - specs
    if: ${{ needs.setup.outputs.RUN_PHP == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.PHP_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache
        with:
          job: client
          language: php

      - name: Generate '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli generate php ${{ matrix.client.name }}

      - name: Check diff with pushed client
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git status
          exit $(git status --porcelain ${{ matrix.client.folder }} | wc -l)

      - name: Build '${{ matrix.client.name }}' client
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli build clients php ${{ matrix.client.name }}

  cts:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs:
      - client_javascript
      - client_java
      - client_php
    if: ${{ needs.setup.outputs.RUN_CTS == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Restore cache
        uses: ./.github/actions/cache
        with:
          job: cts

      - name: Generate
        run: yarn cli cts generate

      - name: Check diff with pushed CTS
        run: |
          git status
          exit $(git status --porcelain ./tests/output | wc -l)

      - name: Run
        run: yarn cli cts run
