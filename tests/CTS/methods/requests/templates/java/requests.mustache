package com.algolia.methods.requests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import java.util.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.BeforeAll;
import com.google.gson.reflect.TypeToken;

import com.algolia.utils.JSON;
import com.algolia.utils.RequestOptions;
import com.algolia.model.{{import}}.*;
import com.algolia.api.{{client}};
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

import com.algolia.EchoRequester;
import com.algolia.EchoResponse;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class {{client}}Tests {
    private {{client}} client;
    private EchoRequester requester;

    @BeforeAll
    void init() {
        requester = new EchoRequester();
        client = new {{client}}("appId", "apiKey", requester);
    }

    {{#blocks}}
    {{#tests}}
    @Test
    @DisplayName("{{testName}}")
    void {{method}}Test{{testIndex}}() {
        {{#parametersWithDataType}}{{> generateParams}}{{/parametersWithDataType}}

        {{#hasRequestOptions}}
          RequestOptions requestOptions = new RequestOptions();
          {{#requestOptionsWithDataType.queryParameters.value.0}}
            {{#isArray}}
              List<Object> requestOptionsQueryParameters = new ArrayList<>(); 
              {{#value}}requestOptionsQueryParameters.add({{> requestOptionsParams}});{{/value}}
              requestOptions.addExtraQueryParameters("{{{key}}}", requestOptionsQueryParameters);
            {{/isArray}}
            {{^isArray}}
              requestOptions.addExtraQueryParameters("{{{key}}}", {{{#value}}}{{> requestOptionsParams}}{{{/value}}});
            {{/isArray}}
          {{/requestOptionsWithDataType.queryParameters.value.0}}
          {{#requestOptionsWithDataType.headers}}
            requestOptions.addExtraHeader("{{{key}}}", "{{{value}}}");
          {{/requestOptionsWithDataType.headers}}
        {{/hasRequestOptions}}

        assertDoesNotThrow(() -> {
            client.{{method}}({{#parametersWithDataType}}{{> maybeConvertOneOf}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, requestOptions{{/hasRequestOptions}});
        });
        EchoResponse req = requester.getLastEchoResponse();

        assertEquals(req.path, "{{{request.path}}}");
        assertEquals(req.method, "{{{request.method}}}");

        {{#request.body}}
        assertDoesNotThrow(() -> {
            JSONAssert.assertEquals("{{#lambda.escapequotes}}{{{request.body}}}{{/lambda.escapequotes}}", req.body, JSONCompareMode.STRICT_ORDER);
        });
        {{/request.body}}

        {{#request.queryParameters}}
        Map<String, String> expectedQuery = JSON.deserialize("{{#lambda.escapequotes}}{{{request.queryParameters}}}{{/lambda.escapequotes}}", new TypeToken<HashMap<String, String>>() {}.getType());
        Map<String, Object> actualQuery = req.queryParameters;

        assertEquals(expectedQuery.size(), actualQuery.size());
        for (Map.Entry<String, Object> p : actualQuery.entrySet()) {
          assertEquals(expectedQuery.get(p.getKey()), p.getValue());
        }
        {{/request.queryParameters}}

        {{#request.headers}}
        Map<String, String> expectedHeaders = JSON.deserialize("{{#lambda.escapequotes}}{{{request.headers}}}{{/lambda.escapequotes}}", new TypeToken<HashMap<String, String>>() {}.getType());
        Map<String, String> actualHeaders = req.headers;

        for (Map.Entry<String, String> p : expectedHeaders.entrySet()) {
          assertEquals(actualHeaders.get(p.getKey()), p.getValue());
        }
        {{/request.headers}}
    }
    {{/tests}}
    {{/blocks}}
}
