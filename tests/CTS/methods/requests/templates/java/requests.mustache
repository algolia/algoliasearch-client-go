package com.algolia.methods.requests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import java.util.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.BeforeAll;
import com.google.gson.reflect.TypeToken;

import com.algolia.JSON;
import com.algolia.Pair;
import com.algolia.model.{{import}}.*;
import com.algolia.api.{{client}};
import com.algolia.utils.echo.*;
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class {{client}}Tests {
    private {{client}} client;

    @BeforeAll
    void init() {
        client = new {{client}}("appId", "apiKey", new EchoRequester());
    }

    {{#blocks}}
    {{#tests}}
    @Test
    @DisplayName("{{testName}}")
    void {{method}}Test{{testIndex}}() {
        {{#parametersWithDataType}}{{> generateParams}}{{/parametersWithDataType}}

        EchoResponseInterface req = (EchoResponseInterface) assertDoesNotThrow(() -> {
            return client.{{method}}({{#parametersWithDataType}}{{> maybeConvertOneOf}}{{^-last}},{{/-last}}{{/parametersWithDataType}});
        });

        assertEquals(req.getPath(), "{{{request.path}}}");
        assertEquals(req.getMethod(), "{{{request.method}}}");

        {{#request.body}}
        assertDoesNotThrow(() -> {
            JSONAssert.assertEquals("{{#lambda.escapequotes}}{{{request.body}}}{{/lambda.escapequotes}}", req.getBody(), JSONCompareMode.STRICT_ORDER);
        });
        {{/request.body}}

        {{#request.queryParameters}}
        Map<String, String> expectedQuery = JSON.deserialize("{{#lambda.escapequotes}}{{{request.queryParameters}}}{{/lambda.escapequotes}}", new TypeToken<HashMap<String, String>>() {}.getType());
        List<Pair> actualQuery = req.getQueryParams();
        assertEquals(expectedQuery.size(), actualQuery.size());
        for (Pair p : actualQuery) {
            assertEquals(expectedQuery.get(p.getName()), p.getValue());
        }
        {{/request.queryParameters}}
    }
    {{/tests}}
    {{/blocks}}
}
