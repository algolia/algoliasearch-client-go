package {{package}};

import {{invokerPackage}}.ApiClient;

import com.google.gson.reflect.TypeToken;

import okhttp3.Call;
import okhttp3.Request;

import {{invokerPackage}}.utils.*;
import {{modelPackage}}.*;
import {{invokerPackage}}.exceptions.*;
import {{invokerPackage}}.utils.retry.CallType;
import {{invokerPackage}}.utils.retry.StatefulHost;
import java.util.function.IntUnaryOperator;

import java.util.EnumSet;
import java.util.Random;
import java.util.Collections;
import java.lang.reflect.Type;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.CompletableFuture;

{{#operations}}
public class {{classname}} extends ApiClient {
    {{#hasRegionalHost}}
    private static final String[] allowedRegions = { {{#allowedRegions}}"{{.}}"{{^-last}},{{/-last}}{{/allowedRegions}} };

    {{#fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
        this(appId, apiKey, null, options);
    }
    {{/fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey, String region) {
        this(appId, apiKey, region, null);
    }

    public {{classname}}(String appId, String apiKey, String region, ClientOptions options) {
      super(appId, apiKey, "{{{baseName}}}", "{{{packageVersion}}}", options);
      if (options.getHosts() == null) {
        this.setHosts(getDefaultHosts(region));
      } else {
        this.setHosts(options.getHosts());
      }
      this.setConnectTimeout(2000);
      this.setReadTimeout(5000);
      this.setWriteTimeout(30000);
    }
    
    {{/hasRegionalHost}}
    {{^hasRegionalHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
        super(appId, apiKey, "{{{baseName}}}", "{{{packageVersion}}}", options);
      if (options.getHosts() == null) {
        this.setHosts(getDefaultHosts(appId));
      } else {
        this.setHosts(options.getHosts());
      }
      this.setConnectTimeout(2000);
      this.setReadTimeout(5000);
      this.setWriteTimeout(30000);
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    private static List<StatefulHost> getDefaultHosts(String appId) {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-dsn.algolia.net", "https", EnumSet.of(CallType.READ)));
      hosts.add(new StatefulHost(appId + ".algolia.net", "https", EnumSet.of(CallType.WRITE)));

      List<StatefulHost> commonHosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-1.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-2.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-3.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));

      Collections.shuffle(commonHosts, new Random());

      return Stream.concat(hosts.stream(), commonHosts.stream()).collect(Collectors.toList());
    }
    {{/hasRegionalHost}}

    {{#hasRegionalHost}}
    private static List<StatefulHost> getDefaultHosts(String region) throws AlgoliaRuntimeException {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();

      {{^fallbackToAliasHost}}
      boolean found = false;
      if (region == null) {
        throw new AlgoliaRuntimeException("`region` is missing");
      }
      for (String allowed : allowedRegions) {
        if (allowed.equals(region)) {
          found = true;
          break;
        }
      }
      {{/fallbackToAliasHost}}
      {{#fallbackToAliasHost}}
      boolean found = region == null;
      if (region != null) {
        for (String allowed : allowedRegions) {
          if (allowed.equals(region)) {
            found = true;
            break;
          }
        }
      }
      {{/fallbackToAliasHost}}
      if (!found) {
        throw new AlgoliaRuntimeException("`region` must be one of the following: {{#allowedRegions}}{{.}}{{^-last}}, {{/-last}}{{/allowedRegions}}");
      }

      String url = {{#fallbackToAliasHost}}region == null ? "{{{hostWithFallback}}}" : {{/fallbackToAliasHost}} "{{{host}}}".replace("{region}", region);

      hosts.add(new StatefulHost(url, "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      return hosts;
    }
    {{/hasRegionalHost}}

    {{#operation}}
    /**
     * {{&notes}}{{#allParams}}
     * @param {{paramName}} {{&description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#returnType}}
     * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     * @return {{.}}{{/returnType}}
     * @throws AlgoliaRuntimeException If fail to call the API, e.g. server error or cannot deserialize the response body
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
        {{#externalDocs}}
     * {{&description}}
     * @see <a href="{{url}}">{{&summary}} Documentation</a>
        {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
        return LaunderThrowable.await({{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}requestOptions));
    }

  {{! This case only sets `requestOptions` as optional }}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, null);
  }
  {{/optionalParams.0}}

  /**
  * (asynchronously)
  * {{notes}}{{#allParams}}
  * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
  * @return The awaitable future
  * @throws AlgoliaRuntimeException If fail to process the API call, e.g. serializing the request body object
  {{#isDeprecated}}
  * @deprecated
  {{/isDeprecated}}
  {{#externalDocs}}
  * {{&description}}
  * @see <a href="{{url}}">{{&summary}} Documentation</a>
  {{/externalDocs}}
  */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public CompletableFuture<{{{returnType}}}> {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#allParams}}{{#required}}
    if ({{paramName}} == null) {
        throw new AlgoliaRuntimeException("Parameter `{{paramName}}` is required when calling `{{operationId}}`.");
    }
    {{/required}}{{/allParams}}

    Object bodyObj = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    // create path and map variables
    String requestPath = "{{{path}}}"{{#vendorExtensions}}{{#pathParams}}.replaceAll(
        {{=<% %>=}}"\\{<%baseName%>\\}"<%={{ }}=%>,
        {{#x-is-custom-request}}{{{paramName}}}.toString(){{/x-is-custom-request}}{{^x-is-custom-request}}this.escapeString({{{paramName}}}.toString()){{/x-is-custom-request}}
    ){{/pathParams}}{{/vendorExtensions}};

    {{javaUtilPrefix}}Map<String, Object> queryParameters = new {{javaUtilPrefix}}HashMap<String, Object>();
    {{javaUtilPrefix}}Map<String, String> headers = new {{javaUtilPrefix}}HashMap<String, String>();

    {{#vendorExtensions}}{{#queryParams}}
    if ({{paramName}} != null) {
      {{^x-is-custom-request}}
        queryParameters.put("{{baseName}}", parameterToString({{paramName}}));
      {{/x-is-custom-request}}
      {{#x-is-custom-request}}
        for (Map.Entry<String, Object> parameter : parameters.entrySet()) {
          queryParameters.put(parameter.getKey().toString(), parameterToString(parameter.getValue()));
        }
      {{/x-is-custom-request}}
    }

    {{/queryParams}}{{/vendorExtensions}}
    {{#headerParams}}
    if ({{paramName}} != null) {
        headers.put("{{baseName}}", this.parameterToString({{paramName}}));
    }

    {{/headerParams}}
    Call call = this.buildCall(requestPath, "{{httpMethod}}", queryParameters, bodyObj, headers, requestOptions, {{#vendorExtensions.x-use-read-transporter}}true{{/vendorExtensions.x-use-read-transporter}}{{^vendorExtensions.x-use-read-transporter}}false{{/vendorExtensions.x-use-read-transporter}});
    Type returnType = new TypeToken<{{{returnType}}}>() {}.getType();
    return this.executeAsync(call, returnType);
  }

  {{! This case only sets `requestOptions` as optional }}
  public CompletableFuture<{{{returnType}}}> {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  public CompletableFuture<{{{returnType}}}> {{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  public CompletableFuture<{{{returnType}}}> {{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, null);
  }
  {{/optionalParams.0}}
  {{/operation}}

  {{#isSearchClient}}
  public void waitForTask(String indexName, Long taskID, RequestOptions requestOptions, int maxRetries, IntUnaryOperator timeout) {
    TaskUtils.retryUntil(() -> {
      return this.getTaskAsync(indexName, taskID, requestOptions);
    }, (GetTaskResponse task) -> {
      return task.getStatus() == TaskStatus.PUBLISHED;
    }, maxRetries, timeout);
  }

  public void waitForTask(String indexName, Long taskID, RequestOptions requestOptions) {
    this.waitForTask(indexName, taskID, requestOptions, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT);
  }

  public void waitForTask(String indexName, Long taskID, int maxRetries, IntUnaryOperator timeout) {
    this.waitForTask(indexName, taskID, null, maxRetries, timeout);
  }

  public void waitForTask(String indexName, Long taskID) {
    this.waitForTask(indexName, taskID, null, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT);
  }
  {{/isSearchClient}}
}
{{/operations}}
