package {{package}};

import {{invokerPackage}}.ApiCallback;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Pair;

import com.google.gson.reflect.TypeToken;

import okhttp3.Call;
import okhttp3.Request;

import com.algolia.utils.*;
import com.algolia.utils.echo.*;
import com.algolia.model.search.*;
import com.algolia.exceptions.*;
import com.algolia.utils.retry.CallType;
import com.algolia.utils.retry.StatefulHost;

import java.util.EnumSet;
import java.util.Random;
import java.util.Collections;
import java.lang.reflect.Type;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import java.util.stream.Collectors;
import java.util.stream.Stream;

{{#operations}}
public class {{classname}} extends ApiClient {
    {{#hasRegionalHost}}
    {{#fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, new HttpRequester(getDefaultHosts(".")), null);
    }
    
    {{/fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey, String region) {
        this(appId, apiKey, new HttpRequester(getDefaultHosts(region)), null);
    }

    public {{classname}}(String appId, String apiKey, String region, UserAgent.Segment[] userAgentSegments) {
        this(appId, apiKey, new HttpRequester(getDefaultHosts(region)), userAgentSegments);
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, new HttpRequester(getDefaultHosts(appId)), null);
    }

    public {{classname}}(String appId, String apiKey, UserAgent.Segment[] userAgentSegments) {
        this(appId, apiKey, new HttpRequester(getDefaultHosts(appId)), userAgentSegments);
    }
    {{/hasRegionalHost}}

    public {{classname}}(String appId, String apiKey, Requester requester) {
        this(appId, apiKey, requester, null);
    }

    public {{classname}}(String appId, String apiKey, Requester requester, UserAgent.Segment[] userAgentSegments) {
        super(appId, apiKey, requester, "{{{baseName}}}", userAgentSegments);
    }

    {{^hasRegionalHost}}{{^experimentalHost}}
    private static List<StatefulHost> getDefaultHosts(String appId) {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-dsn.algolia.net", "https", EnumSet.of(CallType.READ)));
      hosts.add(new StatefulHost(appId + ".algolia.net", "https", EnumSet.of(CallType.WRITE)));

      List<StatefulHost> commonHosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-1.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-2.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-3.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));

      Collections.shuffle(commonHosts, new Random());

      return Stream.concat(hosts.stream(), commonHosts.stream()).collect(Collectors.toList());
    }
    {{/experimentalHost}}{{/hasRegionalHost}}

    {{#experimentalHost}}
    private static List<StatefulHost> getDefaultHosts() {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost("https", "{{{experimentalHost}}}",  EnumSet.of(CallType.READ, CallType.WRITE)));
      return hosts;
    }
    {{/experimentalHost}}

    {{#hasRegionalHost}}
    private static List<StatefulHost> getDefaultHosts(String region) {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost({{{host}}} + "." + region + ".algolia.{{#topLevelDomain}}{{.}}{{/topLevelDomain}}{{^topLevelDomain}}com{{/topLevelDomain}}", "https", EnumSet.of(CallType.READ, CallType.WRITE)));

      hosts.add(new StatefulHost(appId + "-1.algolianet.com", "https", EnumSet.of(CallType.READ, CallType.WRITE)));

      return hosts;
    }
    {{/hasRegionalHost}}

    {{#operation}}
    /**
     * Build call for {{operationId}}
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws AlgoliaRuntimeException If fail to serialize the request body object
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
        {{#externalDocs}}
     * {{&description}}
     * @see <a href="{{url}}">{{&summary}} Documentation</a>
        {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    private Call {{operationId}}Call({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback<{{{returnType}}}> callback) throws AlgoliaRuntimeException {
        Object bodyObj = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

        // create path and map variables
        String requestPath = "{{{path}}}"{{#vendorExtensions}}{{#pathParams}}.replaceAll(
            {{=<% %>=}}"\\{<%baseName%>\\}"<%={{ }}=%>,
            {{#x-is-custom-request}}{{{paramName}}}.toString(){{/x-is-custom-request}}{{^x-is-custom-request}}this.escapeString({{{paramName}}}.toString()){{/x-is-custom-request}}
        ){{/pathParams}}{{/vendorExtensions}};

        {{javaUtilPrefix}}List<Pair> queryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}Map<String, String> headers = new {{javaUtilPrefix}}HashMap<String, String>();

        {{#vendorExtensions}}{{#queryParams}}
        if ({{paramName}} != null) {
          {{^x-is-custom-request}}
            queryParams.addAll(this.parameterToPair("{{baseName}}", {{paramName}}));
          {{/x-is-custom-request}}
          {{#x-is-custom-request}}
            for (Map.Entry<String, Object> parameter : parameters.entrySet()) {
              queryParams.addAll(this.parameterToPair(parameter.getKey(), parameter.getValue().toString()));
            }
          {{/x-is-custom-request}}
        }

        {{/queryParams}}{{/vendorExtensions}}
        {{#headerParams}}
        if ({{paramName}} != null) {
            headers.put("{{baseName}}", this.parameterToString({{paramName}}));
        }

        {{/headerParams}}
        headers.put("Accept", "application/json");
        headers.put("Content-Type", "application/json");

        return this.buildCall(requestPath, "{{httpMethod}}", queryParams, bodyObj, headers, callback);
    }

    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    private Call {{operationId}}ValidateBeforeCall({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback<{{{returnType}}}> callback) throws AlgoliaRuntimeException {
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) {
            throw new AlgoliaRuntimeException("Missing the required parameter '{{paramName}}' when calling {{operationId}}(Async)");
        }
        {{/required}}{{/allParams}}

        return {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}callback);
    }

    /**
     * {{&notes}}{{#allParams}}
     * @param {{paramName}} {{&description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#returnType}}
     * @return {{.}}{{/returnType}}
     * @throws AlgoliaRuntimeException If fail to call the API, e.g. server error or cannot deserialize the response body
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
        {{#externalDocs}}
     * {{&description}}
     * @see <a href="{{url}}">{{&summary}} Documentation</a>
        {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws AlgoliaRuntimeException {
        Call req = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}null);
        if (req instanceof CallEcho) {
            {{#returnType}}return new EchoResponse.{{baseName}}Echo.{{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(((CallEcho)req).request());{{/returnType}}
        }
        Call call = (Call)req;
        {{#returnType}}Type returnType = new TypeToken<{{{.}}}>(){}.getType();
        ApiResponse<{{{.}}}> res = this.execute(call, returnType);
        return res.getData();{{/returnType}}{{^returnType}}this.execute(call).getData();{{/returnType}}
    }

    {{#optionalParams.0}}
    public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) throws AlgoliaRuntimeException {
        {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}},{{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}{{#schema}}{{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/schema}}{{^schema}}null{{/schema}}{{^-last}},{{/-last}}{{/optionalParams}});
    }
    {{/optionalParams.0}}

    /**
     * (asynchronously)
     * {{notes}}{{#allParams}}
     * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws AlgoliaRuntimeException If fail to process the API call, e.g. serializing the request body object
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
        {{#externalDocs}}
     * {{&description}}
     * @see <a href="{{url}}">{{&summary}} Documentation</a>
        {{/externalDocs}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    public Call {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback<{{{returnType}}}{{^returnType}}Void{{/returnType}}> callback) throws AlgoliaRuntimeException {
        Call call = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}callback);
        {{#returnType}}Type returnType = new TypeToken<{{{returnType}}}>(){}.getType();
        this.executeAsync(call, returnType, callback);{{/returnType}}{{^returnType}}this.executeAsync(call, callback);{{/returnType}}
        return call;
    }
    {{/operation}}
}
{{/operations}}
