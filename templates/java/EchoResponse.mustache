package com.algolia.utils.echo;

import com.algolia.Pair;
import com.algolia.model.search.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import okhttp3.HttpUrl;
import okhttp3.Request;
import okio.Buffer;

public class EchoResponse {

    private static String parseRequestBody(Request req) {
        try {
            final Request copy = req.newBuilder().build();
            final Buffer buffer = new Buffer();
            copy.body().writeTo(buffer);
            return buffer.readUtf8();
        } catch (final IOException e) {
            return "error";
        }
    }

    private static List<Pair> buildQueryParams(Request req) {
        List<Pair> params = new ArrayList<Pair>();
        HttpUrl url = req.url();
        for (String name : url.queryParameterNames()) {
            for (String value : url.queryParameterValues(name)) {
                params.add(new Pair(name, value));
            }
        }
        return params;
    }

    {{#apiInfo}}{{#apis}}
    public static class {{baseName}}Echo {
        {{#operations}}{{#operation}}
        public static class {{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}} extends {{{returnType}}} implements EchoResponseInterface {
            private Request request;

            public {{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(Request request) { 
                this.request = request; 
            }

            public String getPath() { 
                return request.url().encodedPath(); 
            }

            public String getMethod() { 
                return request.method(); 
            }

            public String getBody() {
                return parseRequestBody(request);
            }

            public List<Pair> getQueryParams() {
                return buildQueryParams(request);
            }
        }
        {{/operation}}{{/operations}}
    }
    {{/apis}}{{/apiInfo}}
} 
