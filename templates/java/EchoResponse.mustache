package com.algolia.utils.echo;

import com.algolia.Pair;
import {{#apiInfo}}{{#apis}}{{{modelPackage}}}{{/apis}}{{/apiInfo}}.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okhttp3.HttpUrl;
import okhttp3.Request;
import okio.Buffer;


public class EchoResponse{{#apiInfo}}{{#apis}}{{{baseName}}}{{/apis}}{{/apiInfo}} {
  private static String parseRequestBody(Request req) {
    try {
      final Request copy = req.newBuilder().build();
      final Buffer buffer = new Buffer();
      copy.body().writeTo(buffer);
      return buffer.readUtf8();
    } catch (final IOException e) {
      return "error";
    }
  }

  private static Map<String, String> buildQueryParams(Request req) {
    Map<String, String> params = new HashMap<String, String>();
    HttpUrl url = req.url();
    for (String name : url.queryParameterNames()) {
      for (String value : url.queryParameterValues(name)) {
        params.put(name, value);
      }
    }
    return params;
  }

  {{#apiInfo}}{{#apis}}
  {{#operations}}{{#operation}}
  public static class {{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}} extends {{{returnType}}} implements EchoResponseInterface {
    private Request request;

    public {{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(Request request) { 
      this.request = request; 
    }

    public String getPath() { 
      return request.url().encodedPath(); 
    }

    public String getMethod() { 
      return request.method(); 
    }

    public String getBody() {
      return parseRequestBody(request);
    }

    public Map<String, String> getQueryParams() {
      return buildQueryParams(request);
    }

    // to satisfy CompoundType in case it's a parent
    public Object getInsideValue() {
      return null;
    }
  }
  {{/operation}}{{/operations}}
  {{/apis}}{{/apiInfo}}
} 
