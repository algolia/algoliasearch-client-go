// {{{generationBanner}}}

package {{package}};

import {{invokerPackage}}.ApiClient;

import com.fasterxml.jackson.core.type.TypeReference;

import okhttp3.Call;
import okhttp3.Request;

import {{invokerPackage}}.utils.*;
import {{modelPackage}}.*;
import {{invokerPackage}}.exceptions.*;
import {{invokerPackage}}.utils.retry.CallType;
import {{invokerPackage}}.utils.retry.StatefulHost;
import java.util.function.IntUnaryOperator;

import java.util.EnumSet;
import java.util.Random;
import java.util.Collections;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.CompletableFuture;

{{#operations}}
public class {{classname}} extends ApiClient {
    {{#hasRegionalHost}}
    private static final String[] allowedRegions = { {{#allowedRegions}}"{{.}}"{{^-last}},{{/-last}}{{/allowedRegions}} };

    {{#fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
        this(appId, apiKey, null, options);
    }
    {{/fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey, String region) {
        this(appId, apiKey, region, null);
    }

    public {{classname}}(String appId, String apiKey, String region, ClientOptions options) {
      super(appId, apiKey, "{{{baseName}}}", "{{{packageVersion}}}", options);
      if (options != null && options.getHosts() != null) {
        this.setHosts(options.getHosts());
      } else {
        this.setHosts(getDefaultHosts(region));
      }
      this.setConnectTimeout(2000);
      this.setReadTimeout(5000);
      this.setWriteTimeout(30000);
    }
    
    {{/hasRegionalHost}}
    {{^hasRegionalHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
      super(appId, apiKey, "{{{baseName}}}", "{{{packageVersion}}}", options);
      if (options != null && options.getHosts() != null) {
        this.setHosts(options.getHosts());
      } else {
        this.setHosts(getDefaultHosts(appId));
      }
      this.setConnectTimeout(2000);
      this.setReadTimeout(5000);
      this.setWriteTimeout(30000);
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    private static List<StatefulHost> getDefaultHosts(String appId) {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-dsn.algolia.net", "https", EnumSet.of(CallType.READ)));
      hosts.add(new StatefulHost(appId + ".algolia.net", "https", EnumSet.of(CallType.WRITE)));

      List<StatefulHost> commonHosts = new ArrayList<StatefulHost>();
      hosts.add(new StatefulHost(appId + "-1.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-2.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new StatefulHost(appId + "-3.algolianet.net", "https", EnumSet.of(CallType.READ, CallType.WRITE)));

      Collections.shuffle(commonHosts, new Random());

      return Stream.concat(hosts.stream(), commonHosts.stream()).collect(Collectors.toList());
    }
    {{/hasRegionalHost}}

    {{#hasRegionalHost}}
    private static List<StatefulHost> getDefaultHosts(String region) throws AlgoliaRuntimeException {
      List<StatefulHost> hosts = new ArrayList<StatefulHost>();

      {{^fallbackToAliasHost}}
      boolean found = false;
      if (region == null) {
        throw new AlgoliaRuntimeException("`region` is missing");
      }
      for (String allowed : allowedRegions) {
        if (allowed.equals(region)) {
          found = true;
          break;
        }
      }
      {{/fallbackToAliasHost}}
      {{#fallbackToAliasHost}}
      boolean found = region == null;
      if (region != null) {
        for (String allowed : allowedRegions) {
          if (allowed.equals(region)) {
            found = true;
            break;
          }
        }
      }
      {{/fallbackToAliasHost}}
      if (!found) {
        throw new AlgoliaRuntimeException("`region` must be one of the following: {{#allowedRegions}}{{.}}{{^-last}}, {{/-last}}{{/allowedRegions}}");
      }

      String url = {{#fallbackToAliasHost}}region == null ? "{{{hostWithFallback}}}" : {{/fallbackToAliasHost}} "{{{host}}}".replace("{region}", region);

      hosts.add(new StatefulHost(url, "https", EnumSet.of(CallType.READ, CallType.WRITE)));
      return hosts;
    }
    {{/hasRegionalHost}}

    {{#operation}}
    /**
     * {{{notes}}}{{#allParams}}
     * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions.x-is-generic}}
     * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
     * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     * @return {{> return_type}}
    {{> api_javadoc}}
    public {{> return_type}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}{{#vendorExtensions.x-is-generic}}Class<T> innerType, {{/vendorExtensions.x-is-generic}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
        return LaunderThrowable.await({{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}requestOptions));
    }

  {{! This case only sets `requestOptions` as optional }}
  /**
    * {{{notes}}}{{#allParams}}
    * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions.x-is-generic}}
    * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
    * @return {{> return_type}}
    {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#vendorExtensions.x-is-generic}}, Class<T> innerType{{/vendorExtensions.x-is-generic}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  /**
    * {{{notes}}}{{#requiredParams}}
    * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions.x-is-generic}}
    * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
    * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
    * @return {{> return_type}}
   {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{#vendorExtensions.x-is-generic}}Class<T> innerType, {{/vendorExtensions.x-is-generic}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  /**
    * {{{notes}}}{{#requiredParams}}
    * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions.x-is-generic}}
    * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
    * @return {{> return_type}}
   {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#vendorExtensions.x-is-generic}}, Class<T> innerType{{/vendorExtensions.x-is-generic}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}null);
  }
  {{/optionalParams.0}}

  /**
  * (asynchronously)
  * {{notes}}{{#allParams}}
  * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions.x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
  * @return {{> return_type_async}} The awaitable future
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}{{#vendorExtensions.x-is-generic}}Class<T> innerType, {{/vendorExtensions.x-is-generic}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#allParams}}{{#required}}
    if ({{paramName}} == null) {
        throw new AlgoliaRuntimeException("Parameter `{{paramName}}` is required when calling `{{operationId}}`.");
    }
    {{/required}}{{/allParams}}

    Object bodyObj = {{#bodyParam}}{{paramName}}{{^required}} != null ? {{paramName}} : new Object(){{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    // create path and map variables
    String requestPath = "{{{path}}}"{{#vendorExtensions}}{{#pathParams}}.replaceAll(
        {{=<% %>=}}"\\{<%baseName%>\\}"<%={{ }}=%>,
        {{#x-is-custom-request}}{{{paramName}}}.toString(){{/x-is-custom-request}}{{^x-is-custom-request}}this.escapeString({{{paramName}}}.toString()){{/x-is-custom-request}}
    ){{/pathParams}}{{/vendorExtensions}};

    {{javaUtilPrefix}}Map<String, Object> queryParameters = new {{javaUtilPrefix}}HashMap<String, Object>();
    {{javaUtilPrefix}}Map<String, String> headers = new {{javaUtilPrefix}}HashMap<String, String>();

    {{#vendorExtensions}}{{#queryParams}}
    if ({{paramName}} != null) {
      {{^x-is-custom-request}}
        queryParameters.put("{{baseName}}", parameterToString({{paramName}}));
      {{/x-is-custom-request}}
      {{#x-is-custom-request}}
        for (Map.Entry<String, Object> parameter : parameters.entrySet()) {
          queryParameters.put(parameter.getKey().toString(), parameterToString(parameter.getValue()));
        }
      {{/x-is-custom-request}}
    }

    {{/queryParams}}{{/vendorExtensions}}
    {{#headerParams}}
    if ({{paramName}} != null) {
        headers.put("{{baseName}}", this.parameterToString({{paramName}}));
    }

    {{/headerParams}}
    Call call = this.buildCall(requestPath, "{{httpMethod}}", queryParameters, bodyObj, headers, requestOptions, {{#vendorExtensions.x-use-read-transporter}}true{{/vendorExtensions.x-use-read-transporter}}{{^vendorExtensions.x-use-read-transporter}}false{{/vendorExtensions.x-use-read-transporter}});
    return this.executeAsync(call, {{#vendorExtensions.x-is-generic}}{{{returnType}}}.class, innerType{{/vendorExtensions.x-is-generic}}{{^vendorExtensions.x-is-generic}}new TypeReference<{{{returnType}}}>() {}{{/vendorExtensions.x-is-generic}});
  }

  {{! This case only sets `requestOptions` as optional }}
  /**
  * (asynchronously)
  * {{notes}}{{#allParams}}
  * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions.x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
  * @return {{> return_type_async}} The awaitable future
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#vendorExtensions.x-is-generic}}, Class<T> innerType{{/vendorExtensions.x-is-generic}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  /**
  * (asynchronously)
  * {{notes}}{{#requiredParams}}
  * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions.x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
  * @return {{> return_type_async}} The awaitable future
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{#vendorExtensions.x-is-generic}}Class<T> innerType, {{/vendorExtensions.x-is-generic}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  /**
  * (asynchronously)
  * {{notes}}{{#requiredParams}}
  * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions.x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}{{/vendorExtensions.x-is-generic}}
  * @return {{> return_type_async}} The awaitable future
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#vendorExtensions.x-is-generic}}, Class<T> innerType{{/vendorExtensions.x-is-generic}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions.x-is-generic}}innerType, {{/vendorExtensions.x-is-generic}}null);
  }
  {{/optionalParams.0}}
  {{/operation}}

  {{#isSearchClient}}
  /**
   * Helper: Wait for a task to complete with `indexName` and `taskID`.
   *
   * @summary Wait for a task to complete.
   * @param indexName The `indexName` where the operation was performed.
   * @param taskID The `taskID` returned in the method response.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public void waitForTask(String indexName, Long taskID, int maxRetries, IntUnaryOperator timeout, RequestOptions requestOptions) {
    TaskUtils.retryUntil(() -> {
      return this.getTask(indexName, taskID, requestOptions);
    }, (GetTaskResponse task) -> {
      return task.getStatus() == TaskStatus.PUBLISHED;
    }, maxRetries, timeout);
  }

  /**
   * Helper: Wait for a task to complete with `indexName` and `taskID`.
   *
   * @summary Wait for a task to complete.
   * @param indexName The `indexName` where the operation was performed.
   * @param taskID The `taskID` returned in the method response.
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public void waitForTask(String indexName, Long taskID, RequestOptions requestOptions) {
    this.waitForTask(indexName, taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
  }

  /**
   * Helper: Wait for a task to complete with `indexName` and `taskID`.
   *
   * @summary Wait for a task to complete.
   * @param indexName The `indexName` where the operation was performed.
   * @param taskID The `taskID` returned in the method response.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   */
  public void waitForTask(String indexName, Long taskID, int maxRetries, IntUnaryOperator timeout) {
    this.waitForTask(indexName, taskID, maxRetries, timeout, null);
  }

  /**
   * Helper: Wait for a task to complete with `indexName` and `taskID`.
   *
   * @summary Wait for a task to complete.
   * @param indexName The `indexName` where the operation was performed.
   * @param taskID The `taskID` returned in the method response.
   */
  public void waitForTask(String indexName, Long taskID) {
    this.waitForTask(indexName, taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`.
   * @param key The `key` that has been added, deleted or updated.
   * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public Key waitForApiKey(
    ApiKeyOperation operation,
    String key,
    ApiKey apiKey,
    int maxRetries,
    IntUnaryOperator timeout,
    RequestOptions requestOptions
  ) {
    if (operation == ApiKeyOperation.UPDATE) {
      if (apiKey == null) {
        throw new AlgoliaRetryException("`apiKey` is required when waiting for an `update` operation.");
      }

      // when updating an api key, we poll the api until we receive a different key
      return TaskUtils.retryUntil(
        () -> {
          return this.getApiKey(key, requestOptions);
        },
        (Key respKey) -> {
          // we need to convert to an ApiKey object to use the `equals` method
          ApiKey sameType = new ApiKey()
            .setAcl(respKey.getAcl())
            .setDescription(respKey.getDescription())
            .setIndexes(respKey.getIndexes())
            .setMaxHitsPerQuery(respKey.getMaxHitsPerQuery())
            .setMaxQueriesPerIPPerHour(respKey.getMaxQueriesPerIPPerHour())
            .setQueryParameters(respKey.getQueryParameters())
            .setReferers(respKey.getReferers())
            .setValidity(respKey.getValidity());

          return apiKey.equals(sameType);
        },
        maxRetries,
        timeout
      );
    }

    // bypass lambda restriction to modify final object
    final Key[] addedKey = new Key[] { null };

    // check the status of the getApiKey method
    TaskUtils.retryUntil(
      () -> {
        try {
          addedKey[0] = this.getApiKey(key, requestOptions);
          // magic number to signify we found the key
          return -2;
        } catch (AlgoliaApiException e) {
          return e.getHttpErrorCode();
        }
      },
      (Integer status) -> {
        switch (operation) {
          case ADD:
            // stop either when the key is created or when we don't receive 404
            return status == -2 || status != 404;
          case DELETE:
            // stop when the key is not found
            return status == 404;
          default:
            // continue
            return false;
        }
      },
      maxRetries,
      timeout
    );

    return addedKey[0];
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
   * @param key The `key` that has been added, deleted or updated.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, int maxRetries, IntUnaryOperator timeout, RequestOptions requestOptions) {
    return this.waitForApiKey(operation, key, null, maxRetries, timeout, requestOptions);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`.
   * @param key The `key` that has been added, deleted or updated.
   * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey, RequestOptions requestOptions) {
    return this.waitForApiKey(operation, key, apiKey, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
   * @param key The `key` that has been added, deleted or updated.
   * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, RequestOptions requestOptions) {
    return this.waitForApiKey(operation, key, null, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`.
   * @param key The `key` that has been added, deleted or updated.
   * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey, int maxRetries, IntUnaryOperator timeout) {
    return this.waitForApiKey(operation, key, apiKey, maxRetries, timeout, null);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
   * @param key The `key` that has been added, deleted or updated.
   * @param maxRetries The maximum number of retry. 50 by default. (optional)
   * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, int maxRetries, IntUnaryOperator timeout) {
    return this.waitForApiKey(operation, key, null, maxRetries, timeout, null);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`.
   * @param key The `key` that has been added, deleted or updated.
   * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey) {
    return this.waitForApiKey(operation, key, apiKey, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
  }

  /**
   * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
   *
   * @summary Wait for an API key task to be processed.
   * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
   * @param key The `key` that has been added, deleted or updated.
   */
  public Key waitForApiKey(ApiKeyOperation operation, String key) {
    return this.waitForApiKey(operation, key, null, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
  }
  {{/isSearchClient}}
}
{{/operations}}
