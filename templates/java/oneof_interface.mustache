import com.algolia.utils.CompoundType;
import com.algolia.utils.JSON;

import com.google.gson.TypeAdapter;
import com.google.gson.reflect.TypeToken;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.List;

@JsonAdapter({{classname}}.Adapter.class)
/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}{{#isDeprecated}}
 * @deprecated{{/isDeprecated}}
 */{{#isDeprecated}}
@Deprecated{{/isDeprecated}}
{{>additionalModelTypeAnnotations}}
public abstract class {{classname}} implements CompoundType {
    {{#vendorExtensions.x-one-of-list}}
    public static {{classname}} of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}({{{type}}} inside) {
        return new {{classname}}{{name}}(inside);
    }

    {{/vendorExtensions.x-one-of-list}}

    public static class Adapter extends TypeAdapter<{{classname}}> {
        @Override
        public void write(
            final JsonWriter out,
            final {{classname}} oneOf) throws IOException {
        TypeAdapter runtimeTypeAdapter = (TypeAdapter) JSON.getGson()
            .getAdapter(TypeToken.get(oneOf.getInsideValue().getClass()));
        runtimeTypeAdapter.write(out, oneOf.getInsideValue());
        }

        @Override
        public {{classname}} read(final JsonReader jsonReader)
            throws IOException {
        {{#vendorExtensions.x-one-of-list}}
        {{{type}}} {{#lambda.lowercase}}{{name}}{{/lambda.lowercase}} = JSON.tryDeserialize(jsonReader, new TypeToken<{{{type}}}>() {}.getType());
        if({{#lambda.lowercase}}{{name}}{{/lambda.lowercase}} != null) {
          return {{classname}}.of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}({{#lambda.lowercase}}{{name}}{{/lambda.lowercase}});
        }
        {{/vendorExtensions.x-one-of-list}}
        return null;
        }
    }
}

{{#vendorExtensions.x-one-of-list}}
@JsonAdapter({{classname}}.Adapter.class)
class {{classname}}{{name}} extends {{classname}} {
    private final {{{type}}} insideValue;

    {{classname}}{{name}}({{{type}}} insideValue) {
        this.insideValue = insideValue;
    }

    @Override
    public {{{type}}} getInsideValue() {
        return insideValue;
    }
}
{{/vendorExtensions.x-one-of-list}}
