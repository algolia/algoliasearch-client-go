<?php

namespace Algolia\AlgoliaSearch\Test\Client;

use Algolia\AlgoliaSearch\Api\{{client}};
use Algolia\AlgoliaSearch\Configuration\{{clientPrefix}}Config;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * Client tests for {{client}}
 */
class {{clientPrefix}}Test extends TestCase implements HttpClientInterface
{
    public const APP_ID = 'test-app-id';
    public const API_KEY = 'test-api-key';

    /**
     * @var RequestInterface
     */
    private $recordedRequest;

    /**
     * @return {{client}}
     */
    private function createClient($appId, $apiKey, $region = '{{{defaultRegion}}}')
    {
        {{^hasRegionalHost}}
            $config = {{clientPrefix}}Config::create($appId, $apiKey);
            $clusterHosts = ClusterHosts::createFromAppId($appId);
        {{/hasRegionalHost}}
        {{#hasRegionalHost}}
            $config = {{clientPrefix}}Config::create(
                $appId, 
                $apiKey, 
                $region
            );
            $clusterHosts = {{client}}::getClusterHosts($config);
        {{/hasRegionalHost}}
        $api = new ApiWrapper($this, $config, $clusterHosts);

        return new {{client}}($api, $config);
    }

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout)
    {
        $this->recordedRequest = [
            'request' => $request,
            'responseTimeout' => $timeout * 1000,
            'connectTimeout' => $connectTimeout * 1000,
        ];

        return new Response(200, [], '{}');
    }

    {{#blocksClient}}
    {{#tests}}
    /**
    * Test case : {{{testName}}}
    */
    public function test{{testIndex}}{{testType}}()
    {
        {{#autoCreateClient}}
            $client = $this->createClient(self::APP_ID, self::API_KEY);
        {{/autoCreateClient}}
        {{#steps}}
            {{#isError}}
                {{#isCreateClient}}
                try {
                    {{> client/createClient}}
                } catch (\Exception $e) {
                    $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
                }
                {{/isCreateClient}}
                {{#isMethod}}
                try {
                    {{> client/method}}
                } catch (\Exception $e) {
                    $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
                }
                {{/isMethod}}
            {{/isError}}
            {{^isError}}
                {{#isCreateClient}}
                    {{> client/createClient}}
                    // Make sure everything went fine without errors
                    $this->assertIsObject($client);
                {{/isCreateClient}}
                {{#isMethod}}
                    {{> client/method}}
                    {{#match}}
                        {{#testUserAgent}}
                        $this->assertTrue(
                            (bool) preg_match(
                                '/{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}/',
                                $this->recordedRequest['request']->getHeader('User-Agent')[0]
                            )
                        );
                        {{/testUserAgent}}
                        {{#testHost}}
                        $this->assertEquals(
                            '{{{match}}}',
                            $this->recordedRequest['request']->getUri()->getHost()
                        );
                        {{/testHost}}
                        {{#testTimeouts}}
                        $this->assertEquals(
                            {{{match.parametersWithDataTypeMap.connectTimeout.value}}},
                            $this->recordedRequest['connectTimeout']
                        );
                    
                        $this->assertEquals(
                            {{{match.parametersWithDataTypeMap.responseTimeout.value}}},
                            $this->recordedRequest['responseTimeout']
                        );
                        {{/testTimeouts}}
                        {{#testResult}}
                        {{/testResult}}
                    {{/match}}
                {{/isMethod}}
            {{/isError}}
        {{/steps}}
    }

    {{/tests}}
    {{/blocksClient}}
}
