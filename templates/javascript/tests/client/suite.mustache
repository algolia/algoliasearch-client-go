/* eslint-disable @typescript-eslint/no-unused-vars, require-await */
// @ts-nocheck Failing tests will have type errors, but we cannot suppress them even with @ts-expect-error because it doesn't work for a block of lines.
import { {{client}}, {{#lambda.titlecase}}{{client}}{{/lambda.titlecase}} } from '{{{import}}}';
import { echoRequester } from '{{{npmNamespace}}}/requester-node-http';
import type { EchoResponse } from '{{{npmNamespace}}}/requester-node-http';

const appId = 'test-app-id';
const apiKey = 'test-api-key';

function createClient(): {{#lambda.titlecase}}{{client}}{{/lambda.titlecase}} {
  return {{client}}(appId, apiKey, {{#hasRegionalHost}}'{{{defaultRegion}}}', {{/hasRegionalHost}}{ requester: echoRequester() });
}

{{#blocksClient}}
describe('{{testType}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    {{#autoCreateClient}}
      const $client = createClient();
    {{/autoCreateClient}}

    {{#steps}}
      {{#isError}}
        try {
          {{> client/step}}
          throw new Error('test is expected to throw error');
        } catch(e) {
          expect((e as Error).message).toMatch("{{{expectedError}}}");
        }
      {{/isError}}
      {{^isError}} 
        {{> client/step}}

        {{#testUserAgent}}
          expect(decodeURIComponent(result.algoliaAgent)).toMatch(/{{{match}}}/);
        {{/testUserAgent}}
        {{#testTimeouts}}
          expect(result).toEqual(expect.objectContaining({{{match.parameters}}}));
        {{/testTimeouts}}
        {{#testHost}}
          expect(result.host).toEqual("{{{match}}}");
        {{/testHost}}
      {{/isError}}
    {{/steps}}
  });

  {{/tests}}
})

{{/blocksClient}}
