import {
  createAuth,
  createMemoryCache,
  createTransporter,
  getUserAgent,
  shuffle,
} from '@experimental-api-clients-automation/client-common';
import type {
  CreateClientOptions,
  Headers,
  Host,
  Request,
} from '@experimental-api-clients-automation/client-common';

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

export * from '../model/models';
export const apiClientVersion = '{{packageVersion}}';

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

{{#hasRegionalHost}}
export type Region = {{#isDeHost}}'de'{{/isDeHost}}{{#isEuHost}}'eu'{{/isEuHost}} | 'us';
{{/hasRegionalHost}}

{{^hasRegionalHost}}{{^experimentalHost}}
function getDefaultHosts(appId: string): Host[] {
  return (
    [
      {
        url: `${appId}-dsn.algolia.net`,
        accept: 'read',
        protocol: 'https',
      },
      {
        url: `${appId}.algolia.net`,
        accept: 'write',
        protocol: 'https',
      },
    ] as Host[]
  ).concat(
    shuffle([
      {
        url: `${appId}-1.algolianet.com`,
        accept: 'readWrite',
        protocol: 'https',
      },
      {
        url: `${appId}-2.algolianet.com`,
        accept: 'readWrite',
        protocol: 'https',
      },
      {
        url: `${appId}-3.algolianet.com`,
        accept: 'readWrite',
        protocol: 'https',
      },
    ])
  );
}
{{/experimentalHost}}{{/hasRegionalHost}}

{{#experimentalHost}}
function getDefaultHosts(): Host[] {
  return [{ url: '{{experimentalHost}}', accept: 'readWrite', protocol: 'https' }];
}
{{/experimentalHost}}

{{#hasRegionalHost}}
function getDefaultHosts(region{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}}: Region): Host[] {
  {{#fallbackToAliasHost}}const regionHost = region ? `.${region}.` : '.';{{/fallbackToAliasHost}}

  return [{ url: `{{{host}}}{{#fallbackToAliasHost}}${regionHost}{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}.${region}.{{/fallbackToAliasHost}}algolia.{{#topLevelDomain}}{{.}}{{/topLevelDomain}}{{^topLevelDomain}}com{{/topLevelDomain}}`, accept: 'readWrite', protocol: 'https' }];
}
{{/hasRegionalHost}}

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function create{{capitalizedApiName}}Api(options: CreateClientOptions{{#hasRegionalHost}} & {region{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}}: Region }{{/hasRegionalHost}}) {
  const auth = createAuth(options.appId, options.apiKey, options.authMode);
  const transporter = createTransporter({
    hosts: options?.hosts ?? getDefaultHosts({{^hasRegionalHost}}{{^experimentalHost}}options.appId{{/experimentalHost}}{{/hasRegionalHost}}{{#hasRegionalHost}}options.region{{/hasRegionalHost}}),
    hostsCache: createMemoryCache(),
    baseHeaders: {
      'content-type': 'application/x-www-form-urlencoded',
      ...auth.headers(),
    },
    baseQueryParameters: auth.queryParameters(),
    userAgent: getUserAgent({
      userAgents: options.userAgents,
      client: '{{{capitalizedApiName}}}',
      version: apiClientVersion,
    }),
    timeouts: options.timeouts,
    requester: options.requester,
  });

  function addUserAgent(segment: string, version?: string): void {
    transporter.userAgent.add({ segment, version });
  }

  {{#operation}}
  /**
  {{#notes}}
  * {{&notes}}
  {{/notes}}
  {{#summary}}
  * @summary {{&summary}}
  {{/summary}}
  {{#allParams.0}}
    {{^bodyParams.0}}
      * @param {{nickname}} - The {{nickname}} object.
        {{#allParams}}
          * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
        {{/allParams}}
    {{/bodyParams.0}}
    {{#bodyParams.0}}
      {{^queryParams.0}}
        {{^pathParams.0}}
          {{#bodyParams.0.isArray}}
            {{^bodyParams.1}}
              * @param {{nickname}} - The {{nickname}} object.
                {{#allParams}}
                  * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
                {{/allParams}}
            {{/bodyParams.1}}
          {{/bodyParams.0.isArray}}
          {{^bodyParams.0.isArray}}
            * @param {{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
          {{/bodyParams.0.isArray}}
        {{/pathParams.0}}
        {{#pathParams.0}}
          * @param {{nickname}} - The {{nickname}} object.
            {{#allParams}}
              * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
            {{/allParams}}
        {{/pathParams.0}}
      {{/queryParams.0}}
      {{#queryParams.0}}
        * @param {{nickname}} - The {{nickname}} object.
          {{#allParams}}
            * @param {{nickname}}.{{paramName}} {{^description}}The {{paramName}} object.{{/description}}{{#description}}{{{description}}}{{/description}}
          {{/allParams}}
      {{/queryParams.0}}
    {{/bodyParams.0}}
  {{/allParams.0}}
  */
  function {{nickname}}(
    {{#allParams.0}}
      {{^bodyParams.0}}
        {
          {{#allParams}}
            {{paramName}},
          {{/allParams}}
        }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
      {{/bodyParams.0}}
      {{#bodyParams.0}}
        {{^queryParams.0}}
          {{^pathParams.0}}
            {{#bodyParams.0.isArray}}
              {{^bodyParams.1}}
              {
                {{#allParams}}
                  {{paramName}},
                {{/allParams}}
              }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
              {{/bodyParams.1}}
            {{/bodyParams.0.isArray}}
            {{^bodyParams.0.isArray}}
              {{#bodyParams}}
                {{paramName}}: {{{dataType}}},
              {{/bodyParams}}
            {{/bodyParams.0.isArray}}
          {{/pathParams.0}}
          {{#pathParams.0}}
            {
              {{#allParams}}
                {{paramName}},
              {{/allParams}}
            }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
          {{/pathParams.0}}
        {{/queryParams.0}}
        {{#queryParams.0}}
          {
            {{#allParams}}
              {{paramName}},
            {{/allParams}}
          }: {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props
        {{/queryParams.0}}
      {{/bodyParams.0}}
    {{/allParams.0}}
      ) : Promise<{{{returnType}}}> {
    const requestPath = '{{{path}}}'{{#pathParams}}.replace(
    {{=<% %>=}}
      '{<%baseName%>}',
    <%={{ }}=%>
      encodeURIComponent(String({{paramName}}))
    ){{/pathParams}};
    let headers: Headers = { Accept: 'application/json' };
    let queryParameters: Record<string, string> = {};

    {{#allParams}}
    {{#required}}
    if ({{#isBoolean}}{{paramName}} === null || {{paramName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}{{/isBoolean}}) {
      throw new Error('Parameter `{{paramName}}` is required when calling `{{nickname}}`.');
    }

    {{#vars}}
    {{#required}}
    if ({{#isBoolean}}{{paramName}}.{{baseName}} === null || {{paramName}}.{{baseName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}.{{baseName}}{{/isBoolean}}) {
      throw new Error('Parameter `{{paramName}}.{{baseName}}` is required when calling `{{nickname}}`.');
    }
    {{/required}}
    {{/vars}}

    {{/required}}
    {{/allParams}}
    {{#queryParams}}
    if ({{paramName}} !== undefined) {
      queryParameters['{{baseName}}'] = {{paramName}}.toString();
    }

    {{/queryParams}}
    {{#headerParams}}
    headers['{{baseName}}'] = {{paramName}};
    {{/headerParams}}

    const request: Request = {
      method: '{{httpMethod}}',
      path: requestPath,
      {{#bodyParam}}
      data: {{paramName}},
      {{/bodyParam}}
    };

    return transporter.request(request, {
      queryParameters,
      headers,
    });
  }

  {{/operation}}

  return { addUserAgent, {{#operation}}{{nickname}},{{/operation}} };
}

export type {{capitalizedApiName}}Api = ReturnType<typeof create{{capitalizedApiName}}Api>;

{{#operation}}
{{#allParams.0}}
  {{^bodyParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
  {{/bodyParams.0}}
  {{#bodyParams.0}}
    {{^queryParams.0}}
      {{^pathParams.0}}
        {{#bodyParams.0.isArray}}
          {{^bodyParams.1}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
          {{/bodyParams.1}}
        {{/bodyParams.0.isArray}}
      {{/pathParams.0}}
      {{#pathParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
      {{/pathParams.0}}
    {{/queryParams.0}}
    {{#queryParams.0}}
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
    {{/queryParams.0}}
  {{/bodyParams.0}}
{{/allParams.0}}

{{/operation}}

{{/operations}}
