import type { InitClientOptions } from '@experimental-api-clients-automation/client-common';
import { createMemoryCache, createNullCache } from '@experimental-api-clients-automation/client-common';
import { createHttpRequester } from '@experimental-api-clients-automation/requester-node-http';

import { create{{capitalizedApiName}} } from '../src/{{apiName}}';
import type { {{capitalizedApiName}} } from '../src/{{apiName}}';

{{#hasRegionalHost}}
import type { Region } from '../src/{{apiName}}';
{{/hasRegionalHost}}

export * from '../src/{{apiName}}';

export function {{apiName}}(
  appId: string,
  apiKey: string,{{#hasRegionalHost}}region{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}}: Region,{{/hasRegionalHost}}
  options?: InitClientOptions
): {{capitalizedApiName}} {
  if (!appId) {
    throw new Error("`appId` is missing.");
  }

  if (!apiKey) {
    throw new Error("`apiKey` is missing.");
  }

  {{#hasRegionalHost}}
  {{^fallbackToAliasHost}}
  if (!region) {
    throw new Error("`region` is missing.");
  }
  {{/fallbackToAliasHost}}
  {{/hasRegionalHost}}

  return create{{capitalizedApiName}}({
    appId,
    apiKey,{{#hasRegionalHost}}region,{{/hasRegionalHost}}
    timeouts: {
      connect: 2,
      read: 5,
      write: 30,
    },
    requester: options?.requester ?? createHttpRequester(),
    userAgents: [{ segment: 'Node.js', version: process.versions.node }],
    responsesCache: options?.responsesCache ?? createNullCache(),
    requestsCache: options?.requestsCache ?? createNullCache(),
    hostsCache: options?.hostsCache ?? createMemoryCache(),
    ...options,
  });
}
