// {{{generationBanner}}}

{{> client/api/imports}}

export const apiClientVersion = '{{packageVersion}}';

{{#operations}}
{{> client/api/hosts}}

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function create{{capitalizedApiName}}({
    appId: appIdOption,
    apiKey: apiKeyOption,
    authMode,
    algoliaAgents,{{#hasRegionalHost}} region: regionOption,{{/hasRegionalHost}}
    ...options
  }: CreateClientOptions{{#hasRegionalHost}} & {region{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}}: Region }{{/hasRegionalHost}}) {
  const auth = createAuth(appIdOption, apiKeyOption, authMode);
  const transporter = createTransporter({
    hosts: getDefaultHosts({{^hasRegionalHost}}appIdOption{{/hasRegionalHost}}{{#hasRegionalHost}}regionOption{{/hasRegionalHost}}),
    ...options,
    algoliaAgent: getAlgoliaAgent({
      algoliaAgents,
      client: '{{{algoliaAgent}}}',
      version: apiClientVersion,
    }),
    baseHeaders: {
      'content-type': 'text/plain',
      ...auth.headers(),
      ...options.baseHeaders,
    },
    baseQueryParameters: {
      ...auth.queryParameters(),
      ...options.baseQueryParameters,
    },
  });

  return {
    transporter,
    /**
     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
     */
    get _ua(): string {
      return transporter.algoliaAgent.value;
    },
    /**
     * Adds a `segment` to the `x-algolia-agent` sent with every requests.
     *
     * @param segment - The algolia agent (user-agent) segment to add.
     * @param version - The version of the agent.
     */
    addAlgoliaAgent(segment: string, version?: string): void {
      transporter.algoliaAgent.add({ segment, version });
    },
    {{#isSearchClient}}
    {{> client/api/helpers}}
    {{/isSearchClient}}
    {{#operation}}
    {{> client/api/operation/jsdoc}}
    {{nickname}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}( {{> client/api/operation/parameters}} ) : Promise<{{{returnType}}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}> {
      {{#vendorExtensions.x-legacy-signature}}
        {{> client/api/operation/legacySearchCompatible/implementation}}
      {{/vendorExtensions.x-legacy-signature}}

      {{#allParams}}
      {{#required}}
      if ({{#isBoolean}}{{paramName}} === null || {{paramName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}{{/isBoolean}}) {
        throw new Error('Parameter `{{paramName}}` is required when calling `{{nickname}}`.');
      }

      {{#vars}}
      {{#required}}
      if ({{#isBoolean}}{{paramName}}.{{baseName}} === null || {{paramName}}.{{baseName}} === undefined{{/isBoolean}}{{^isBoolean}}!{{paramName}}.{{baseName}}{{/isBoolean}}) {
        throw new Error('Parameter `{{paramName}}.{{baseName}}` is required when calling `{{nickname}}`.');
      }
      {{/required}}
      {{/vars}}

      {{/required}}
      {{/allParams}}

      {{#vendorExtensions}}
      const requestPath = '{{{path}}}'{{#pathParams}}.replace({{=<% %>=}}'{<%baseName%>}'<%={{ }}=%>,
        {{#x-is-custom-request}}
          {{paramName}}
        {{/x-is-custom-request}}
        {{^x-is-custom-request}}
          encodeURIComponent({{paramName}})
        {{/x-is-custom-request}}
      ){{/pathParams}};
      {{/vendorExtensions}}
      const headers: Headers = {};
      const queryParameters: QueryParameters = {{#vendorExtensions.x-is-custom-request}}parameters ? parameters : {{/vendorExtensions.x-is-custom-request}}{};

      {{^vendorExtensions.x-is-custom-request}}{{#queryParams}}
      if ({{paramName}} !== undefined) {
        queryParameters['{{baseName}}'] = {{paramName}}.toString();
      }

      {{/queryParams}}{{/vendorExtensions.x-is-custom-request}}

      {{#headerParams}}
      if ({{paramName}} !== undefined) {
        headers['{{baseName}}'] = {{paramName}}.toString();
      }
      {{/headerParams}}

      const request: Request = {
        method: '{{httpMethod}}',
        path: requestPath,
        queryParameters,
        headers,
        {{#bodyParam}}
        data: {{paramName}}{{^required}}? {{paramName}} : {}{{/required}},
        {{/bodyParam}}
        {{#vendorExtensions}}
          {{#x-use-read-transporter}}
            useReadTransporter: true,
          {{/x-use-read-transporter}}
          {{#x-cacheable}}
            cacheable: true,
          {{/x-cacheable}}
        {{/vendorExtensions}}
      };

      return transporter.request(request, requestOptions);
    },

    {{/operation}}
  };
}

/**
 * The client type.
 */
export type {{capitalizedApiName}} = ReturnType<typeof create{{capitalizedApiName}}>;

{{/operations}}
