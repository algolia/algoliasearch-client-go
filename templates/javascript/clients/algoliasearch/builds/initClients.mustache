function initAnalytics(initOptions: CommonInitOptions & InitRegion<AnalyticsRegion> = {}): AnalyticsClient {
  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !analyticsRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${analyticsRegions.join(', ')}`
    );
  }

  return createAnalyticsClient({
    ...initOptions.options,
    ...commonOptions,
    appId: initOptions.appId ?? appId,
    apiKey: initOptions.apiKey ?? apiKey,
    region: initOptions.region,
  });
}

function initAbtesting(initOptions: CommonInitOptions & InitRegion<AbtestingRegion> = {}): AbtestingClient {
  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !abtestingRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${abtestingRegions.join(', ')}`
    );
  }

  return createAbtestingClient({
    ...initOptions.options,
    ...commonOptions,
    appId: initOptions.appId ?? appId,
    apiKey: initOptions.apiKey ?? apiKey,
    region: initOptions.region,
  });
}

function initPersonalization(initOptions: CommonInitOptions & Required<InitRegion<PersonalizationRegion>>): PersonalizationClient {
  if (!initOptions.region) {
    throw new Error('`region` is missing.');
  }

  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !personalizationRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${personalizationRegions.join(', ')}`
    );
  }

  return createPersonalizationClient({
    ...initOptions.options,
    ...commonOptions,
    appId: initOptions.appId ?? appId,
    apiKey: initOptions.apiKey ?? apiKey,
    region: initOptions.region,
  });
}

return {
  ...createSearchClient({ appId, apiKey, ...commonOptions }),
  initAnalytics,
  initPersonalization,
  initAbtesting,
};
