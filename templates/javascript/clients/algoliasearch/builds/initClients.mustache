function initAnalytics(initOptions: InitClientOptions & InitClientRegion<AnalyticsRegion> = {}): AnalyticsClient {
  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !analyticsRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${analyticsRegions.join(', ')}`
    );
  }

  return createAnalyticsClient({
    ...commonOptions,
    ...initOptions.options,
    ...initOptions,
  });
}

function initAbtesting(initOptions: InitClientOptions & InitClientRegion<AbtestingRegion> = {}): AbtestingClient {
  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !abtestingRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${abtestingRegions.join(', ')}`
    );
  }

  return createAbtestingClient({
    ...commonOptions,
    ...initOptions.options,
    ...initOptions,
  });
}

function initPersonalization(initOptions: InitClientOptions & Required<InitClientRegion<PersonalizationRegion>>): PersonalizationClient {
  if (!initOptions.region) {
    throw new Error('`region` is missing.');
  }

  if (
    initOptions.region &&
    (typeof initOptions.region !== 'string' ||
      !personalizationRegions.includes(initOptions.region))
  ) {
    throw new Error(
      `\`region\` must be one of the following: ${personalizationRegions.join(', ')}`
    );
  }

  return createPersonalizationClient({
    ...commonOptions,
    ...initOptions.options,
    ...initOptions,
  });
}

return {
  ...createSearchClient(commonOptions),
  /**
   * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
   */
  get _ua(): string {
    return this.transporter.algoliaAgent.value;
  },
  initAnalytics,
  initPersonalization,
  initAbtesting,
};
