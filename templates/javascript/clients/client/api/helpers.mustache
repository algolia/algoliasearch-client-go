/**
 * Helper: Wait for a task to complete with `indexName` and `taskID`.
 *
 * @summary Wait for a task to complete.
 * @param waitForTaskOptions - The waitForTaskOptions object.
 * @param waitForTaskOptions.indexName - The `indexName` where the operation was performed.
 * @param waitForTaskOptions.taskID - The `taskID` returned in the method response.
 */
waitForTask({
  indexName,
  taskID,
  ...createRetryablePromiseOptions
}: WaitForTaskOptions): Promise<GetTaskResponse> {
  return createRetryablePromise({
    ...createRetryablePromiseOptions,
    func: () => this.getTask({ indexName, taskID }),
    validate: (response) => response.status === 'published',
  });
},

/**
 * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
 *
 * @summary Wait for an API key task to be processed.
 * @param waitForApiKeyOptions - The waitForApiKeyOptions object.
 * @param waitForApiKeyOptions.operation - The `operation` that was done on a `key`.
 * @param waitForApiKeyOptions.key - The `key` that has been added, deleted or updated.
 * @param waitForApiKeyOptions.apiKey - Necessary to know if an `update` operation has been processed, compare fields of the response with it.
 */
waitForApiKey({
  operation,
  key,
  apiKey,
  ...createRetryablePromiseOptions
}: WaitForApiKeyOptions): Promise<ApiError | Key> {
  if (operation === 'update') {
    if (!apiKey) {
      throw new Error(
        '`apiKey` is required when waiting for an `update` operation.'
      );
    }

    return createRetryablePromise({
      ...createRetryablePromiseOptions,
      func: () => this.getApiKey({ key }),
      validate: (response) => {
        for (const field of Object.keys(apiKey)) {
          if (Array.isArray(apiKey[field])) {
            if (
              apiKey[field].length !== response[field].length ||
              (apiKey[field] as string[]).some(
                (value, index) => value !== response[field][index]
              )
            ) {
              return false;
            }
          } else if (response[field] !== apiKey[field]) {
            return false;
          }
        }
        return true;
      },
    });
  }

  return createRetryablePromise({
    ...createRetryablePromiseOptions,
    func: () => this.getApiKey({ key }).catch((error) => error),
    validate: (error: ApiError) =>
      operation === 'add' ? error.status !== 404 : error.status === 404,
  });
},
