// {{{generationBanner}}}

{{#apiInfo.apis.0}}

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

{{! Imports for the legacy search method signature }}
{{#operations}}{{#operation}}{{#vendorExtensions.x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/imports}}{{/vendorExtensions.x-legacy-signature}}{{/operation}}{{/operations}}

{{! Imports for the helpers method of the search client }}
{{#isSearchClient}}import type { CreateIterablePromise } from '{{{npmNamespace}}}/client-common';{{/isSearchClient}}

{{#operations}}
{{#operation}}

{{#vendorExtensions}}
{{#x-create-wrapping-object}}
/**
 * Properties for the `{{nickname}}` method.
 */
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
{{/x-create-wrapping-object}}

{{#x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/model}}{{/x-legacy-signature}}

{{/vendorExtensions}}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
/**
 * The `browseObjects`, `browseRules`, `browseSynonyms` options.
 */
export type BrowseOptions<T> = Partial<
  Pick<CreateIterablePromise<T>, 'validate'>
> &
  Required<Pick<CreateIterablePromise<T>, 'aggregator'>>;

type WaitForOptions<T> = Omit<
  CreateIterablePromise<T>,
  'func' | 'timeout' | 'validate'
> & {
  /**
   * The maximum number of retries. 50 by default.
   */
  maxRetries: number;

  /**
   * The function to decide how long to wait between retries.
   */
  timeout: (retryCount: number) => number;
};

export type WaitForTaskOptions = WaitForOptions<GetTaskResponse> & {
  /**
   * The `indexName` where the operation was performed.
   */
  indexName: string;
  /**
   * The `taskID` returned by the method response.
   */
  taskID: number;
};

export type WaitForApiKeyOptions = WaitForOptions<Key> & {
  /**
   * The API Key.
   */
  key: string;
} & (
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: 'add' | 'delete';
        apiKey?: never;
      }
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: 'update';
        /**
         * The updated fields, used to compute the stop condition.
         */
        apiKey: Partial<ApiKey>;
      }
  );
{{/isSearchClient}}

{{/apiInfo.apis.0}}
