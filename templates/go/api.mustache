// {{{generationBanner}}}
package {{packageName}}

{{#operations}}
import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
  "strings"

  "github.com/algolia/algoliasearch-client-go/v4/algolia/call"
)

type Option struct {
	optionType  string
	name  string
	value string
}

func QueryParamOption(name string, val any) Option {
	return Option{
    optionType:  "query",
		name:  name,
		value: parameterToString(val),
	}
}

func HeaderParamOption(name string, val any) Option {
	return Option{
    optionType:  "header",
		name:  "itemsPerPage",
		value: parameterToString(val),
	}
}

{{#operation}}

  type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request struct {
{{#allParams}}
	{{paramName}} {{^isPathParam}}{{^isFreeFormObject}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isFreeFormObject}}{{/isPathParam}}{{{dataType}}}
{{/allParams}}
}

{{#allParams}}
{{^isPathParam}}
{{#description}}
// {{.}}
{{/description}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) With{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{paramName}} {{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	r.{{paramName}} = {{^isFreeFormObject}}{{^isPrimitiveType}}&{{/isPrimitiveType}}{{/isFreeFormObject}}{{paramName}}
	return r
}

{{/isPathParam}}
{{/allParams}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
//@return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request
func (c *APIClient) NewApi{{{nickname}}}Request({{#pathParams}} {{paramName}} {{{dataType}}} {{^-last}},{{/-last}}{{/pathParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request{
		{{#pathParams}}
		{{paramName}}: {{paramName}},
		{{/pathParams}}
	}
}

// {{{description}}}{{#returnType}}
//  @return {{{.}}}{{/returnType}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (c *APIClient) {{nickname}}(r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request, opts ...Option) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
	var (
    postBody     any
		{{#returnType}}
		returnValue  {{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}
		{{/returnType}}
	)

  requestPath := "{{{path}}}"{{#pathParams}}
  requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape(parameterToString(r.{{paramName}})), -1){{/pathParams}}

	headers := make(map[string]string)
	queryParams := url.Values{}
	{{#allParams}}
	{{#required}}
	{{^isPathParam}}
  {{^isPrimitiveType}}
	if r.{{paramName}} == nil {
	  return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} is required and must be specified")
	}
  {{/isPrimitiveType}}
  {{#isString}}
	if r.{{paramName}} == "" {
	  return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} is required and must be specified")
	}
  {{/isString}}
	{{/isPathParam}}
	{{#minItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

	{{#queryParams}}
	{{#required}}
	queryParams.Add("{{baseName}}", parameterToString({{^isFreeFormObject}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isFreeFormObject}}r.{{paramName}}))
	{{/required}}
  {{^required}}
  if !isNilorEmpty(r.{{paramName}}) {
    queryParams.Add("{{baseName}}", parameterToString({{^isFreeFormObject}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isFreeFormObject}}r.{{paramName}}))
  }
  {{/required}}
	{{/queryParams}}

  {{#headerParams}}
	{{#required}}
	headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isFreeFormObject}}r.{{paramName}})
	{{/required}}
  {{^required}}
  if !isNilorEmpty(r.{{paramName}}) {
    headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isFreeFormObject}}r.{{paramName}})
  }
  {{/required}}
{{/headerParams}}

  // optional params if any
  for _, opt := range opts {
    switch opt.optionType {
      case "query":
        queryParams.Add(opt.name, opt.value)
      case "header":
        headers[opt.name] = opt.value
    }
  }

{{#bodyParams}}
  // body params
  postBody = r.{{paramName}}
{{/bodyParams}}
	req, err := c.prepareRequest(context.Background(), requestPath, http.Method{{httpMethod}}, postBody, headers, queryParams)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}

	res, err := c.callAPI(req, {{#vendorExtensions}}{{#x-use-read-transporter}}call.Read{{/x-use-read-transporter}}{{^x-use-read-transporter}}call.Write{{/x-use-read-transporter}}{{/vendorExtensions}})
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}
  if res == nil {
    return {{#returnType}}returnValue, {{/returnType}}reportError("res is nil")
  }

	resBody, err := io.ReadAll(res.Body)
	res.Body.Close()
	res.Body = io.NopCloser(bytes.NewBuffer(resBody))
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
      Message: string(resBody),
			Status: res.StatusCode,
		}
		{{#responses}}
		{{#dataType}}
		{{^is1xx}}
		{{^is2xx}}
		{{#range}}
		{{#is3xx}}
		if res.StatusCode >= 300 && res.StatusCode < 400 {
		{{/is3xx}}
		{{#is4xx}}
		if res.StatusCode >= 400 && res.StatusCode < 500 {
		{{/is4xx}}
		{{#is5xx}}
		if res.StatusCode >= 500
		{{/is5xx}}
		{{/range}}
		{{^range}}
		{{^wildcard}}
		if res.StatusCode == {{{code}}} {
		{{/wildcard}}
		{{/range}}
			var v {{{dataType}}}
			err = c.decode(&v, resBody, res.Header.Get("Content-Type"))
			if err != nil {
				newErr.Message = err.Error()
				return {{#returnType}}returnValue, {{/returnType}}newErr
			}
			{{^-last}}
			return {{#returnType}}returnValue, {{/returnType}}newErr
			{{/-last}}
		{{^wildcard}}
		}
		{{/wildcard}}
		{{/is2xx}}
		{{/is1xx}}
		{{/dataType}}
		{{/responses}}
		return {{#returnType}}returnValue, {{/returnType}}newErr
	}

	{{#returnType}}
	err = c.decode(&returnValue, resBody, res.Header.Get("Content-Type"))
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}reportError("cannot decode result: %w", err)
	}

	{{/returnType}}
	return {{#returnType}}returnValue, {{/returnType}}nil
}
{{/operation}}
{{/operations}}
