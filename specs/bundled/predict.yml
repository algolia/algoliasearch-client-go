openapi: 3.0.2
info:
  title: Predict API
  description: API powering the Predict feature of Algolia.
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: >-
        The path of the API endpoint to target, anything after the /1 needs to
        be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to be applied to the current query.
      schema:
        type: object
        additionalProperties: true
    userID:
      name: userID
      in: path
      required: true
      schema:
        type: string
      description: >-
        User ID for authenticated users or cookie ID for non-authenticated
        repeated users (visitors).
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    modelsToRetrieve:
      type: string
      enum:
        - funnel_stage
        - order_value
        - affinities
    modelsToRetrieveParam:
      type: object
      required:
        - modelsToRetrieveParam
      properties:
        modelsToRetrieve:
          type: array
          items:
            $ref: '#/components/schemas/modelsToRetrieve'
    typesToRetrieve:
      type: string
      enum:
        - properties
        - segments
    typesToRetrieveParam:
      type: object
      required:
        - typesToRetrieveParam
      properties:
        typesToRetrieve:
          type: array
          items:
            $ref: '#/components/schemas/typesToRetrieve'
    allParams:
      allOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
    params:
      oneOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
        - $ref: '#/components/schemas/allParams'
    userProfile:
      type: object
      required:
        - user
      properties:
        user:
          type: string
        predictions:
          type: object
          title: predictions
          properties:
            funnel_stage:
              type: object
              description: Prediction for the **funnel_stage** model.
              properties:
                value:
                  type: array
                  items:
                    title: funnel_stage
                    type: object
                    properties:
                      name:
                        type: string
                      probability:
                        type: number
                        format: double
                        minimum: 0
                        maximum: 1
                    required:
                      - name
                      - probability
                lastUpdatedAt:
                  type: string
              required:
                - value
                - lastUpdatedAt
            order_value:
              type: object
              description: Prediction for the **order_value** model.
              properties:
                value:
                  type: number
                  format: double
                  minimum: 0
                lastUpdatedAt:
                  type: string
              required:
                - value
                - lastUpdatedAt
            affinities:
              type: object
              description: Prediction for the **affinities** model.
              properties:
                value:
                  type: array
                  items:
                    title: affinity
                    type: object
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                      probability:
                        type: number
                        format: double
                        minimum: 0
                        maximum: 1
                    required:
                      - name
                      - value
                      - probability
                lastUpdatedAt:
                  type: string
              required:
                - value
                - lastUpdatedAt
        properties:
          type: object
          title: properties
          description: Properties for the user profile.
          properties:
            raw:
              type: object
              description: Raw user properties (key-value pairs).
            computed:
              type: object
              description: Computed user properties (key-value pairs).
            custom:
              type: object
              description: Custom user properties (key-value pairs).
        segments:
          type: object
          title: segments
          required:
            - computed
            - custom
          description: Segments that the user belongs to.
          properties:
            computed:
              type: array
              description: List of computed segments IDs.
              items:
                type: string
            custom:
              type: array
              description: List of custom segments IDs.
              items:
                type: string
    nextPageToken:
      type: string
      description: >-
        The token is used to navigate forward in the user list. To navigate from
        the current user list to the next page, the API generates the next page
        token and it sends the token in the response, beside the current user
        list. NOTE: This body param cannot be used with `previousPageToken` at
        the same time.
    nextPageTokenParam:
      type: object
      properties:
        nextPageToken:
          $ref: '#/components/schemas/nextPageToken'
    previousPageToken:
      type: string
      description: >-
        The token is used to navigate backward in the user list. To navigate
        from the current user list to the previous page, the API generates the
        previous page token and it sends the token in the response, beside the
        current user list. NOTE: This body param cannot be used with
        `nextPageToken` at the same time.
    previousPageTokenParam:
      type: object
      properties:
        previousPageToken:
          $ref: '#/components/schemas/previousPageToken'
    limit:
      type: integer
    limitParam:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/limit'
    fetchAllUserProfilesParams:
      oneOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
        - $ref: '#/components/schemas/nextPageTokenParam'
        - $ref: '#/components/schemas/previousPageTokenParam'
        - $ref: '#/components/schemas/limitParam'
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    UserNotFound:
      description: User not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    InvalidCredentials:
      description: Invalid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    InternalError:
      description: Internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
servers:
  - url: https://predict-api-432xa6wemq-{region}.a.run.app
    variables:
      region:
        enum:
          - ue
          - ew
        default: ew
        description: |
          Region where your Predict data is stored and processed:
            * `ew` - europe-west
            * `ue` - us-east.
security:
  - appId: []
    apiKey: []
tags:
  - name: profiles
    x-displayName: Profiles
    description: Manage users' profiles.
x-tagGroups:
  - name: General
    tags:
      - profiles
paths:
  /1{path}:
    get:
      operationId: get
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    post:
      operationId: post
      requestBody:
        description: The parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    put:
      operationId: put
      requestBody:
        description: The parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    delete:
      operationId: del
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
  /1/users/{userID}/fetch:
    post:
      tags:
        - predict
      operationId: fetchUserProfile
      description: >-
        Get predictions, properties (raw, computed or custom) and segments
        (computed or custom) for a user profile.
      summary: Get user profile.
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/params'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: fetchUserProfileResponse
                $ref: '#/components/schemas/userProfile'
        '400':
          description: ModelsToRetrieve or typesToRetrieve must be set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  /1/users/{userID}:
    delete:
      tags:
        - predict
      operationId: deleteUserProfile
      description: >-
        Delete all data and predictions associated with an authenticated user
        (userID) or an anonymous user (cookieID, sessionID).
      summary: Delete user profile.
      parameters:
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: deleteUserProfileResponse
                type: object
                required:
                  - user
                  - deletedUntil
                properties:
                  user:
                    type: string
                    description: The ID of the user that was deleted.
                  deletedUntil:
                    type: string
                    description: >-
                      The time the same user ID will be imported again when the
                      data is ingested.
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '422':
          description: Invalid user ID or application ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/users:
    post:
      tags:
        - predict
      operationId: fetchAllUserProfiles
      description: Get all users with predictions in the provided application.
      summary: Get all user profiles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fetchAllUserProfilesParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: fetchAllUserProfilesResponse
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/userProfile'
                  previousPageToken:
                    $ref: '#/components/schemas/previousPageToken'
                  nextPageToken:
                    $ref: '#/components/schemas/nextPageToken'
        '400':
          description: Could not parse the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
