openapi: 3.0.2
info:
  title: Predict API
  description: API powering the Predict feature of Algolia.
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: >-
        The path of the API endpoint to target, anything after the /1 needs to
        be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to be applied to the current query.
      schema:
        type: object
        additionalProperties: true
    userID:
      name: userID
      in: path
      required: true
      schema:
        type: string
      description: >-
        User ID for authenticated users or cookie ID for non-authenticated
        repeated users (visitors).
    modelID:
      name: modelID
      in: path
      required: true
      schema:
        type: string
      description: The ID of the model to retrieve.
    segmentID:
      name: segmentID
      in: path
      required: true
      schema:
        type: string
      description: The ID of the Segment to fetch.
    type:
      name: type
      in: query
      schema:
        $ref: '#/components/schemas/segmentType'
      description: The type of segments to fetch.
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    modelsToRetrieve:
      type: string
      enum:
        - funnel_stage
        - order_value
        - affinities
    modelsToRetrieveParam:
      type: object
      required:
        - modelsToRetrieveParam
      properties:
        modelsToRetrieve:
          type: array
          items:
            $ref: '#/components/schemas/modelsToRetrieve'
    typesToRetrieve:
      type: string
      enum:
        - properties
        - segments
    typesToRetrieveParam:
      type: object
      required:
        - typesToRetrieveParam
      properties:
        typesToRetrieve:
          type: array
          items:
            $ref: '#/components/schemas/typesToRetrieve'
    allParams:
      allOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
    params:
      oneOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
        - $ref: '#/components/schemas/allParams'
    predictionsFunnelStageSuccess:
      type: object
      description: Prediction for the **funnel_stage** model.
      properties:
        value:
          type: array
          items:
            title: funnel_stage
            type: object
            properties:
              name:
                type: string
              probability:
                type: number
                format: double
                minimum: 0
                maximum: 1
            required:
              - name
              - probability
        lastUpdatedAt:
          type: string
      required:
        - value
        - lastUpdatedAt
    error:
      type: object
      description: The error when the model is not available.
      properties:
        error:
          type: string
      required:
        - error
    predictionsFunnelStage:
      oneOf:
        - $ref: '#/components/schemas/predictionsFunnelStageSuccess'
        - $ref: '#/components/schemas/error'
    predictionsOrderValueSuccess:
      type: object
      description: Prediction for the **order_value** model.
      properties:
        value:
          type: number
          format: double
          minimum: 0
        lastUpdatedAt:
          type: string
      required:
        - value
        - lastUpdatedAt
    predictionsOrderValue:
      oneOf:
        - $ref: '#/components/schemas/predictionsOrderValueSuccess'
        - $ref: '#/components/schemas/error'
    predictionAffinityValue:
      oneOf:
        - type: string
        - type: number
          format: double
        - type: boolean
    predictionsAffinitiesSuccess:
      type: object
      description: Prediction for the **affinities** model.
      properties:
        value:
          type: array
          items:
            title: affinity
            type: object
            properties:
              name:
                type: string
              value:
                $ref: '#/components/schemas/predictionAffinityValue'
              probability:
                type: number
                format: double
                minimum: 0
                maximum: 1
            required:
              - name
              - value
              - probability
        lastUpdatedAt:
          type: string
      required:
        - value
        - lastUpdatedAt
    predictionsAffinities:
      oneOf:
        - $ref: '#/components/schemas/predictionsAffinitiesSuccess'
        - $ref: '#/components/schemas/error'
    userProfile:
      type: object
      required:
        - user
      properties:
        user:
          type: string
        predictions:
          type: object
          title: predictions
          properties:
            funnel_stage:
              $ref: '#/components/schemas/predictionsFunnelStage'
            order_value:
              $ref: '#/components/schemas/predictionsOrderValue'
            affinities:
              $ref: '#/components/schemas/predictionsAffinities'
        properties:
          type: object
          title: properties
          description: Properties for the user profile.
          properties:
            raw:
              type: object
              description: Raw user properties (key-value pairs).
            computed:
              type: object
              description: Computed user properties (key-value pairs).
            custom:
              type: object
              description: Custom user properties (key-value pairs).
        segments:
          type: object
          title: segments
          required:
            - computed
            - custom
          description: Segments that the user belongs to.
          properties:
            computed:
              type: array
              description: List of computed segments IDs.
              items:
                type: string
            custom:
              type: array
              description: List of custom segments IDs.
              items:
                type: string
    nextPageToken:
      type: string
      description: >-
        The token is used to navigate forward in the user list. To navigate from
        the current user list to the next page, the API generates the next page
        token and it sends the token in the response, beside the current user
        list. NOTE: This body param cannot be used with `previousPageToken` at
        the same time.
    nextPageTokenParam:
      type: object
      properties:
        nextPageToken:
          $ref: '#/components/schemas/nextPageToken'
    previousPageToken:
      type: string
      description: >-
        The token is used to navigate backward in the user list. To navigate
        from the current user list to the previous page, the API generates the
        previous page token and it sends the token in the response, beside the
        current user list. NOTE: This body param cannot be used with
        `nextPageToken` at the same time.
    previousPageTokenParam:
      type: object
      properties:
        previousPageToken:
          $ref: '#/components/schemas/previousPageToken'
    limit:
      type: integer
    limitParam:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/limit'
    fetchAllUserProfilesParams:
      oneOf:
        - $ref: '#/components/schemas/modelsToRetrieveParam'
        - $ref: '#/components/schemas/typesToRetrieveParam'
        - $ref: '#/components/schemas/nextPageTokenParam'
        - $ref: '#/components/schemas/previousPageTokenParam'
        - $ref: '#/components/schemas/limitParam'
    compatibleSources:
      type: string
      enum:
        - bigquery
    modelAttributes:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
      required:
        - name
    getModelInstanceConfigStatus:
      type: string
      enum:
        - pending
        - active
        - invalid
        - inactive
      description: >
        `pending` - model has just been created and the pipelines are being set
        up for the first train & inference. \

        `active` - model is running and generating predictions. \

        `invalid` - model has failed training (ex. canâ€™t retrieve data from
        source). An additional `errorMessage` field will be set for this status.
        \

        `inactive` - model has been deactivated from the dashboard. Pipelines
        still exist but they are not currently running.
    modelInstance:
      type: object
      additionalProperties: false
      properties:
        modelID:
          type: string
          description: ID of the model.
        name:
          type: string
          description: Name of model instance.
        type:
          $ref: '#/components/schemas/modelsToRetrieve'
          description: Type of the model.
        sourceID:
          type: string
        index:
          type: string
        modelAttributes:
          type: array
          items:
            $ref: '#/components/schemas/modelAttributes'
        lastTrained:
          type: string
          description: The date and time this model instance was last trained.
        lastInference:
          type: string
          description: The date and time this model instance generated its last inference.
        errorMessage:
          type: string
        modelStatus:
          type: string
          $ref: '#/components/schemas/getModelInstanceConfigStatus'
      required:
        - modelID
        - name
        - type
        - sourceID
        - index
        - lastTrained
        - lastInference
        - modelStatus
    name:
      type: string
      description: The modelâ€™s instance name.
    modelsParams_modelAttributes:
      type: string
      description: >-
        List of items attributes that will be used in the model. This param is
        required if the model `type` needs it (e.g. `affinities`,
        `funnel_stage`).
    modelStatus:
      type: string
      enum:
        - active
        - inactive
      description: >
        `active` - model is running and generating predictions. The active value
        is allowed only if the current status of the model is `inactive`. \

        `inactive` - model training and inference have been paused. The inactive
        value is allowed only if the current status of the model is `active`.
    updateModelParams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        modelAttributes:
          type: array
          items:
            $ref: '#/components/schemas/modelsParams_modelAttributes'
        modelStatus:
          $ref: '#/components/schemas/modelStatus'
    updatedAt:
      type: string
      description: Date of last update (ISO-8601 format).
    sourceID:
      type: string
      description: The data source ID, as returned by the (external) sources API.
    index:
      type: string
      description: The index name.
    activateModelParams:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/modelsToRetrieve'
        name:
          $ref: '#/components/schemas/name'
        sourceID:
          $ref: '#/components/schemas/sourceID'
        index:
          $ref: '#/components/schemas/index'
        modelAttributes:
          type: array
          items:
            $ref: '#/components/schemas/modelsParams_modelAttributes'
      required:
        - type
        - name
        - sourceID
        - index
    modelMetrics:
      type: object
      additionalProperties: false
      properties:
        precision:
          type: number
          format: double
        recall:
          type: number
          format: double
        mrr:
          type: number
          format: double
        coverage:
          type: number
          format: double
        f1_score:
          type: number
          format: double
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
    segmentID:
      type: string
      description: The ID of the segment.
    getSegmentUsersResponse:
      title: getSegmentUsersResponse
      type: object
      required:
        - segmentID
        - users
      properties:
        segmentID:
          $ref: '#/components/schemas/segmentID'
        users:
          type: array
          items:
            $ref: '#/components/schemas/userProfile'
        previousPageToken:
          $ref: '#/components/schemas/previousPageToken'
        nextPageToken:
          $ref: '#/components/schemas/nextPageToken'
    segmentName:
      type: string
      description: The name of the segment.
    segmentConditionOperator:
      description: Operator used to combine the operands.
      type: string
      enum:
        - AND
        - OR
    segmentFilterOperatorNumerical:
      description: The operator used on the numerical filter value.
      type: string
      default: EQ
      enum:
        - EQ
        - NEQ
        - GT
        - GTE
        - LT
        - LTE
    segmentAffinityFilterValue:
      oneOf:
        - type: string
        - type: number
          format: float
        - type: array
          items:
            type: string
        - type: boolean
    segmentFilterProbability:
      description: Probability of the filter.
      type: object
      minProperties: 1
      maxProperties: 2
      properties:
        LT:
          type: number
        LTE:
          type: number
        GT:
          type: number
        GTE:
          type: number
    segmentAffinityFilter:
      description: Filter for affinity model predictions.
      type: object
      required:
        - value
        - operator
      properties:
        operator:
          $ref: '#/components/schemas/segmentFilterOperatorNumerical'
        value:
          $ref: '#/components/schemas/segmentAffinityFilterValue'
        probability:
          $ref: '#/components/schemas/segmentFilterProbability'
    segmentOperandAffinity:
      description: Operand for affinity model predictions.
      type: object
      required:
        - name
        - filters
      properties:
        name:
          type: string
          pattern: ^predictions\.affinities\.\w+$
          example: predictions.affinities.color
        filters:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/segmentAffinityFilter'
    segmentFilterOperatorBoolean:
      description: The operator used on the boolean filter value.
      type: string
      default: EQ
      enum:
        - EQ
        - NEQ
    segmentFunnelStageFilter:
      description: Filter for funnel stage model predictions.
      type: object
      required:
        - value
        - probability
      properties:
        operator:
          $ref: '#/components/schemas/segmentFilterOperatorBoolean'
        value:
          type: string
        probability:
          $ref: '#/components/schemas/segmentFilterProbability'
    segmentOperandFunnelStage:
      description: Operand for funnel stage model predictions.
      type: object
      required:
        - name
        - filters
      properties:
        name:
          type: string
          pattern: ^predictions\.funnel_stage$
          example: predictions.funnel_stage
        filters:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/segmentFunnelStageFilter'
    segmentOrderValueFilter:
      description: Filter for order value model predictions.
      type: object
      required:
        - value
      properties:
        operator:
          $ref: '#/components/schemas/segmentFilterOperatorNumerical'
        value:
          type: number
    segmentOperandOrderValue:
      description: Operand for order value model predictions.
      type: object
      required:
        - name
        - filters
      properties:
        name:
          type: string
          pattern: ^predictions\.order_value$
          example: predictions.order_value
        filters:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/segmentOrderValueFilter'
    segmentPropertyFilterValue:
      allOf:
        - $ref: '#/components/schemas/segmentAffinityFilterValue'
    segmentPropertyFilter:
      description: Filter for user profile properties.
      type: object
      required:
        - value
      properties:
        operator:
          $ref: '#/components/schemas/segmentFilterOperatorNumerical'
        value:
          $ref: '#/components/schemas/segmentPropertyFilterValue'
    segmentOperandProperty:
      description: Operand for user profile properties.
      type: object
      required:
        - name
        - filters
      properties:
        name:
          type: string
          pattern: ^properties\.(raw|computed|custom)\.\w+$
          example: properties.raw.age
        filters:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/segmentPropertyFilter'
    segmentChildConditionOperands:
      oneOf:
        - $ref: '#/components/schemas/segmentOperandAffinity'
        - $ref: '#/components/schemas/segmentOperandFunnelStage'
        - $ref: '#/components/schemas/segmentOperandOrderValue'
        - $ref: '#/components/schemas/segmentOperandProperty'
    segmentChildConditions:
      description: Nested segment conditions that only contain operands.
      type: object
      required:
        - operator
        - operands
      properties:
        operator:
          $ref: '#/components/schemas/segmentConditionOperator'
        operands:
          type: array
          items:
            $ref: '#/components/schemas/segmentChildConditionOperands'
    segmentParentConditionOperands:
      oneOf:
        - $ref: '#/components/schemas/segmentChildConditions'
        - $ref: '#/components/schemas/segmentOperandAffinity'
        - $ref: '#/components/schemas/segmentOperandFunnelStage'
        - $ref: '#/components/schemas/segmentOperandOrderValue'
        - $ref: '#/components/schemas/segmentOperandProperty'
    segmentParentConditions:
      description: >
        The conditions that define which user profiles are included in the
        segment.


        Can contain operands and a maximum of 1 level of nested conditions.
      type: object
      required:
        - operator
        - operands
      properties:
        operator:
          $ref: '#/components/schemas/segmentConditionOperator'
        operands:
          type: array
          items:
            $ref: '#/components/schemas/segmentParentConditionOperands'
    segmentSize:
      type: number
      format: int64
      description: >-
        The approximate number of users that matched the segment conditions when
        it was created, last updated, or when model inference last ran.
    segmentStatus:
      type: string
      description: The status of the segment.
      enum:
        - active
        - pending
        - failed
    segmentType:
      type: string
      description: The type of the segment.
      enum:
        - computed
        - custom
    lastUpdatedAt:
      type: string
      description: The date and time at which the segment was last updated (RFC3339).
      example: '2021-07-22T12:30:00Z'
    segment:
      type: object
      required:
        - segmentID
        - name
        - conditions
        - size
        - segmentStatus
        - type
        - lastUpdatedAt
      properties:
        segmentID:
          $ref: '#/components/schemas/segmentID'
        name:
          $ref: '#/components/schemas/segmentName'
        conditions:
          $ref: '#/components/schemas/segmentParentConditions'
        size:
          $ref: '#/components/schemas/segmentSize'
        segmentStatus:
          $ref: '#/components/schemas/segmentStatus'
        type:
          $ref: '#/components/schemas/segmentType'
        lastUpdatedAt:
          $ref: '#/components/schemas/lastUpdatedAt'
        errorMessage:
          type: string
    SegmentsParams_name:
      type: string
      description: The name or description of the segment.
    segmentNameParam:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/SegmentsParams_name'
    segmentConditionsParam:
      type: object
      properties:
        conditions:
          $ref: '#/components/schemas/segmentParentConditions'
    allUpdateSegmentParams:
      allOf:
        - $ref: '#/components/schemas/segmentNameParam'
        - $ref: '#/components/schemas/segmentConditionsParam'
    updateSegmentParams:
      oneOf:
        - $ref: '#/components/schemas/segmentNameParam'
        - $ref: '#/components/schemas/segmentConditionsParam'
        - $ref: '#/components/schemas/allUpdateSegmentParams'
    Segment_updatedAt:
      type: string
      description: The date and time at which the segment was updated (RFC3339).
      example: '2021-07-22T12:30:00Z'
    updateSegmentResponse:
      title: updateSegmentResponse
      type: object
      required:
        - segmentID
        - updatedAt
      properties:
        segmentID:
          $ref: '#/components/schemas/segmentID'
        size:
          $ref: '#/components/schemas/segmentSize'
        updatedAt:
          $ref: '#/components/schemas/Segment_updatedAt'
    deletedUntil:
      type: string
      description: The date and time at which the segment will be re-ingested.
      example: '2021-07-22T12:30:00Z'
    deleteSegmentResponse:
      title: deleteSegmentResponse
      type: object
      required:
        - segmentID
        - deletedUntil
      properties:
        segmentID:
          $ref: '#/components/schemas/segmentID'
        deletedUntil:
          $ref: '#/components/schemas/deletedUntil'
    fetchAllSegmentsResponse:
      title: fetchAllSegmentsResponse
      type: array
      items:
        $ref: '#/components/schemas/segment'
    createSegmentParams:
      type: object
      required:
        - name
        - conditions
      properties:
        name:
          $ref: '#/components/schemas/SegmentsParams_name'
        conditions:
          $ref: '#/components/schemas/segmentParentConditions'
    createSegmentResponse:
      title: createSegmentResponse
      type: object
      required:
        - segmentID
        - updatedAt
      properties:
        segmentID:
          $ref: '#/components/schemas/segmentID'
        size:
          $ref: '#/components/schemas/segmentSize'
        updatedAt:
          $ref: '#/components/schemas/Segment_updatedAt'
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    UserNotFound:
      description: User not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    InvalidCredentials:
      description: Invalid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    InternalError:
      description: Internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    StatusUnprocessableEntity:
      description: Status unprocessable entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
servers:
  - url: https://predict.{region}.algolia.com
    variables:
      region:
        enum:
          - eu
          - us
        default: eu
        description: |
          Region where your Predict data is stored and processed:
            * `eu` - Europe
            * `us` - United States.
security:
  - appId: []
    apiKey: []
tags:
  - name: models
    x-displayName: Models
    description: Manage models.
  - name: profiles
    x-displayName: Profiles
    description: Manage users' profiles.
  - name: segments
    x-displayName: Segments
    description: Manage segments.
x-tagGroups:
  - name: General
    tags:
      - profiles
      - models
      - segments
paths:
  /1{path}:
    get:
      operationId: get
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    post:
      operationId: post
      requestBody:
        description: The parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    put:
      operationId: put
      requestBody:
        description: The parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
    delete:
      operationId: del
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - predict
  /1/users/{userID}/fetch:
    post:
      tags:
        - predict
      operationId: fetchUserProfile
      description: >-
        Get predictions, properties (raw, computed or custom) and segments
        (computed or custom) for a user profile.
      summary: Get user profile.
      parameters:
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/params'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: fetchUserProfileResponse
                $ref: '#/components/schemas/userProfile'
        '400':
          description: ModelsToRetrieve or typesToRetrieve must be set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  /1/users/{userID}:
    delete:
      tags:
        - predict
      operationId: deleteUserProfile
      description: >-
        Delete all data and predictions associated with an authenticated user
        (userID) or an anonymous user (cookieID, sessionID).
      summary: Delete user profile.
      parameters:
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: deleteUserProfileResponse
                type: object
                required:
                  - user
                  - deletedUntil
                properties:
                  user:
                    type: string
                    description: The ID of the user that was deleted.
                  deletedUntil:
                    type: string
                    description: >-
                      The time the same user ID will be imported again when the
                      data is ingested.
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '422':
          description: Invalid user ID or application ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/users:
    post:
      tags:
        - predict
      operationId: fetchAllUserProfiles
      description: Get all users with predictions in the provided application.
      summary: Get all user profiles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fetchAllUserProfilesParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: fetchAllUserProfilesResponse
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/userProfile'
                  previousPageToken:
                    $ref: '#/components/schemas/previousPageToken'
                  nextPageToken:
                    $ref: '#/components/schemas/nextPageToken'
        '400':
          description: Could not parse the request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/predict/modeltypes:
    get:
      tags:
        - predict
      operationId: getAvailableModelTypes
      summary: Get a list of available model types.
      description: >-
        Get a list of all available model types. Each model type can be
        activated more than once, by selecting a different data source.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getAvailableModelTypesResponse
                type: array
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    name:
                      type: string
                      description: Name of the model.
                    type:
                      type: string
                      description: Description of the model.
                    compatibleSources:
                      type: array
                      items:
                        type: string
                        $ref: '#/components/schemas/compatibleSources'
                    dataRequirements:
                      type: object
                      additionalProperties: false
                      properties:
                        minUsers:
                          type: integer
                          description: Minimum number of users required for this model.
                        minDays:
                          type: integer
                          description: Minimum number of days model needs to run.
                      required:
                        - minUsers
                        - minDays
                  required:
                    - name
                    - type
                    - compatibleSources
                    - dataRequirements
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/predict/models/{modelID}:
    get:
      tags:
        - predict
      operationId: getModelInstanceConfig
      summary: Get a modelâ€™s instance configuration.
      description: Get the configuration for a model that was activated.
      parameters:
        - $ref: '#/components/parameters/modelID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getModelInstanceConfigResponse
                $ref: '#/components/schemas/modelInstance'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - predict
      operationId: updateModelInstance
      summary: Update a model instance.
      description: Update a modelâ€™s configuration.
      parameters:
        - $ref: '#/components/parameters/modelID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateModelParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: updateModelInstanceResponse
                type: object
                additionalProperties: false
                properties:
                  modelID:
                    type: string
                    description: The ID of the model.
                  updatedAt:
                    $ref: '#/components/schemas/updatedAt'
                required:
                  - modelID
                  - updatedAt
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - predict
      operationId: deleteModelInstance
      summary: Delete a model instance.
      description: Delete the modelâ€™s configuration, pipelines and generated predictions.
      parameters:
        - $ref: '#/components/parameters/modelID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: deleteModelInstanceResponse
                type: object
                additionalProperties: false
                properties:
                  modelID:
                    type: string
                    description: The ID of the model.
                  deletedUntil:
                    type: string
                    description: >-
                      The date until which you can safely consider the data as
                      being deleted.
                required:
                  - modelID
                  - deletedUntil
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/predict/models:
    get:
      tags:
        - predict
      operationId: getModelInstances
      summary: Get model instances.
      description: Get a list of all model instances.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getModelInstancesResponse
                type: array
                items:
                  $ref: '#/components/schemas/modelInstance'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - predict
      operationId: activateModelInstance
      summary: Activate a model instance.
      description: >
        Activate an existing model template. This action triggers the training
        and inference pipelines for the selected model.  The model is added with
        `modelStatus=pending`. If a model with the exact same source & index
        already exists, the API endpoint returns an error.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activateModelParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: activateModelInstanceResponse
                type: object
                additionalProperties: false
                properties:
                  modelID:
                    type: string
                    description: The ID of the model.
                  updatedAt:
                    $ref: '#/components/schemas/updatedAt'
                required:
                  - modelID
                  - updatedAt
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/predict/models/{modelID}/metrics:
    get:
      tags:
        - predict
      operationId: getModelMetrics
      summary: Get a modelâ€™s instance metrics.
      description: Get the model instanceâ€™ training metrics.
      parameters:
        - $ref: '#/components/parameters/modelID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getModelMetricsResponse
                type: object
                additionalProperties: false
                properties:
                  modelID:
                    type: string
                    description: The ID of the model.
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/modelMetrics'
                required:
                  - modelID
                  - metrics
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/segments/{segmentID}/users:
    post:
      tags:
        - predict
      operationId: getSegmentUsers
      summary: Get segment users.
      description: Get the profiles of users that belong to a segment.
      parameters:
        - $ref: '#/components/parameters/segmentID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fetchAllUserProfilesParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSegmentUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/segments/{segmentID}:
    get:
      tags:
        - predict
      operationId: fetchSegment
      description: Get the segment configuration.
      summary: Get the segment configuration.
      parameters:
        - $ref: '#/components/parameters/segmentID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: fetchSegmentResponse
                $ref: '#/components/schemas/segment'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/StatusUnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - predict
      operationId: updateSegment
      description: Update a segmentâ€™s configuration.
      summary: Update segment.
      parameters:
        - $ref: '#/components/parameters/segmentID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSegmentParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateSegmentResponse'
        '400':
          $ref: '#/components/responses/IndexNotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/StatusUnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - predict
      operationId: deleteSegment
      summary: Delete a segment's configuration.
      description: >
        Delete the segmentâ€™s configuration. User intents (predictions) from the
        segment are not deleted. All segment types (computed or custom) can be
        deleted.


        When the query is successful, the HTTP response is 200 OK and returns
        the date until which you can safely consider the data as being deleted.
      parameters:
        - $ref: '#/components/parameters/segmentID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteSegmentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/StatusUnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
  /1/segments:
    get:
      tags:
        - predict
      operationId: fetchAllSegments
      description: Get the list of segments with their configuration.
      summary: Get all segments.
      parameters:
        - $ref: '#/components/parameters/type'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fetchAllSegmentsResponse'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/StatusUnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - predict
      operationId: createSegment
      summary: Create a segment.
      description: >-
        Create a new segment. All segments added by this endpoint will have a
        computed type. The endpoint receives a filters parameter, with a syntax
        similar to filters for Rules.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSegmentParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSegmentResponse'
        '400':
          $ref: '#/components/responses/IndexNotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/StatusUnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalError'
