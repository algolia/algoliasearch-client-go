openapi: 3.0.2
info:
  title: Ingestion API
  description: API powering the Data Ingestion connectors of Algolia.
  version: '1.0'
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    itemsPerPage:
      name: itemsPerPage
      in: query
      description: The number of items per page to return.
      required: false
      schema:
        type: integer
    page:
      name: page
      in: query
      description: The page number to fetch, starting at 1.
      required: false
      schema:
        type: integer
    type:
      name: type
      in: query
      description: The type of the authentications to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AuthenticationType'
        example: basic,oauth
    platform:
      name: platform
      in: query
      description: The platform of the authentications to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/platformWithNone'
        example: commercetools,none
    pathAuthenticationID:
      name: authenticationID
      in: path
      required: true
      description: The authentication UUID.
      schema:
        $ref: '#/components/schemas/authenticationID'
    destinationParameters_type:
      name: type
      in: query
      description: The type of the destinations to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/DestinationType'
        example: search,predict
    authenticationID:
      name: authenticationID
      in: query
      description: The authenticationIDs of the destinations to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
    pathDestinationID:
      name: destinationID
      in: path
      required: true
      description: The destination UUID.
      schema:
        $ref: '#/components/schemas/destinationID'
    sourceParameters_type:
      name: type
      in: query
      description: The type of the sources to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/SourceType'
        example: commercetools,bigcommerce
    sourceParameters_authenticationID:
      name: authenticationID
      in: query
      description: >
        The authenticationIDs of the sources to retrieve. 'none' returns sources
        that doesn't have an authentication.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
        example: 10000000-0a75-4000-a000-000000000001,none
    pathSourceID:
      name: sourceID
      in: path
      required: true
      description: The source UUID.
      schema:
        $ref: '#/components/schemas/sourceID'
    action:
      name: action
      in: query
      required: false
      description: The action of the tasks to retrieve.
      style: form
      explode: false
      schema:
        type: array
        description: An array of actions to perform on the Algolia index.
        items:
          $ref: '#/components/schemas/ActionType'
        example: save,replace
    enabled:
      name: enabled
      in: query
      description: Whether the task is enabled or not.
      required: false
      schema:
        type: boolean
    sourceID:
      name: sourceID
      in: query
      description: The sourceIDs of the tasks to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/sourceID'
    destinationID:
      name: destinationID
      in: query
      description: The destinationIDs of the tasks to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/destinationID'
    triggerType:
      name: triggerType
      in: query
      description: The trigger type of the task.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TriggerType'
        example: onDemand,schedule
    pathTaskID:
      name: taskID
      in: path
      required: true
      description: The task UUID.
      schema:
        $ref: '#/components/schemas/taskID'
    runStatus:
      name: status
      in: query
      description: Filter the status of the runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RunStatus'
    taskID:
      name: taskID
      in: query
      description: Filter by taskID.
      schema:
        $ref: '#/components/schemas/taskID'
    pathRunID:
      name: runID
      in: path
      required: true
      description: The run UUID.
      schema:
        $ref: '#/components/schemas/runID'
    eventStatus:
      name: status
      in: query
      description: Filter the status of the events.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventStatus'
    eventType:
      name: type
      in: query
      description: Filter the type of the events.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventType'
    pathEventID:
      name: eventID
      in: path
      required: true
      description: The event UUID.
      schema:
        $ref: '#/components/schemas/eventID'
  schemas:
    AuthenticationType:
      type: string
      description: >-
        Type of the Authentication, defines what kind of object is stored in the
        input.
      enum:
        - googleServiceAccount
        - basic
        - apiKey
        - oauth
        - algolia
    Platform:
      type: string
      description: Describe which platform the Authentication is used for.
      enum:
        - bigcommerce
        - commercetools
    platformNone:
      type: string
      description: Used to filter Authentication without platform property.
      enum:
        - none
    platformWithNone:
      oneOf:
        - $ref: '#/components/schemas/Platform'
        - $ref: '#/components/schemas/platformNone'
    authenticationID:
      type: string
      description: The authentication UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    name:
      type: string
      description: An human readable name describing the object.
    createdAt:
      type: string
      description: Date of creation (RFC3339 format).
    updatedAt:
      type: string
      description: Date of last update (RFC3339 format).
    Authentication:
      type: object
      description: An authentication is used to login into a Source or a Destination.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - type
        - name
        - input
        - createdAt
    Pagination:
      type: object
      additionalProperties: false
      properties:
        nbPages:
          type: integer
        page:
          type: integer
        nbItems:
          type: integer
        itemsPerPage:
          type: integer
      required:
        - nbPages
        - page
        - nbItems
        - itemsPerPage
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    AuthGoogleServiceAccount:
      type: object
      description: Authentication input to connect to a Google service (e.g. BigQuery).
      additionalProperties: false
      properties:
        clientEmail:
          type: string
          description: Email address of the Service Account.
          example: service-account-name@project-id.iam.gserviceaccount.com
        privateKey:
          type: string
          description: Private key of the Service Account.
      required:
        - clientEmail
        - privateKey
    AuthBasic:
      type: object
      description: Authentication input for Basic login with username and password.
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    AuthAPIKey:
      type: object
      description: Authentication input used for token credentials.
      additionalProperties: false
      properties:
        key:
          type: string
      required:
        - key
    AuthOAuth:
      type: object
      description: Authentication input for OAuth login.
      additionalProperties: false
      properties:
        url:
          type: string
          description: The OAuth endpoint URL.
        client_id:
          type: string
          description: The clientID.
        client_secret:
          type: string
          description: The secret.
      required:
        - url
        - client_id
        - client_secret
    AuthAlgolia:
      type: object
      additionalProperties: false
      properties:
        appID:
          type: string
          description: Algolia Application ID.
        apiKey:
          type: string
          description: >-
            Algolia API Key, with the correct rights to push to an index and
            change settings.
      required:
        - appID
        - apiKey
    AuthInput:
      oneOf:
        - $ref: '#/components/schemas/AuthGoogleServiceAccount'
        - $ref: '#/components/schemas/AuthBasic'
        - $ref: '#/components/schemas/AuthAPIKey'
        - $ref: '#/components/schemas/AuthOAuth'
        - $ref: '#/components/schemas/AuthAlgolia'
    AuthenticationCreate:
      type: object
      description: The payload when creating an authentication.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInput'
      required:
        - type
        - name
        - input
    AuthenticationCreateResponse:
      type: object
      description: Response from the API when the Authentication is successfully created.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - authenticationID
        - name
        - createdAt
    AuthenticationSearch:
      type: object
      additionalProperties: false
      description: >-
        Payload to search for multiple authentications, based on the given
        `authenticationIDs`.
      properties:
        authenticationIDs:
          type: array
          items:
            $ref: '#/components/schemas/authenticationID'
      required:
        - authenticationIDs
    AuthenticationWithInput:
      allOf:
        - $ref: '#/components/schemas/Authentication'
        - type: object
          title: authenticationInput
          description: >-
            The authentication input property stores the (encrypted)
            credentials.
          additionalProperties: false
          properties:
            input:
              $ref: '#/components/schemas/AuthInput'
          required:
            - input
    AuthenticationUpdate:
      type: object
      description: Payload to partialy update an Authentication.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInput'
    AuthenticationUpdateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Authentication is successfully updated.
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - name
        - updatedAt
    DeleteResponse:
      type: object
      properties:
        deletedAt:
          type: string
          description: Date of deletion (RFC3339 format).
      required:
        - deletedAt
    DestinationType:
      type: string
      description: >-
        Type of the Destination, defines in which Algolia product the data will
        be stored.
      enum:
        - search
        - insights
        - flow
        - predict
    destinationID:
      type: string
      description: The destination UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    DestinationIndexPrefix:
      type: object
      additionalProperties: false
      properties:
        indexPrefix:
          type: string
          description: The prefix of the final index name.
      required:
        - indexPrefix
    DestinationIndexName:
      type: object
      additionalProperties: false
      properties:
        indexName:
          type: string
          description: The index name to store data in.
      required:
        - indexName
    DestinationInput:
      oneOf:
        - $ref: '#/components/schemas/DestinationIndexPrefix'
        - $ref: '#/components/schemas/DestinationIndexName'
    Destination:
      type: object
      description: A destination describe how the data is indexed on the Algolia side.
      additionalProperties: false
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        authenticationID:
          type: string
      required:
        - destinationID
        - type
        - name
        - input
        - createdAt
    DestinationCreate:
      type: object
      additionalProperties: false
      description: The payload when creating a destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - type
        - name
        - input
        - authenticationID
    DestinationCreateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Destination is successfully created.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - destinationID
        - name
        - createdAt
    DestinationSearch:
      type: object
      additionalProperties: false
      description: >-
        Payload to search for multiple destinations, based on the given
        `destinationIDs`.
      properties:
        destinationIDs:
          type: array
          items:
            $ref: '#/components/schemas/destinationID'
      required:
        - destinationIDs
    DestinationUpdate:
      type: object
      additionalProperties: false
      description: Payload to partialy update a Destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          type: string
    DestinationUpdateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Destination is successfully updated.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - destinationID
        - name
        - updatedAt
    SourceType:
      type: string
      enum:
        - bigcommerce
        - commercetools
        - json
    sourceID:
      type: string
      description: The source UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    SourceCommercetools:
      type: object
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          items:
            description: Unique and immutable key of the referenced Store.
            type: string
        locales:
          type: array
          description: >
            Array of locales that must match the following pattern:
            ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
          items:
            type: string
        url:
          type: string
        projectKey:
          type: string
      required:
        - url
        - projectKey
    SourceBigCommerce:
      type: object
      additionalProperties: false
      properties:
        storeHash:
          type: string
          description: The store hash identifying the store the shopper is signing in to.
      required:
        - store_hash
    MethodType:
      type: string
      enum:
        - GET
        - POST
    SourceJson:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: The URL of the file.
        method:
          $ref: '#/components/schemas/MethodType'
      required:
        - url
    SourceInput:
      oneOf:
        - $ref: '#/components/schemas/SourceCommercetools'
        - $ref: '#/components/schemas/SourceBigCommerce'
        - $ref: '#/components/schemas/SourceJson'
    Source:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - type
        - name
        - input
        - createdAt
    SourceCreate:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - type
        - name
        - input
        - authenticationID
    SourceCreateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - sourceID
        - name
        - createdAt
    SourceSearch:
      type: object
      additionalProperties: false
      properties:
        sourceIDs:
          type: array
          items:
            type: string
      required:
        - sourceIDs
    SourceUpdateCommercetools:
      type: object
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          description: Unique and immutable key of the referenced Store.
          items:
            type: string
        locales:
          type: array
          description: >
            Array of locales that must match the following pattern:
            ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
          items:
            type: string
    SourceUpdateJson:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: The URL of the file.
        method:
          $ref: '#/components/schemas/MethodType'
      required:
        - url
    SourceUpdateInput:
      oneOf:
        - $ref: '#/components/schemas/SourceUpdateCommercetools'
        - $ref: '#/components/schemas/SourceUpdateJson'
    SourceUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceUpdateInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
    SourceUpdateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - name
        - updatedAt
    ActionType:
      type: string
      description: The action to perform on the Algolia index.
      enum:
        - replace
        - save
        - delete
    TriggerType:
      type: string
      description: |
        The type of the task reflect how it can be used:
          - onDemand: a task that runs manually
          - schedule: a task that runs regularly, following a given cron expression
          - subscription: a task that runs after a subscription event is received from an integration (e.g. Webhook).
      enum:
        - onDemand
        - schedule
        - subscription
    taskID:
      type: string
      description: The task UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    OnDemandTriggerType:
      type: string
      description: A task which is manually executed via the run task endpoint.
      enum:
        - onDemand
    LastRun:
      description: The last time the scheduled task ran.
      type: string
    OnDemandTrigger:
      type: object
      additionalProperties: false
      description: The trigger information of a task of type `on-demand`.
      properties:
        type:
          $ref: '#/components/schemas/OnDemandTriggerType'
        lastRun:
          $ref: '#/components/schemas/LastRun'
      required:
        - type
    ScheduleTriggerType:
      type: string
      description: A task which is triggered by a schedule (cron expression).
      enum:
        - schedule
    Cron:
      type: string
      description: >-
        A cron expression that represent at which regularity the task should
        run.
      example: '* * 1 * *'
    ScheduleTrigger:
      type: object
      additionalProperties: false
      description: The trigger information for a task of type 'schedule'.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
        lastRun:
          $ref: '#/components/schemas/LastRun'
        nextRun:
          description: The next scheduled run of the task.
          type: string
      required:
        - type
        - cron
        - nextRun
    SubscriptionTrigger:
      type: object
      additionalProperties: false
      description: The trigger input for a task of type 'subscription'.
      properties:
        type:
          $ref: '#/components/schemas/TriggerType'
      required:
        - type
    Trigger:
      oneOf:
        - $ref: '#/components/schemas/OnDemandTrigger'
        - $ref: '#/components/schemas/ScheduleTrigger'
        - $ref: '#/components/schemas/SubscriptionTrigger'
    Task:
      type: object
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/Trigger'
        enabled:
          type: boolean
          default: true
          description: Whether the task is enabled or not.
        action:
          $ref: '#/components/schemas/ActionType'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - sourceID
        - destinationID
        - trigger
        - enabled
        - action
        - createdAt
    TriggerInput:
      type: object
      additionalProperties: false
      description: The trigger input of a task.
      properties:
        type:
          $ref: '#/components/schemas/TriggerType'
      required:
        - type
    ScheduleTriggerInput:
      type: object
      additionalProperties: false
      description: The trigger input for a task of type 'schedule'.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
      required:
        - type
        - cron
    TaskCreateTrigger:
      oneOf:
        - $ref: '#/components/schemas/TriggerInput'
        - $ref: '#/components/schemas/ScheduleTriggerInput'
    TaskCreate:
      type: object
      additionalProperties: false
      description: The payload for a task creation.
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TaskCreateTrigger'
        action:
          $ref: '#/components/schemas/ActionType'
        enabled:
          type: boolean
          description: Whether the task is enabled or not.
      required:
        - sourceID
        - destinationID
        - trigger
        - action
    TaskCreateResponse:
      type: object
      additionalProperties: false
      description: The response from the API after a task creation.
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - taskID
        - createdAt
    TaskSearch:
      type: object
      additionalProperties: false
      properties:
        taskIDs:
          type: array
          items:
            type: string
      required:
        - taskIDs
    TaskUpdate:
      type: object
      additionalProperties: false
      description: The payload for a task update.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TriggerInput'
        enabled:
          type: boolean
          description: Whether the task is enabled or not.
    TaskUpdateResponse:
      type: object
      description: The response from the API after a task update.
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - updatedAt
    runID:
      type: string
      description: The run UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    RunResponse:
      type: object
      additionalProperties: false
      description: >-
        The response from the run task API, containing an Observability Run ID
        and the time it was created at.
      properties:
        runID:
          $ref: '#/components/schemas/runID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - runID
        - createdAt
    RunStatus:
      type: string
      enum:
        - created
        - started
        - idled
        - finished
    RunOutcome:
      type: string
      enum:
        - success
        - failure
    RunType:
      type: string
      enum:
        - reindex
        - update
    startedAt:
      type: string
      description: Date of start (RFC3339 format).
    finishedAt:
      type: string
      description: Date of finish (RFC3339 format).
    Run:
      type: object
      additionalProperties: false
      properties:
        runID:
          $ref: '#/components/schemas/runID'
        appID:
          type: string
        taskID:
          $ref: '#/components/schemas/taskID'
        status:
          $ref: '#/components/schemas/RunStatus'
        progress:
          type: object
          additionalProperties: false
          properties:
            expectedNbOfEvents:
              type: integer
            receivedNbOfEvents:
              type: integer
        outcome:
          $ref: '#/components/schemas/RunOutcome'
        type:
          $ref: '#/components/schemas/RunType'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        startedAt:
          $ref: '#/components/schemas/startedAt'
        finishedAt:
          $ref: '#/components/schemas/finishedAt'
      required:
        - runID
        - appID
        - taskID
        - status
        - type
        - createdAt
        - updatedAt
    RunListResponse:
      type: object
      additionalProperties: false
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/Run'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - runs
        - pagination
    EventStatus:
      type: string
      enum:
        - created
        - started
        - retried
        - failed
        - succeeded
    EventType:
      type: string
      enum:
        - fetch
        - record
        - log
    eventID:
      type: string
      description: The event UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    publishedAt:
      type: string
      description: Date of publish (RFC3339 format).
    Event:
      type: object
      description: An event describe a step of the task execution flow..
      additionalProperties: false
      properties:
        eventID:
          $ref: '#/components/schemas/eventID'
        runID:
          $ref: '#/components/schemas/runID'
        parentID:
          type: string
          description: The parent event, the cause of this event.
          example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
        status:
          $ref: '#/components/schemas/EventStatus'
        type:
          $ref: '#/components/schemas/EventType'
        data:
          type: object
          additionalProperties: true
        publishedAt:
          $ref: '#/components/schemas/publishedAt'
      required:
        - eventID
        - runID
        - status
        - type
        - publishedAt
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
servers:
  - url: https://data.{region}.algolia.com
    variables:
      region:
        enum:
          - us
        default: us
security:
  - appId: []
    apiKey: []
tags:
  - name: authentications
    x-displayName: Authentications
    description: >-
      An authentication describe the way we connect to Algolia, or any supported
      connector.
  - name: destinations
    x-displayName: Destinations
    description: >-
      A destination refers to an Algolia product (Search, Insight, Recommend,
      ...).
  - name: observability
    x-displayName: Observability
    description: The observability API associates a run to a task execution.
  - name: sources
    x-displayName: Sources
    description: A source describe the platform informations.
  - name: tasks
    x-displayName: Tasks
    description: >-
      A Task describe how we fetch the data (reindex, on-demand, subscription)
      from a source and how we index it on the Algolia side.
paths:
  /1/authentications:
    get:
      tags:
        - ingestion
      summary: Get a list of authentications.
      description: >-
        Get a list of authentications for the given query parameters, with
        pagination details.
      operationId: getAuthentications
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/platform'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listAuthenticationsResponse
                type: object
                additionalProperties: false
                properties:
                  authentications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Authentication'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - authentications
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - ingestion
      summary: Create a authentication.
      description: Create a authentication.
      operationId: createAuthentication
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/authentications/search:
    post:
      tags:
        - ingestion
      summary: Search among authentications.
      description: Search among authentications with a defined set of parameters.
      operationId: searchAuthentications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchAuthenticationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/authentications/{authenticationID}:
    get:
      tags:
        - ingestion
      summary: Get a authentication.
      description: Get the authentication of the given authenticationID.
      operationId: getAuthentication
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationWithInput'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - ingestion
      summary: Update a authentication.
      description: Update the authentication of the given authenticationID.
      operationId: updateAuthentication
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - ingestion
      summary: Delete a authentication.
      description: Soft delete the authentication of the given authenticationID.
      operationId: deleteAuthentication
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/destinations:
    get:
      tags:
        - ingestion
      summary: Get a list of destinations.
      description: >-
        Get a list of destinations for the given query parameters, with
        pagination details.
      operationId: getDestinations
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/destinationParameters_type'
        - $ref: '#/components/parameters/authenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listDestinationsResponse
                type: object
                additionalProperties: false
                properties:
                  destinations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Destination'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - destinations
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - ingestion
      summary: Create a destination.
      description: Create a destination.
      operationId: createDestination
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/destinations/search:
    post:
      tags:
        - ingestion
      summary: Search among destinations.
      description: Search among destinations with a defined set of parameters.
      operationId: searchDestinations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchDestinationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/destinations/{destinationID}:
    get:
      tags:
        - ingestion
      summary: Get a destination.
      description: Get the destination of the given destinationID.
      operationId: getDestination
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - ingestion
      summary: Update a destination.
      description: Update the destination of the given destinationID.
      operationId: updateDestination
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - ingestion
      summary: Delete a destination.
      description: Soft delete the destination of the given destinationID.
      operationId: deleteDestination
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/sources:
    get:
      tags:
        - ingestion
      summary: Get a list of sources.
      description: >-
        Get a list of sources for the given query parameters, with pagination
        details.
      operationId: getSources
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sourceParameters_type'
        - $ref: '#/components/parameters/sourceParameters_authenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listSourcesResponse
                type: object
                additionalProperties: false
                properties:
                  sources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - sources
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - ingestion
      summary: Create a source.
      description: Create a source.
      operationId: createSource
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/sources/search:
    post:
      tags:
        - ingestion
      summary: Search among sources.
      description: Search among sources with a defined set of parameters.
      operationId: searchSources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchSourcesResponse
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/sources/{sourceID}:
    get:
      tags:
        - ingestion
      summary: Get a source.
      description: Get the source of the given sourceID.
      operationId: getSource
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - ingestion
      summary: Update a source.
      description: Update the source of the given sourceID.
      operationId: updateSource
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - ingestion
      summary: Delete a source.
      description: Soft delete the source of the given sourceID.
      operationId: deleteSource
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks:
    get:
      tags:
        - ingestion
      summary: Get a list of tasks.
      description: >-
        Get a list of tasks for the given query parameters, with pagination
        details.
      operationId: getTasks
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/action'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/sourceID'
        - $ref: '#/components/parameters/destinationID'
        - $ref: '#/components/parameters/triggerType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listTasksResponse
                type: object
                description: A list of tasks with pagination details.
                additionalProperties: false
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - tasks
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - ingestion
      summary: Create a task.
      description: Create a task.
      operationId: createTask
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks/search:
    post:
      tags:
        - ingestion
      summary: Search among tasks.
      description: Search among tasks with a defined set of parameters.
      operationId: searchTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchTasksResponse
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks/{taskID}:
    get:
      tags:
        - ingestion
      summary: Get a task.
      description: Get the task of the given taskID.
      operationId: getTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - ingestion
      summary: Update a task.
      description: Update the task of the given taskID.
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - ingestion
      summary: Delete a task.
      description: Soft delete the task of the given taskID.
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks/{taskID}/run:
    post:
      tags:
        - ingestion
      summary: Run a task.
      description: Run the task of the given taskID.
      operationId: runTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks/{taskID}/enable:
    put:
      tags:
        - ingestion
      summary: Enable a task.
      description: Enable the task of the given taskID.
      operationId: enableTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/tasks/{taskID}/disable:
    put:
      tags:
        - ingestion
      summary: Disable a task.
      description: Disable the task of the given taskID.
      operationId: disableTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/runs:
    get:
      tags:
        - ingestion
      summary: Get a list of runs.
      description: >-
        Get a list of runs for the given query parameters, with pagination
        details.
      operationId: getRuns
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/runStatus'
        - $ref: '#/components/parameters/taskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/runs/{runID}:
    get:
      tags:
        - ingestion
      summary: Get a run.
      description: Get a single run for the given ID.
      operationId: getRun
      parameters:
        - $ref: '#/components/parameters/pathRunID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/runs/{runID}/events:
    get:
      tags:
        - ingestion
      summary: Get a list of events.
      description: >-
        Get a list of events associated to the given runID, for the given query
        parameters.
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/eventStatus'
        - $ref: '#/components/parameters/eventType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listEventsResponse
                type: object
                additionalProperties: false
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                required:
                  - events
        '400':
          $ref: '#/components/responses/BadRequest'
  /1/runs/{runID}/events/{eventID}:
    get:
      tags:
        - ingestion
      summary: Get an event.
      description: Get a single event for a specific runID.
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/pathEventID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
