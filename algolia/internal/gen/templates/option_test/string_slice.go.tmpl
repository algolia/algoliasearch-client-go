// Code generated by go generate. DO NOT EDIT.

package opt

import (
    "encoding/json"
    "testing"

    "github.com/algolia/algoliasearch-client-go/v3/algolia/opt"
    "github.com/stretchr/testify/require"
)

func Test{{ .Name }}(t *testing.T) {
    for _, c := range []struct {
        opts     []interface{}
        expected *opt.{{ .Name }}Option
    }{
        {
            opts:     []interface{}{nil},
            expected: opt.{{ .Name }}({{ if ne .DefaultValue "nil" }}{{ .DefaultValue }}...{{ end }}),
        },
        {
            opts:     []interface{}{opt.{{ .Name }}("value1")},
            expected: opt.{{ .Name }}("value1"),
        },
        {
            opts:     []interface{}{opt.{{ .Name }}("value1", "value2", "value3")},
            expected: opt.{{ .Name }}("value1", "value2", "value3"),
        },
    } {
        var (
            in  = Extract{{ .Name }}(c.opts...)
            out opt.{{ .Name }}Option
        )
        data, err := json.Marshal(&in)
        require.NoError(t, err)
        err = json.Unmarshal(data, &out)
        require.NoError(t, err)
        require.ElementsMatch(t, c.expected.Get(), out.Get())
    }
}

func Test{{ .Name }}_CommaSeparatedString(t *testing.T) {
    for _, c := range []struct {
            payload  string
            expected *opt.{{ .Name }}Option
    }{
        {
            payload:  `""`,
            expected: opt.{{ .Name }}([]string{}...),
        },
        {
            payload: `"value1"`,
            expected: opt.{{ .Name }}("value1"),
        },
        {
            payload:  `"value1,value2,value3"`,
            expected: opt.{{ .Name }}("value1", "value2", "value3"),
        },
    } {
        var got opt.{{ .Name }}Option
        err := json.Unmarshal([]byte(c.payload), &got)
        require.NoError(t, err)
        require.ElementsMatch(t, c.expected.Get(), got.Get())
    }
}