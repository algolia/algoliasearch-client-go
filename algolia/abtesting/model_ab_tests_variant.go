// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// AbTestsVariant struct for AbTestsVariant.
type AbTestsVariant struct {
	// Index name of the A/B test variant (case-sensitive).
	Index string `json:"index"`
	// Percentage of search requests each variant receives.
	TrafficPercentage int32 `json:"trafficPercentage"`
	// Description for this variant.
	Description *string `json:"description,omitempty"`
}

type AbTestsVariantOption func(f *AbTestsVariant)

func WithAbTestsVariantDescription(val string) AbTestsVariantOption {
	return func(f *AbTestsVariant) {
		f.Description = &val
	}
}

// NewAbTestsVariant instantiates a new AbTestsVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewAbTestsVariant(index string, trafficPercentage int32, opts ...AbTestsVariantOption) *AbTestsVariant {
	this := &AbTestsVariant{}
	this.Index = index
	this.TrafficPercentage = trafficPercentage
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyAbTestsVariant return a pointer to an empty AbTestsVariant object.
func NewEmptyAbTestsVariant() *AbTestsVariant {
	return &AbTestsVariant{}
}

// GetIndex returns the Index field value.
func (o *AbTestsVariant) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *AbTestsVariant) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *AbTestsVariant) SetIndex(v string) *AbTestsVariant {
	o.Index = v
	return o
}

// GetTrafficPercentage returns the TrafficPercentage field value.
func (o *AbTestsVariant) GetTrafficPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrafficPercentage
}

// GetTrafficPercentageOk returns a tuple with the TrafficPercentage field value
// and a boolean to check if the value has been set.
func (o *AbTestsVariant) GetTrafficPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrafficPercentage, true
}

// SetTrafficPercentage sets field value.
func (o *AbTestsVariant) SetTrafficPercentage(v int32) *AbTestsVariant {
	o.TrafficPercentage = v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AbTestsVariant) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbTestsVariant) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AbTestsVariant) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AbTestsVariant) SetDescription(v string) *AbTestsVariant {
	o.Description = &v
	return o
}

func (o AbTestsVariant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["trafficPercentage"] = o.TrafficPercentage
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal AbTestsVariant: %w", err)
	}

	return serialized, nil
}

func (o AbTestsVariant) String() string {
	out := ""
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  trafficPercentage=%v\n", o.TrafficPercentage)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	return fmt.Sprintf("AbTestsVariant {\n%s}", out)
}
