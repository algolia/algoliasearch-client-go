// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// ABTestResponse struct for ABTestResponse.
type ABTestResponse struct {
	// Index name of the A/B test variant (case-sensitive).
	Index string `json:"index"`
	// Unique A/B test identifier.
	AbTestID int32 `json:"abTestID"`
	// Unique identifier of a task.  A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.
	TaskID int64 `json:"taskID"`
}

// NewABTestResponse instantiates a new ABTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewABTestResponse(index string, abTestID int32, taskID int64) *ABTestResponse {
	this := &ABTestResponse{}
	this.Index = index
	this.AbTestID = abTestID
	this.TaskID = taskID
	return this
}

// NewEmptyABTestResponse return a pointer to an empty ABTestResponse object.
func NewEmptyABTestResponse() *ABTestResponse {
	return &ABTestResponse{}
}

// GetIndex returns the Index field value.
func (o *ABTestResponse) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ABTestResponse) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *ABTestResponse) SetIndex(v string) *ABTestResponse {
	o.Index = v
	return o
}

// GetAbTestID returns the AbTestID field value.
func (o *ABTestResponse) GetAbTestID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AbTestID
}

// GetAbTestIDOk returns a tuple with the AbTestID field value
// and a boolean to check if the value has been set.
func (o *ABTestResponse) GetAbTestIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbTestID, true
}

// SetAbTestID sets field value.
func (o *ABTestResponse) SetAbTestID(v int32) *ABTestResponse {
	o.AbTestID = v
	return o
}

// GetTaskID returns the TaskID field value.
func (o *ABTestResponse) GetTaskID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TaskID
}

// GetTaskIDOk returns a tuple with the TaskID field value
// and a boolean to check if the value has been set.
func (o *ABTestResponse) GetTaskIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskID, true
}

// SetTaskID sets field value.
func (o *ABTestResponse) SetTaskID(v int64) *ABTestResponse {
	o.TaskID = v
	return o
}

func (o ABTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["abTestID"] = o.AbTestID
	}
	if true {
		toSerialize["taskID"] = o.TaskID
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ABTestResponse: %w", err)
	}

	return serialized, nil
}

func (o ABTestResponse) String() string {
	out := ""
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  abTestID=%v\n", o.AbTestID)
	out += fmt.Sprintf("  taskID=%v\n", o.TaskID)
	return fmt.Sprintf("ABTestResponse {\n%s}", out)
}

type NullableABTestResponse struct {
	value *ABTestResponse
	isSet bool
}

func (v NullableABTestResponse) Get() *ABTestResponse {
	return v.value
}

func (v *NullableABTestResponse) Set(val *ABTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableABTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableABTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableABTestResponse(val *ABTestResponse) *NullableABTestResponse {
	return &NullableABTestResponse{value: val, isSet: true}
}

func (v NullableABTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableABTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
