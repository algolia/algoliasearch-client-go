// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// MinimumDetectableEffect Configuration for the smallest difference between test variants you want to detect.
type MinimumDetectableEffect struct {
	// Smallest difference in an observable metric between variants. For example, to detect a 10% difference between variants, set this value to 0.1.
	Size   float64      `json:"size"`
	Metric EffectMetric `json:"metric"`
}

// NewMinimumDetectableEffect instantiates a new MinimumDetectableEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMinimumDetectableEffect(size float64, metric EffectMetric) *MinimumDetectableEffect {
	this := &MinimumDetectableEffect{}
	this.Size = size
	this.Metric = metric
	return this
}

// NewEmptyMinimumDetectableEffect return a pointer to an empty MinimumDetectableEffect object.
func NewEmptyMinimumDetectableEffect() *MinimumDetectableEffect {
	return &MinimumDetectableEffect{}
}

// GetSize returns the Size field value.
func (o *MinimumDetectableEffect) GetSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *MinimumDetectableEffect) GetSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value.
func (o *MinimumDetectableEffect) SetSize(v float64) *MinimumDetectableEffect {
	o.Size = v
	return o
}

// GetMetric returns the Metric field value.
func (o *MinimumDetectableEffect) GetMetric() EffectMetric {
	if o == nil {
		var ret EffectMetric
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *MinimumDetectableEffect) GetMetricOk() (*EffectMetric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value.
func (o *MinimumDetectableEffect) SetMetric(v EffectMetric) *MinimumDetectableEffect {
	o.Metric = v
	return o
}

func (o MinimumDetectableEffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["metric"] = o.Metric
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MinimumDetectableEffect: %w", err)
	}

	return serialized, nil
}

func (o MinimumDetectableEffect) String() string {
	out := ""
	out += fmt.Sprintf("  size=%v\n", o.Size)
	out += fmt.Sprintf("  metric=%v\n", o.Metric)
	return fmt.Sprintf("MinimumDetectableEffect {\n%s}", out)
}
