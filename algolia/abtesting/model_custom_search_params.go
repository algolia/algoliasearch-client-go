// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// CustomSearchParams Applies search parameters from [a restricted set of options](https://www.algolia.com/doc/api-reference/api-methods/add-ab-test/#method-param-customsearchparameters). Only use this parameter if the two variants use the same index.
type CustomSearchParams struct {
	CustomSearchParameters map[string]interface{} `json:"customSearchParameters"`
}

// NewCustomSearchParams instantiates a new CustomSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCustomSearchParams(customSearchParameters map[string]interface{}) *CustomSearchParams {
	this := &CustomSearchParams{}
	this.CustomSearchParameters = customSearchParameters
	return this
}

// NewEmptyCustomSearchParams return a pointer to an empty CustomSearchParams object.
func NewEmptyCustomSearchParams() *CustomSearchParams {
	return &CustomSearchParams{}
}

// GetCustomSearchParameters returns the CustomSearchParameters field value.
func (o *CustomSearchParams) GetCustomSearchParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.CustomSearchParameters
}

// GetCustomSearchParametersOk returns a tuple with the CustomSearchParameters field value
// and a boolean to check if the value has been set.
func (o *CustomSearchParams) GetCustomSearchParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomSearchParameters, true
}

// SetCustomSearchParameters sets field value.
func (o *CustomSearchParams) SetCustomSearchParameters(v map[string]interface{}) *CustomSearchParams {
	o.CustomSearchParameters = v
	return o
}

func (o CustomSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["customSearchParameters"] = o.CustomSearchParameters
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CustomSearchParams: %w", err)
	}

	return serialized, nil
}

func (o CustomSearchParams) String() string {
	out := ""
	out += fmt.Sprintf("  customSearchParameters=%v\n", o.CustomSearchParameters)
	return fmt.Sprintf("CustomSearchParams {\n%s}", out)
}

type NullableCustomSearchParams struct {
	value *CustomSearchParams
	isSet bool
}

func (v NullableCustomSearchParams) Get() *CustomSearchParams {
	return v.value
}

func (v *NullableCustomSearchParams) Set(val *CustomSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomSearchParams(val *CustomSearchParams) *NullableCustomSearchParams {
	return &NullableCustomSearchParams{value: val, isSet: true}
}

func (v NullableCustomSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableCustomSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
