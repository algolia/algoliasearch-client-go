// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// EffectMetric Metric for which you want to detect the smallest relative difference.
type EffectMetric string

// List of EffectMetric.
const (
	EFFECT_METRIC_ADD_TO_CART_RATE   EffectMetric = "addToCartRate"
	EFFECT_METRIC_CLICK_THROUGH_RATE EffectMetric = "clickThroughRate"
	EFFECT_METRIC_CONVERSION_RATE    EffectMetric = "conversionRate"
	EFFECT_METRIC_PURCHASE_RATE      EffectMetric = "purchaseRate"
)

// All allowed values of EffectMetric enum.
var AllowedEffectMetricEnumValues = []EffectMetric{
	"addToCartRate",
	"clickThroughRate",
	"conversionRate",
	"purchaseRate",
}

func (v *EffectMetric) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'EffectMetric': %w", string(src), err)
	}
	enumTypeValue := EffectMetric(value)
	for _, existing := range AllowedEffectMetricEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EffectMetric", value)
}

// NewEffectMetricFromValue returns a pointer to a valid EffectMetric
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEffectMetricFromValue(v string) (*EffectMetric, error) {
	ev := EffectMetric(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EffectMetric: valid values are %v", v, AllowedEffectMetricEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v EffectMetric) IsValid() bool {
	for _, existing := range AllowedEffectMetricEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EffectMetric value.
func (v EffectMetric) Ptr() *EffectMetric {
	return &v
}
