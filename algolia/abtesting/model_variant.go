// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package abtesting

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// Variant struct for Variant.
type Variant struct {
	// Number of add-to-cart events for this variant.
	AddToCartCount int32 `json:"addToCartCount"`
	// [Add-to-cart rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#add-to-cart-rate) for this variant.
	AddToCartRate utils.NullableFloat64 `json:"addToCartRate"`
	// [Average click position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) for this variant.
	AverageClickPosition utils.NullableInt32 `json:"averageClickPosition"`
	// Number of click events for this variant.
	ClickCount int32 `json:"clickCount"`
	// [Click-through rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate) for this variant.
	ClickThroughRate utils.NullableFloat64 `json:"clickThroughRate"`
	// Number of click events for this variant.
	ConversionCount int32 `json:"conversionCount"`
	// [Conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate) for this variant.
	ConversionRate utils.NullableFloat64 `json:"conversionRate"`
	// A/B test currencies.
	Currencies *map[string]Currency `json:"currencies,omitempty"`
	// Description for this variant.
	Description string `json:"description"`
	// Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `mininmumDetectableEffect` setting for this number to be included in the response.
	EstimatedSampleSize *int32         `json:"estimatedSampleSize,omitempty"`
	FilterEffects       *FilterEffects `json:"filterEffects,omitempty"`
	// Index name of the A/B test variant (case-sensitive).
	Index string `json:"index"`
	// Number of [searches without results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results) for this variant.
	NoResultCount utils.NullableInt32 `json:"noResultCount"`
	// Number of purchase events for this variant.
	PurchaseCount int32 `json:"purchaseCount"`
	// [Purchase rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#purchase-rate) for this variant.
	PurchaseRate utils.NullableFloat64 `json:"purchaseRate"`
	// Number of searches for this variant.
	SearchCount utils.NullableInt32 `json:"searchCount"`
	// Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.
	TrackedSearchCount *int32 `json:"trackedSearchCount,omitempty"`
	// Percentage of search requests each variant receives.
	TrafficPercentage int32 `json:"trafficPercentage"`
	// Number of users that made searches to this variant.
	UserCount utils.NullableInt32 `json:"userCount"`
	// Number of users that made tracked searches to this variant.
	TrackedUserCount utils.NullableInt32 `json:"trackedUserCount"`
}

type VariantOption func(f *Variant)

func WithVariantCurrencies(val map[string]Currency) VariantOption {
	return func(f *Variant) {
		f.Currencies = &val
	}
}

func WithVariantEstimatedSampleSize(val int32) VariantOption {
	return func(f *Variant) {
		f.EstimatedSampleSize = &val
	}
}

func WithVariantFilterEffects(val FilterEffects) VariantOption {
	return func(f *Variant) {
		f.FilterEffects = &val
	}
}

func WithVariantTrackedSearchCount(val int32) VariantOption {
	return func(f *Variant) {
		f.TrackedSearchCount = &val
	}
}

// NewVariant instantiates a new Variant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewVariant(addToCartCount int32, addToCartRate utils.NullableFloat64, averageClickPosition utils.NullableInt32, clickCount int32, clickThroughRate utils.NullableFloat64, conversionCount int32, conversionRate utils.NullableFloat64, description string, index string, noResultCount utils.NullableInt32, purchaseCount int32, purchaseRate utils.NullableFloat64, searchCount utils.NullableInt32, trafficPercentage int32, userCount utils.NullableInt32, trackedUserCount utils.NullableInt32, opts ...VariantOption) *Variant {
	this := &Variant{}
	this.AddToCartCount = addToCartCount
	this.AddToCartRate = addToCartRate
	this.AverageClickPosition = averageClickPosition
	this.ClickCount = clickCount
	this.ClickThroughRate = clickThroughRate
	this.ConversionCount = conversionCount
	this.ConversionRate = conversionRate
	this.Description = description
	this.Index = index
	this.NoResultCount = noResultCount
	this.PurchaseCount = purchaseCount
	this.PurchaseRate = purchaseRate
	this.SearchCount = searchCount
	this.TrafficPercentage = trafficPercentage
	this.UserCount = userCount
	this.TrackedUserCount = trackedUserCount
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyVariant return a pointer to an empty Variant object.
func NewEmptyVariant() *Variant {
	return &Variant{}
}

// GetAddToCartCount returns the AddToCartCount field value.
func (o *Variant) GetAddToCartCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AddToCartCount
}

// GetAddToCartCountOk returns a tuple with the AddToCartCount field value
// and a boolean to check if the value has been set.
func (o *Variant) GetAddToCartCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddToCartCount, true
}

// SetAddToCartCount sets field value.
func (o *Variant) SetAddToCartCount(v int32) *Variant {
	o.AddToCartCount = v
	return o
}

// GetAddToCartRate returns the AddToCartRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *Variant) GetAddToCartRate() float64 {
	if o == nil || o.AddToCartRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.AddToCartRate.Get()
}

// GetAddToCartRateOk returns a tuple with the AddToCartRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetAddToCartRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddToCartRate.Get(), o.AddToCartRate.IsSet()
}

// SetAddToCartRate sets field value.
func (o *Variant) SetAddToCartRate(v float64) *Variant {
	o.AddToCartRate.Set(&v)
	return o
}

// GetAverageClickPosition returns the AverageClickPosition field value.
// If the value is explicit nil, the zero value for int32 will be returned.
func (o *Variant) GetAverageClickPosition() int32 {
	if o == nil || o.AverageClickPosition.Get() == nil {
		var ret int32
		return ret
	}

	return *o.AverageClickPosition.Get()
}

// GetAverageClickPositionOk returns a tuple with the AverageClickPosition field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetAverageClickPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AverageClickPosition.Get(), o.AverageClickPosition.IsSet()
}

// SetAverageClickPosition sets field value.
func (o *Variant) SetAverageClickPosition(v int32) *Variant {
	o.AverageClickPosition.Set(&v)
	return o
}

// GetClickCount returns the ClickCount field value.
func (o *Variant) GetClickCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClickCount
}

// GetClickCountOk returns a tuple with the ClickCount field value
// and a boolean to check if the value has been set.
func (o *Variant) GetClickCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickCount, true
}

// SetClickCount sets field value.
func (o *Variant) SetClickCount(v int32) *Variant {
	o.ClickCount = v
	return o
}

// GetClickThroughRate returns the ClickThroughRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *Variant) GetClickThroughRate() float64 {
	if o == nil || o.ClickThroughRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ClickThroughRate.Get()
}

// GetClickThroughRateOk returns a tuple with the ClickThroughRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetClickThroughRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClickThroughRate.Get(), o.ClickThroughRate.IsSet()
}

// SetClickThroughRate sets field value.
func (o *Variant) SetClickThroughRate(v float64) *Variant {
	o.ClickThroughRate.Set(&v)
	return o
}

// GetConversionCount returns the ConversionCount field value.
func (o *Variant) GetConversionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConversionCount
}

// GetConversionCountOk returns a tuple with the ConversionCount field value
// and a boolean to check if the value has been set.
func (o *Variant) GetConversionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionCount, true
}

// SetConversionCount sets field value.
func (o *Variant) SetConversionCount(v int32) *Variant {
	o.ConversionCount = v
	return o
}

// GetConversionRate returns the ConversionRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *Variant) GetConversionRate() float64 {
	if o == nil || o.ConversionRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ConversionRate.Get()
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetConversionRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConversionRate.Get(), o.ConversionRate.IsSet()
}

// SetConversionRate sets field value.
func (o *Variant) SetConversionRate(v float64) *Variant {
	o.ConversionRate.Set(&v)
	return o
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *Variant) GetCurrencies() map[string]Currency {
	if o == nil || o.Currencies == nil {
		var ret map[string]Currency
		return ret
	}
	return *o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetCurrenciesOk() (*map[string]Currency, bool) {
	if o == nil || o.Currencies == nil {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *Variant) HasCurrencies() bool {
	if o != nil && o.Currencies != nil {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given map[string]Currency and assigns it to the Currencies field.
func (o *Variant) SetCurrencies(v map[string]Currency) *Variant {
	o.Currencies = &v
	return o
}

// GetDescription returns the Description field value.
func (o *Variant) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Variant) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value.
func (o *Variant) SetDescription(v string) *Variant {
	o.Description = v
	return o
}

// GetEstimatedSampleSize returns the EstimatedSampleSize field value if set, zero value otherwise.
func (o *Variant) GetEstimatedSampleSize() int32 {
	if o == nil || o.EstimatedSampleSize == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedSampleSize
}

// GetEstimatedSampleSizeOk returns a tuple with the EstimatedSampleSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetEstimatedSampleSizeOk() (*int32, bool) {
	if o == nil || o.EstimatedSampleSize == nil {
		return nil, false
	}
	return o.EstimatedSampleSize, true
}

// HasEstimatedSampleSize returns a boolean if a field has been set.
func (o *Variant) HasEstimatedSampleSize() bool {
	if o != nil && o.EstimatedSampleSize != nil {
		return true
	}

	return false
}

// SetEstimatedSampleSize gets a reference to the given int32 and assigns it to the EstimatedSampleSize field.
func (o *Variant) SetEstimatedSampleSize(v int32) *Variant {
	o.EstimatedSampleSize = &v
	return o
}

// GetFilterEffects returns the FilterEffects field value if set, zero value otherwise.
func (o *Variant) GetFilterEffects() FilterEffects {
	if o == nil || o.FilterEffects == nil {
		var ret FilterEffects
		return ret
	}
	return *o.FilterEffects
}

// GetFilterEffectsOk returns a tuple with the FilterEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetFilterEffectsOk() (*FilterEffects, bool) {
	if o == nil || o.FilterEffects == nil {
		return nil, false
	}
	return o.FilterEffects, true
}

// HasFilterEffects returns a boolean if a field has been set.
func (o *Variant) HasFilterEffects() bool {
	if o != nil && o.FilterEffects != nil {
		return true
	}

	return false
}

// SetFilterEffects gets a reference to the given FilterEffects and assigns it to the FilterEffects field.
func (o *Variant) SetFilterEffects(v *FilterEffects) *Variant {
	o.FilterEffects = v
	return o
}

// GetIndex returns the Index field value.
func (o *Variant) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *Variant) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *Variant) SetIndex(v string) *Variant {
	o.Index = v
	return o
}

// GetNoResultCount returns the NoResultCount field value.
// If the value is explicit nil, the zero value for int32 will be returned.
func (o *Variant) GetNoResultCount() int32 {
	if o == nil || o.NoResultCount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.NoResultCount.Get()
}

// GetNoResultCountOk returns a tuple with the NoResultCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetNoResultCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoResultCount.Get(), o.NoResultCount.IsSet()
}

// SetNoResultCount sets field value.
func (o *Variant) SetNoResultCount(v int32) *Variant {
	o.NoResultCount.Set(&v)
	return o
}

// GetPurchaseCount returns the PurchaseCount field value.
func (o *Variant) GetPurchaseCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PurchaseCount
}

// GetPurchaseCountOk returns a tuple with the PurchaseCount field value
// and a boolean to check if the value has been set.
func (o *Variant) GetPurchaseCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseCount, true
}

// SetPurchaseCount sets field value.
func (o *Variant) SetPurchaseCount(v int32) *Variant {
	o.PurchaseCount = v
	return o
}

// GetPurchaseRate returns the PurchaseRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *Variant) GetPurchaseRate() float64 {
	if o == nil || o.PurchaseRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.PurchaseRate.Get()
}

// GetPurchaseRateOk returns a tuple with the PurchaseRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetPurchaseRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseRate.Get(), o.PurchaseRate.IsSet()
}

// SetPurchaseRate sets field value.
func (o *Variant) SetPurchaseRate(v float64) *Variant {
	o.PurchaseRate.Set(&v)
	return o
}

// GetSearchCount returns the SearchCount field value.
// If the value is explicit nil, the zero value for int32 will be returned.
func (o *Variant) GetSearchCount() int32 {
	if o == nil || o.SearchCount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.SearchCount.Get()
}

// GetSearchCountOk returns a tuple with the SearchCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetSearchCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchCount.Get(), o.SearchCount.IsSet()
}

// SetSearchCount sets field value.
func (o *Variant) SetSearchCount(v int32) *Variant {
	o.SearchCount.Set(&v)
	return o
}

// GetTrackedSearchCount returns the TrackedSearchCount field value if set, zero value otherwise.
func (o *Variant) GetTrackedSearchCount() int32 {
	if o == nil || o.TrackedSearchCount == nil {
		var ret int32
		return ret
	}
	return *o.TrackedSearchCount
}

// GetTrackedSearchCountOk returns a tuple with the TrackedSearchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetTrackedSearchCountOk() (*int32, bool) {
	if o == nil || o.TrackedSearchCount == nil {
		return nil, false
	}
	return o.TrackedSearchCount, true
}

// HasTrackedSearchCount returns a boolean if a field has been set.
func (o *Variant) HasTrackedSearchCount() bool {
	if o != nil && o.TrackedSearchCount != nil {
		return true
	}

	return false
}

// SetTrackedSearchCount gets a reference to the given int32 and assigns it to the TrackedSearchCount field.
func (o *Variant) SetTrackedSearchCount(v int32) *Variant {
	o.TrackedSearchCount = &v
	return o
}

// GetTrafficPercentage returns the TrafficPercentage field value.
func (o *Variant) GetTrafficPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrafficPercentage
}

// GetTrafficPercentageOk returns a tuple with the TrafficPercentage field value
// and a boolean to check if the value has been set.
func (o *Variant) GetTrafficPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrafficPercentage, true
}

// SetTrafficPercentage sets field value.
func (o *Variant) SetTrafficPercentage(v int32) *Variant {
	o.TrafficPercentage = v
	return o
}

// GetUserCount returns the UserCount field value.
// If the value is explicit nil, the zero value for int32 will be returned.
func (o *Variant) GetUserCount() int32 {
	if o == nil || o.UserCount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.UserCount.Get()
}

// GetUserCountOk returns a tuple with the UserCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetUserCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserCount.Get(), o.UserCount.IsSet()
}

// SetUserCount sets field value.
func (o *Variant) SetUserCount(v int32) *Variant {
	o.UserCount.Set(&v)
	return o
}

// GetTrackedUserCount returns the TrackedUserCount field value.
// If the value is explicit nil, the zero value for int32 will be returned.
func (o *Variant) GetTrackedUserCount() int32 {
	if o == nil || o.TrackedUserCount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.TrackedUserCount.Get()
}

// GetTrackedUserCountOk returns a tuple with the TrackedUserCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *Variant) GetTrackedUserCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrackedUserCount.Get(), o.TrackedUserCount.IsSet()
}

// SetTrackedUserCount sets field value.
func (o *Variant) SetTrackedUserCount(v int32) *Variant {
	o.TrackedUserCount.Set(&v)
	return o
}

func (o Variant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["addToCartCount"] = o.AddToCartCount
	}
	if true {
		toSerialize["addToCartRate"] = o.AddToCartRate.Get()
	}
	if true {
		toSerialize["averageClickPosition"] = o.AverageClickPosition.Get()
	}
	if true {
		toSerialize["clickCount"] = o.ClickCount
	}
	if true {
		toSerialize["clickThroughRate"] = o.ClickThroughRate.Get()
	}
	if true {
		toSerialize["conversionCount"] = o.ConversionCount
	}
	if true {
		toSerialize["conversionRate"] = o.ConversionRate.Get()
	}
	if o.Currencies != nil {
		toSerialize["currencies"] = o.Currencies
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.EstimatedSampleSize != nil {
		toSerialize["estimatedSampleSize"] = o.EstimatedSampleSize
	}
	if o.FilterEffects != nil {
		toSerialize["filterEffects"] = o.FilterEffects
	}
	if true {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["noResultCount"] = o.NoResultCount.Get()
	}
	if true {
		toSerialize["purchaseCount"] = o.PurchaseCount
	}
	if true {
		toSerialize["purchaseRate"] = o.PurchaseRate.Get()
	}
	if true {
		toSerialize["searchCount"] = o.SearchCount.Get()
	}
	if o.TrackedSearchCount != nil {
		toSerialize["trackedSearchCount"] = o.TrackedSearchCount
	}
	if true {
		toSerialize["trafficPercentage"] = o.TrafficPercentage
	}
	if true {
		toSerialize["userCount"] = o.UserCount.Get()
	}
	if true {
		toSerialize["trackedUserCount"] = o.TrackedUserCount.Get()
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Variant: %w", err)
	}

	return serialized, nil
}

func (o Variant) String() string {
	out := ""
	out += fmt.Sprintf("  addToCartCount=%v\n", o.AddToCartCount)
	out += fmt.Sprintf("  addToCartRate=%v\n", o.AddToCartRate)
	out += fmt.Sprintf("  averageClickPosition=%v\n", o.AverageClickPosition)
	out += fmt.Sprintf("  clickCount=%v\n", o.ClickCount)
	out += fmt.Sprintf("  clickThroughRate=%v\n", o.ClickThroughRate)
	out += fmt.Sprintf("  conversionCount=%v\n", o.ConversionCount)
	out += fmt.Sprintf("  conversionRate=%v\n", o.ConversionRate)
	out += fmt.Sprintf("  currencies=%v\n", o.Currencies)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  estimatedSampleSize=%v\n", o.EstimatedSampleSize)
	out += fmt.Sprintf("  filterEffects=%v\n", o.FilterEffects)
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  noResultCount=%v\n", o.NoResultCount)
	out += fmt.Sprintf("  purchaseCount=%v\n", o.PurchaseCount)
	out += fmt.Sprintf("  purchaseRate=%v\n", o.PurchaseRate)
	out += fmt.Sprintf("  searchCount=%v\n", o.SearchCount)
	out += fmt.Sprintf("  trackedSearchCount=%v\n", o.TrackedSearchCount)
	out += fmt.Sprintf("  trafficPercentage=%v\n", o.TrafficPercentage)
	out += fmt.Sprintf("  userCount=%v\n", o.UserCount)
	out += fmt.Sprintf("  trackedUserCount=%v\n", o.TrackedUserCount)
	return fmt.Sprintf("Variant {\n%s}", out)
}

type NullableVariant struct {
	value *Variant
	isSet bool
}

func (v NullableVariant) Get() *Variant {
	return v.value
}

func (v *NullableVariant) Set(val *Variant) {
	v.value = val
	v.isSet = true
}

func (v NullableVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariant(val *Variant) *NullableVariant {
	return &NullableVariant{value: val, isSet: true}
}

func (v NullableVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
