// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// Outliers Configuration for handling outliers.
type Outliers struct {
	// Whether to exclude outliers when calculating A/B test results.
	Exclude *bool `json:"exclude,omitempty"`
}

type OutliersOption func(f *Outliers)

func WithOutliersExclude(val bool) OutliersOption {
	return func(f *Outliers) {
		f.Exclude = &val
	}
}

// NewOutliers instantiates a new Outliers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewOutliers(opts ...OutliersOption) *Outliers {
	this := &Outliers{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyOutliers return a pointer to an empty Outliers object.
func NewEmptyOutliers() *Outliers {
	return &Outliers{}
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Outliers) GetExclude() bool {
	if o == nil || o.Exclude == nil {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Outliers) GetExcludeOk() (*bool, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Outliers) HasExclude() bool {
	if o != nil && o.Exclude != nil {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *Outliers) SetExclude(v bool) *Outliers {
	o.Exclude = &v
	return o
}

func (o Outliers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Outliers: %w", err)
	}

	return serialized, nil
}

func (o Outliers) String() string {
	out := ""
	out += fmt.Sprintf("  exclude=%v\n", o.Exclude)
	return fmt.Sprintf("Outliers {\n%s}", out)
}
