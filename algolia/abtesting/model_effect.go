// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// Effect Metric for which you want to detect the smallest relative difference.
type Effect string

// List of Effect.
const (
	EFFECT_ADD_TO_CART_RATE   Effect = "addToCartRate"
	EFFECT_CLICK_THROUGH_RATE Effect = "clickThroughRate"
	EFFECT_CONVERSION_RATE    Effect = "conversionRate"
	EFFECT_PURCHASE_RATE      Effect = "purchaseRate"
)

// All allowed values of Effect enum.
var AllowedEffectEnumValues = []Effect{
	"addToCartRate",
	"clickThroughRate",
	"conversionRate",
	"purchaseRate",
}

func (v *Effect) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Effect': %w", string(src), err)
	}
	enumTypeValue := Effect(value)
	for _, existing := range AllowedEffectEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Effect", value)
}

// NewEffectFromValue returns a pointer to a valid Effect
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEffectFromValue(v string) (*Effect, error) {
	ev := Effect(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Effect: valid values are %v", v, AllowedEffectEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Effect) IsValid() bool {
	for _, existing := range AllowedEffectEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Effect value.
func (v Effect) Ptr() *Effect {
	return &v
}

type NullableEffect struct {
	value *Effect
	isSet bool
}

func (v NullableEffect) Get() *Effect {
	return v.value
}

func (v *NullableEffect) Set(val *Effect) {
	v.value = val
	v.isSet = true
}

func (v NullableEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEffect(val *Effect) *NullableEffect {
	return &NullableEffect{value: val, isSet: true}
}

func (v NullableEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
