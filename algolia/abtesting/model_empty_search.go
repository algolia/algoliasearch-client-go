// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package abtesting

import (
	"encoding/json"
	"fmt"
)

// EmptySearch Configuration for handling empty searches.
type EmptySearch struct {
	// Whether to exclude empty searches when calculating A/B test results.
	Exclude *bool `json:"exclude,omitempty"`
}

type EmptySearchOption func(f *EmptySearch)

func WithEmptySearchExclude(val bool) EmptySearchOption {
	return func(f *EmptySearch) {
		f.Exclude = &val
	}
}

// NewEmptySearch instantiates a new EmptySearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewEmptySearch(opts ...EmptySearchOption) *EmptySearch {
	this := &EmptySearch{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyEmptySearch return a pointer to an empty EmptySearch object.
func NewEmptyEmptySearch() *EmptySearch {
	return &EmptySearch{}
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *EmptySearch) GetExclude() bool {
	if o == nil || o.Exclude == nil {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmptySearch) GetExcludeOk() (*bool, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *EmptySearch) HasExclude() bool {
	if o != nil && o.Exclude != nil {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *EmptySearch) SetExclude(v bool) *EmptySearch {
	o.Exclude = &v
	return o
}

func (o EmptySearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal EmptySearch: %w", err)
	}

	return serialized, nil
}

func (o EmptySearch) String() string {
	out := ""
	out += fmt.Sprintf("  exclude=%v\n", o.Exclude)
	return fmt.Sprintf("EmptySearch {\n%s}", out)
}

type NullableEmptySearch struct {
	value *EmptySearch
	isSet bool
}

func (v NullableEmptySearch) Get() *EmptySearch {
	return v.value
}

func (v *NullableEmptySearch) Set(val *EmptySearch) {
	v.value = val
	v.isSet = true
}

func (v NullableEmptySearch) IsSet() bool {
	return v.isSet
}

func (v *NullableEmptySearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmptySearch(val *EmptySearch) *NullableEmptySearch {
	return &NullableEmptySearch{value: val, isSet: true}
}

func (v NullableEmptySearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableEmptySearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
