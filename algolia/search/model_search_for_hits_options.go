// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchForHitsOptions struct for SearchForHitsOptions
type SearchForHitsOptions struct {
	// Algolia index name.
	IndexName string             `json:"indexName" validate:"required"`
	Type      *SearchTypeDefault `json:"type,omitempty"`
}

type SearchForHitsOptionsOption func(f *SearchForHitsOptions)

func WithSearchForHitsOptionsType(val SearchTypeDefault) SearchForHitsOptionsOption {
	return func(f *SearchForHitsOptions) {
		f.Type = &val
	}
}

// NewSearchForHitsOptions instantiates a new SearchForHitsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchForHitsOptions(indexName string, opts ...SearchForHitsOptionsOption) *SearchForHitsOptions {
	this := &SearchForHitsOptions{}
	this.IndexName = indexName
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSearchForHitsOptionsWithDefaults instantiates a new SearchForHitsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchForHitsOptionsWithDefaults() *SearchForHitsOptions {
	this := &SearchForHitsOptions{}
	var type_ SearchTypeDefault = SEARCHTYPEDEFAULT_DEFAULT
	this.Type = &type_
	return this
}

// GetIndexName returns the IndexName field value
func (o *SearchForHitsOptions) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *SearchForHitsOptions) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *SearchForHitsOptions) SetIndexName(v string) {
	o.IndexName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchForHitsOptions) GetType() SearchTypeDefault {
	if o == nil || o.Type == nil {
		var ret SearchTypeDefault
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForHitsOptions) GetTypeOk() (*SearchTypeDefault, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchForHitsOptions) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SearchTypeDefault and assigns it to the Type field.
func (o *SearchForHitsOptions) SetType(v SearchTypeDefault) {
	o.Type = &v
}

func (o SearchForHitsOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

func (o SearchForHitsOptions) String() string {
	out := ""
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	return fmt.Sprintf("SearchForHitsOptions {\n%s}", out)
}

type NullableSearchForHitsOptions struct {
	value *SearchForHitsOptions
	isSet bool
}

func (v NullableSearchForHitsOptions) Get() *SearchForHitsOptions {
	return v.value
}

func (v *NullableSearchForHitsOptions) Set(val *SearchForHitsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchForHitsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchForHitsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchForHitsOptions(val *SearchForHitsOptions) *NullableSearchForHitsOptions {
	return &NullableSearchForHitsOptions{value: val, isSet: true}
}

func (v NullableSearchForHitsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchForHitsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
