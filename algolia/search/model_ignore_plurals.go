// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// IgnorePlurals - Treats singular, plurals, and other forms of declensions as matching terms. `ignorePlurals` is used in conjunction with the `queryLanguages` setting. _list_: language ISO codes for which ignoring plurals should be enabled. This list will override any values that you may have set in `queryLanguages`. _true_: enables the ignore plurals feature, where singulars and plurals are considered equivalent (\"foot\" = \"feet\"). The languages supported here are either [every language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (this is the default) or those set by `queryLanguages`. _false_: turns off the ignore plurals feature, so that singulars and plurals aren't considered to be the same (\"foot\" will not find \"feet\").
type IgnorePlurals struct {
	ArrayOfString *[]string
	Bool          *bool
}

// []stringAsIgnorePlurals is a convenience function that returns []string wrapped in IgnorePlurals.
func ArrayOfStringAsIgnorePlurals(v []string) *IgnorePlurals {
	return &IgnorePlurals{
		ArrayOfString: &v,
	}
}

// boolAsIgnorePlurals is a convenience function that returns bool wrapped in IgnorePlurals.
func BoolAsIgnorePlurals(v bool) *IgnorePlurals {
	return &IgnorePlurals{
		Bool: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *IgnorePlurals) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil && validateStruct(dst.ArrayOfString) == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil && validateStruct(dst.Bool) == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil
		}
	} else {
		dst.Bool = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(IgnorePlurals)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src IgnorePlurals) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		serialized, err := json.Marshal(&src.ArrayOfString)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ArrayOfString of IgnorePlurals: %w", err)
		}

		return serialized, nil
	}

	if src.Bool != nil {
		serialized, err := json.Marshal(&src.Bool)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Bool of IgnorePlurals: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj *IgnorePlurals) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	// all schemas are nil
	return nil
}

type NullableIgnorePlurals struct {
	value *IgnorePlurals
	isSet bool
}

func (v NullableIgnorePlurals) Get() *IgnorePlurals {
	return v.value
}

func (v *NullableIgnorePlurals) Set(val *IgnorePlurals) {
	v.value = val
	v.isSet = true
}

func (v NullableIgnorePlurals) IsSet() bool {
	return v.isSet
}

func (v *NullableIgnorePlurals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIgnorePlurals(val *IgnorePlurals) *NullableIgnorePlurals {
	return &NullableIgnorePlurals{value: val, isSet: true}
}

func (v NullableIgnorePlurals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableIgnorePlurals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
