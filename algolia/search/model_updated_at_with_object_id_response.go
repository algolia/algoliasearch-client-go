// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// UpdatedAtWithObjectIdResponse Response, taskID, unique object identifier, and an update timestamp.
type UpdatedAtWithObjectIdResponse struct {
	// Unique identifier of a task. A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
	TaskID *int64 `json:"taskID,omitempty"`
	// Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// Unique object identifier.
	ObjectID *string `json:"objectID,omitempty"`
}

type UpdatedAtWithObjectIdResponseOption func(f *UpdatedAtWithObjectIdResponse)

func WithUpdatedAtWithObjectIdResponseTaskID(val int64) UpdatedAtWithObjectIdResponseOption {
	return func(f *UpdatedAtWithObjectIdResponse) {
		f.TaskID = &val
	}
}

func WithUpdatedAtWithObjectIdResponseUpdatedAt(val string) UpdatedAtWithObjectIdResponseOption {
	return func(f *UpdatedAtWithObjectIdResponse) {
		f.UpdatedAt = &val
	}
}

func WithUpdatedAtWithObjectIdResponseObjectID(val string) UpdatedAtWithObjectIdResponseOption {
	return func(f *UpdatedAtWithObjectIdResponse) {
		f.ObjectID = &val
	}
}

// NewUpdatedAtWithObjectIdResponse instantiates a new UpdatedAtWithObjectIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewUpdatedAtWithObjectIdResponse(opts ...UpdatedAtWithObjectIdResponseOption) *UpdatedAtWithObjectIdResponse {
	this := &UpdatedAtWithObjectIdResponse{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyUpdatedAtWithObjectIdResponse return a pointer to an empty UpdatedAtWithObjectIdResponse object.
func NewEmptyUpdatedAtWithObjectIdResponse() *UpdatedAtWithObjectIdResponse {
	return &UpdatedAtWithObjectIdResponse{}
}

// GetTaskID returns the TaskID field value if set, zero value otherwise.
func (o *UpdatedAtWithObjectIdResponse) GetTaskID() int64 {
	if o == nil || o.TaskID == nil {
		var ret int64
		return ret
	}
	return *o.TaskID
}

// GetTaskIDOk returns a tuple with the TaskID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatedAtWithObjectIdResponse) GetTaskIDOk() (*int64, bool) {
	if o == nil || o.TaskID == nil {
		return nil, false
	}
	return o.TaskID, true
}

// HasTaskID returns a boolean if a field has been set.
func (o *UpdatedAtWithObjectIdResponse) HasTaskID() bool {
	if o != nil && o.TaskID != nil {
		return true
	}

	return false
}

// SetTaskID gets a reference to the given int64 and assigns it to the TaskID field.
func (o *UpdatedAtWithObjectIdResponse) SetTaskID(v int64) *UpdatedAtWithObjectIdResponse {
	o.TaskID = &v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UpdatedAtWithObjectIdResponse) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatedAtWithObjectIdResponse) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UpdatedAtWithObjectIdResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UpdatedAtWithObjectIdResponse) SetUpdatedAt(v string) *UpdatedAtWithObjectIdResponse {
	o.UpdatedAt = &v
	return o
}

// GetObjectID returns the ObjectID field value if set, zero value otherwise.
func (o *UpdatedAtWithObjectIdResponse) GetObjectID() string {
	if o == nil || o.ObjectID == nil {
		var ret string
		return ret
	}
	return *o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatedAtWithObjectIdResponse) GetObjectIDOk() (*string, bool) {
	if o == nil || o.ObjectID == nil {
		return nil, false
	}
	return o.ObjectID, true
}

// HasObjectID returns a boolean if a field has been set.
func (o *UpdatedAtWithObjectIdResponse) HasObjectID() bool {
	if o != nil && o.ObjectID != nil {
		return true
	}

	return false
}

// SetObjectID gets a reference to the given string and assigns it to the ObjectID field.
func (o *UpdatedAtWithObjectIdResponse) SetObjectID(v string) *UpdatedAtWithObjectIdResponse {
	o.ObjectID = &v
	return o
}

func (o UpdatedAtWithObjectIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.TaskID != nil {
		toSerialize["taskID"] = o.TaskID
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.ObjectID != nil {
		toSerialize["objectID"] = o.ObjectID
	}
	return json.Marshal(toSerialize)
}

func (o UpdatedAtWithObjectIdResponse) String() string {
	out := ""
	out += fmt.Sprintf("  taskID=%v\n", o.TaskID)
	out += fmt.Sprintf("  updatedAt=%v\n", o.UpdatedAt)
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	return fmt.Sprintf("UpdatedAtWithObjectIdResponse {\n%s}", out)
}

type NullableUpdatedAtWithObjectIdResponse struct {
	value *UpdatedAtWithObjectIdResponse
	isSet bool
}

func (v NullableUpdatedAtWithObjectIdResponse) Get() *UpdatedAtWithObjectIdResponse {
	return v.value
}

func (v *NullableUpdatedAtWithObjectIdResponse) Set(val *UpdatedAtWithObjectIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatedAtWithObjectIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatedAtWithObjectIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatedAtWithObjectIdResponse(val *UpdatedAtWithObjectIdResponse) *NullableUpdatedAtWithObjectIdResponse {
	return &NullableUpdatedAtWithObjectIdResponse{value: val, isSet: true}
}

func (v NullableUpdatedAtWithObjectIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatedAtWithObjectIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
