// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// DictionaryLanguage Dictionary type. If `null`, this dictionary type isn't supported for the language.
type DictionaryLanguage struct {
	// Number of custom dictionary entries.
	NbCustomEntries *int32 `json:"nbCustomEntries,omitempty"`
}

type DictionaryLanguageOption func(f *DictionaryLanguage)

func WithDictionaryLanguageNbCustomEntries(val int32) DictionaryLanguageOption {
	return func(f *DictionaryLanguage) {
		f.NbCustomEntries = &val
	}
}

// NewDictionaryLanguage instantiates a new DictionaryLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewDictionaryLanguage(opts ...DictionaryLanguageOption) *DictionaryLanguage {
	this := &DictionaryLanguage{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyDictionaryLanguage return a pointer to an empty DictionaryLanguage object.
func NewEmptyDictionaryLanguage() *DictionaryLanguage {
	return &DictionaryLanguage{}
}

// GetNbCustomEntries returns the NbCustomEntries field value if set, zero value otherwise.
func (o *DictionaryLanguage) GetNbCustomEntries() int32 {
	if o == nil || o.NbCustomEntries == nil {
		var ret int32
		return ret
	}
	return *o.NbCustomEntries
}

// GetNbCustomEntriesOk returns a tuple with the NbCustomEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DictionaryLanguage) GetNbCustomEntriesOk() (*int32, bool) {
	if o == nil || o.NbCustomEntries == nil {
		return nil, false
	}
	return o.NbCustomEntries, true
}

// HasNbCustomEntries returns a boolean if a field has been set.
func (o *DictionaryLanguage) HasNbCustomEntries() bool {
	if o != nil && o.NbCustomEntries != nil {
		return true
	}

	return false
}

// SetNbCustomEntries gets a reference to the given int32 and assigns it to the NbCustomEntries field.
func (o *DictionaryLanguage) SetNbCustomEntries(v int32) *DictionaryLanguage {
	o.NbCustomEntries = &v
	return o
}

func (o DictionaryLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.NbCustomEntries != nil {
		toSerialize["nbCustomEntries"] = o.NbCustomEntries
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DictionaryLanguage: %w", err)
	}

	return serialized, nil
}

func (o DictionaryLanguage) String() string {
	out := ""
	out += fmt.Sprintf("  nbCustomEntries=%v\n", o.NbCustomEntries)
	return fmt.Sprintf("DictionaryLanguage {\n%s}", out)
}

type NullableDictionaryLanguage struct {
	value *DictionaryLanguage
	isSet bool
}

func (v NullableDictionaryLanguage) Get() *DictionaryLanguage {
	return v.value
}

func (v *NullableDictionaryLanguage) Set(val *DictionaryLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableDictionaryLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableDictionaryLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDictionaryLanguage(val *DictionaryLanguage) *NullableDictionaryLanguage {
	return &NullableDictionaryLanguage{value: val, isSet: true}
}

func (v NullableDictionaryLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableDictionaryLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
