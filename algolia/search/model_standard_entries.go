// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// StandardEntries Key-value pairs of [supported language ISO codes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and boolean values.
type StandardEntries struct {
	// Key-value pair of a language ISO code and a boolean value.
	Plurals map[string]bool `json:"plurals,omitempty"`
	// Key-value pair of a language ISO code and a boolean value.
	Stopwords map[string]bool `json:"stopwords,omitempty"`
	// Key-value pair of a language ISO code and a boolean value.
	Compounds map[string]bool `json:"compounds,omitempty"`
}

type StandardEntriesOption func(f *StandardEntries)

func WithStandardEntriesPlurals(val map[string]bool) StandardEntriesOption {
	return func(f *StandardEntries) {
		f.Plurals = val
	}
}

func WithStandardEntriesStopwords(val map[string]bool) StandardEntriesOption {
	return func(f *StandardEntries) {
		f.Stopwords = val
	}
}

func WithStandardEntriesCompounds(val map[string]bool) StandardEntriesOption {
	return func(f *StandardEntries) {
		f.Compounds = val
	}
}

// NewStandardEntries instantiates a new StandardEntries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardEntries(opts ...StandardEntriesOption) *StandardEntries {
	this := &StandardEntries{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewStandardEntriesWithDefaults instantiates a new StandardEntries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardEntriesWithDefaults() *StandardEntries {
	this := &StandardEntries{}
	return this
}

// GetPlurals returns the Plurals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardEntries) GetPlurals() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}
	return o.Plurals
}

// GetPluralsOk returns a tuple with the Plurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardEntries) GetPluralsOk() (*map[string]bool, bool) {
	if o == nil || o.Plurals == nil {
		return nil, false
	}
	return &o.Plurals, true
}

// HasPlurals returns a boolean if a field has been set.
func (o *StandardEntries) HasPlurals() bool {
	if o != nil && o.Plurals != nil {
		return true
	}

	return false
}

// SetPlurals gets a reference to the given map[string]bool and assigns it to the Plurals field.
func (o *StandardEntries) SetPlurals(v map[string]bool) {
	o.Plurals = v
}

// GetStopwords returns the Stopwords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardEntries) GetStopwords() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}
	return o.Stopwords
}

// GetStopwordsOk returns a tuple with the Stopwords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardEntries) GetStopwordsOk() (*map[string]bool, bool) {
	if o == nil || o.Stopwords == nil {
		return nil, false
	}
	return &o.Stopwords, true
}

// HasStopwords returns a boolean if a field has been set.
func (o *StandardEntries) HasStopwords() bool {
	if o != nil && o.Stopwords != nil {
		return true
	}

	return false
}

// SetStopwords gets a reference to the given map[string]bool and assigns it to the Stopwords field.
func (o *StandardEntries) SetStopwords(v map[string]bool) {
	o.Stopwords = v
}

// GetCompounds returns the Compounds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardEntries) GetCompounds() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}
	return o.Compounds
}

// GetCompoundsOk returns a tuple with the Compounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardEntries) GetCompoundsOk() (*map[string]bool, bool) {
	if o == nil || o.Compounds == nil {
		return nil, false
	}
	return &o.Compounds, true
}

// HasCompounds returns a boolean if a field has been set.
func (o *StandardEntries) HasCompounds() bool {
	if o != nil && o.Compounds != nil {
		return true
	}

	return false
}

// SetCompounds gets a reference to the given map[string]bool and assigns it to the Compounds field.
func (o *StandardEntries) SetCompounds(v map[string]bool) {
	o.Compounds = v
}

func (o StandardEntries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Plurals != nil {
		toSerialize["plurals"] = o.Plurals
	}
	if o.Stopwords != nil {
		toSerialize["stopwords"] = o.Stopwords
	}
	if o.Compounds != nil {
		toSerialize["compounds"] = o.Compounds
	}
	return json.Marshal(toSerialize)
}

func (o StandardEntries) String() string {
	out := ""
	out += fmt.Sprintf("  plurals=%v\n", o.Plurals)
	out += fmt.Sprintf("  stopwords=%v\n", o.Stopwords)
	out += fmt.Sprintf("  compounds=%v\n", o.Compounds)
	return fmt.Sprintf("StandardEntries {\n%s}", out)
}

type NullableStandardEntries struct {
	value *StandardEntries
	isSet bool
}

func (v NullableStandardEntries) Get() *StandardEntries {
	return v.value
}

func (v *NullableStandardEntries) Set(val *StandardEntries) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardEntries) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardEntries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardEntries(val *StandardEntries) *NullableStandardEntries {
	return &NullableStandardEntries{value: val, isSet: true}
}

func (v NullableStandardEntries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardEntries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
