// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchForFacets struct for SearchForFacets
type SearchForFacets struct {
	// Search parameters as a URL-encoded query string.
	Params *string `json:"params,omitempty"`
	// Text to search for in an index.
	Query *string `json:"query,omitempty"`
	// Overrides the query parameter and performs a more generic search.
	SimilarQuery *string `json:"similarQuery,omitempty"`
	// [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters.
	Filters         *string          `json:"filters,omitempty"`
	FacetFilters    *FacetFilters    `json:"facetFilters,omitempty"`
	OptionalFilters *OptionalFilters `json:"optionalFilters,omitempty"`
	NumericFilters  *NumericFilters  `json:"numericFilters,omitempty"`
	TagFilters      *TagFilters      `json:"tagFilters,omitempty"`
	// Determines how to calculate [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores). If `false`, maximum score is kept. If `true`, score is summed.
	SumOrFiltersScores *bool `json:"sumOrFiltersScores,omitempty"`
	// Restricts a query to only look at a subset of your [searchable attributes](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/).
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Returns [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts), their facet values, and the number of matching facet values.
	Facets []string `json:"facets,omitempty"`
	// Forces faceting to be applied after [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/) (with the distinct feature). Alternatively, the `afterDistinct` [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) of `attributesForFaceting` allows for more granular control.
	FacetingAfterDistinct *bool `json:"facetingAfterDistinct,omitempty"`
	// Page to retrieve (the first page is `0`, not `1`).
	Page *int32 `json:"page,omitempty"`
	// Specifies the offset of the first hit to return. > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
	Offset *int32 `json:"offset,omitempty"`
	// Sets the number of hits to retrieve (for use with `offset`). > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
	Length *int32 `json:"length,omitempty"`
	// Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point), enabling a geographical search within a circular area.
	AroundLatLng *string `json:"aroundLatLng,omitempty"`
	// Search for entries around a location. The location is automatically computed from the requester's IP address.
	AroundLatLngViaIP *bool            `json:"aroundLatLngViaIP,omitempty"`
	AroundRadius      *AroundRadius    `json:"aroundRadius,omitempty"`
	AroundPrecision   *AroundPrecision `json:"aroundPrecision,omitempty"`
	// Minimum radius (in meters) used for a geographical search when `aroundRadius` isn't set.
	MinimumAroundRadius *int32 `json:"minimumAroundRadius,omitempty"`
	// Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).
	InsideBoundingBox [][]float64 `json:"insideBoundingBox,omitempty"`
	// Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).
	InsidePolygon [][]float64 `json:"insidePolygon,omitempty"`
	// Changes the default values of parameters that work best for a natural language query, such as `ignorePlurals`, `removeStopWords`, `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These parameters work well together when the query consists of fuller natural language strings instead of keywords, for example when processing voice search queries.
	NaturalLanguages []string `json:"naturalLanguages,omitempty"`
	// Assigns [rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) to search queries.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// Defines how much [Personalization affects results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Associates a [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/) with the current search.
	UserToken *string `json:"userToken,omitempty"`
	// Incidates whether the search response includes [detailed ranking information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information).
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// Enriches the API's response with information about how the query was processed.
	Explain []string `json:"explain,omitempty"`
	// Whether to take into account an index's synonyms for a particular search.
	Synonyms *bool `json:"synonyms,omitempty"`
	// Indicates whether a query ID parameter is included in the search response. This is required for [tracking click and conversion events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests).
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Indicates whether this query will be included in [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/).
	Analytics *bool `json:"analytics,omitempty"`
	// Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
	AnalyticsTags []string `json:"analyticsTags,omitempty"`
	// Whether to include or exclude a query from the processing-time percentile computation.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Incidates whether this search will be considered in A/B testing.
	EnableABTest *bool `json:"enableABTest,omitempty"`
	// Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/) and the [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) that can be applied: `filterOnly`, `searchable`, and `afterDistinct`.
	AttributesForFaceting []string `json:"attributesForFaceting,omitempty"`
	// Attributes to include in the API response. To reduce the size of your response, you can retrieve only some of the attributes. By default, the response includes all attributes.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Determines the order in which Algolia [returns your results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).
	Ranking []string `json:"ranking,omitempty"`
	// Specifies the [Custom ranking criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Use the `asc` and `desc` modifiers to specify the ranking order: ascending or descending.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Relevancy threshold below which less relevant results aren't included in the results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// Attributes to highlight. Strings that match the search query in the attributes are highlighted by surrounding them with HTML tags (`highlightPreTag` and `highlightPostTag`).
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// Attributes to _snippet_. 'Snippeting' is shortening the attribute to a certain number of words. If not specified, the attribute is shortened to the 10 words around the matching string but you can specify the number. For example: `body:20`.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// HTML string to insert before the highlighted parts in all highlight and snippet results.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// HTML string to insert after the highlighted parts in all highlight and snippet results.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Restrict highlighting and snippeting to items that matched the query.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers (\"numeric tokens\") in the query string.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// Characters that the engine shouldn't automatically [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Sets your user's search language. This adjusts language-specific settings and features such as `ignorePlurals`, `removeStopWords`, and [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) word detection.
	QueryLanguages []string `json:"queryLanguages,omitempty"`
	// [Splits compound words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words) into their component word parts in the query.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Incidates whether [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/) are enabled.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Incidates whether [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/) is enabled.
	EnablePersonalization  *bool                   `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType              `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                   `json:"mode,omitempty"`
	SemanticSearch         *SemanticSearch         `json:"semanticSearch,omitempty"`
	// Enables the [advanced query syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax).
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// Words which should be considered [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words) when found in a query.
	OptionalWords []string `json:"optionalWords,omitempty"`
	// Attributes for which you want to [turn off the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// Alternatives that should be considered an exact match by [the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Allows you to specify which advanced syntax features are active when `advancedSyntax` is enabled.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	Distinct               *Distinct                `json:"distinct,omitempty"`
	// Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Precision of the [proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity).
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Attributes to include in the API response for search and browse queries.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// Maximum number of facet values to return for each facet.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Controls how facet values are fetched.
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// When the [Attribute criterion is ranked above Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations) in your ranking formula, Proximity is used to select which searchable attribute is matched in the Attribute ranking stage.
	AttributeCriteriaComputedByMinProximity *bool             `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent `json:"renderingContent,omitempty"`
	// Indicates whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
	EnableReRanking      *bool                        `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter NullableReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
	// Facet name.
	Facet string `json:"facet"`
	// Algolia index name.
	IndexName string `json:"indexName"`
	// Text to search inside the facet's values.
	FacetQuery *string         `json:"facetQuery,omitempty"`
	Type       SearchTypeFacet `json:"type"`
}

type SearchForFacetsOption func(f *SearchForFacets)

func WithSearchForFacetsParams(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Params = &val
	}
}

func WithSearchForFacetsQuery(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Query = &val
	}
}

func WithSearchForFacetsSimilarQuery(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.SimilarQuery = &val
	}
}

func WithSearchForFacetsFilters(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Filters = &val
	}
}

func WithSearchForFacetsFacetFilters(val FacetFilters) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.FacetFilters = &val
	}
}

func WithSearchForFacetsOptionalFilters(val OptionalFilters) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.OptionalFilters = &val
	}
}

func WithSearchForFacetsNumericFilters(val NumericFilters) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.NumericFilters = &val
	}
}

func WithSearchForFacetsTagFilters(val TagFilters) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.TagFilters = &val
	}
}

func WithSearchForFacetsSumOrFiltersScores(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.SumOrFiltersScores = &val
	}
}

func WithSearchForFacetsRestrictSearchableAttributes(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RestrictSearchableAttributes = val
	}
}

func WithSearchForFacetsFacets(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Facets = val
	}
}

func WithSearchForFacetsFacetingAfterDistinct(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.FacetingAfterDistinct = &val
	}
}

func WithSearchForFacetsPage(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Page = &val
	}
}

func WithSearchForFacetsOffset(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Offset = &val
	}
}

func WithSearchForFacetsLength(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Length = &val
	}
}

func WithSearchForFacetsAroundLatLng(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AroundLatLng = &val
	}
}

func WithSearchForFacetsAroundLatLngViaIP(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AroundLatLngViaIP = &val
	}
}

func WithSearchForFacetsAroundRadius(val AroundRadius) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AroundRadius = &val
	}
}

func WithSearchForFacetsAroundPrecision(val AroundPrecision) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AroundPrecision = &val
	}
}

func WithSearchForFacetsMinimumAroundRadius(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MinimumAroundRadius = &val
	}
}

func WithSearchForFacetsInsideBoundingBox(val [][]float64) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.InsideBoundingBox = val
	}
}

func WithSearchForFacetsInsidePolygon(val [][]float64) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.InsidePolygon = val
	}
}

func WithSearchForFacetsNaturalLanguages(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.NaturalLanguages = val
	}
}

func WithSearchForFacetsRuleContexts(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RuleContexts = val
	}
}

func WithSearchForFacetsPersonalizationImpact(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.PersonalizationImpact = &val
	}
}

func WithSearchForFacetsUserToken(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.UserToken = &val
	}
}

func WithSearchForFacetsGetRankingInfo(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.GetRankingInfo = &val
	}
}

func WithSearchForFacetsExplain(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Explain = val
	}
}

func WithSearchForFacetsSynonyms(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Synonyms = &val
	}
}

func WithSearchForFacetsClickAnalytics(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.ClickAnalytics = &val
	}
}

func WithSearchForFacetsAnalytics(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Analytics = &val
	}
}

func WithSearchForFacetsAnalyticsTags(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AnalyticsTags = val
	}
}

func WithSearchForFacetsPercentileComputation(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.PercentileComputation = &val
	}
}

func WithSearchForFacetsEnableABTest(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.EnableABTest = &val
	}
}

func WithSearchForFacetsAttributesForFaceting(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AttributesForFaceting = val
	}
}

func WithSearchForFacetsAttributesToRetrieve(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AttributesToRetrieve = val
	}
}

func WithSearchForFacetsRanking(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Ranking = val
	}
}

func WithSearchForFacetsCustomRanking(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.CustomRanking = val
	}
}

func WithSearchForFacetsRelevancyStrictness(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RelevancyStrictness = &val
	}
}

func WithSearchForFacetsAttributesToHighlight(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AttributesToHighlight = val
	}
}

func WithSearchForFacetsAttributesToSnippet(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AttributesToSnippet = val
	}
}

func WithSearchForFacetsHighlightPreTag(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.HighlightPreTag = &val
	}
}

func WithSearchForFacetsHighlightPostTag(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.HighlightPostTag = &val
	}
}

func WithSearchForFacetsSnippetEllipsisText(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.SnippetEllipsisText = &val
	}
}

func WithSearchForFacetsRestrictHighlightAndSnippetArrays(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithSearchForFacetsHitsPerPage(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.HitsPerPage = &val
	}
}

func WithSearchForFacetsMinWordSizefor1Typo(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithSearchForFacetsMinWordSizefor2Typos(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithSearchForFacetsTypoTolerance(val TypoTolerance) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.TypoTolerance = &val
	}
}

func WithSearchForFacetsAllowTyposOnNumericTokens(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithSearchForFacetsDisableTypoToleranceOnAttributes(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithSearchForFacetsIgnorePlurals(val IgnorePlurals) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.IgnorePlurals = &val
	}
}

func WithSearchForFacetsRemoveStopWords(val RemoveStopWords) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RemoveStopWords = &val
	}
}

func WithSearchForFacetsKeepDiacriticsOnCharacters(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithSearchForFacetsQueryLanguages(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.QueryLanguages = val
	}
}

func WithSearchForFacetsDecompoundQuery(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.DecompoundQuery = &val
	}
}

func WithSearchForFacetsEnableRules(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.EnableRules = &val
	}
}

func WithSearchForFacetsEnablePersonalization(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.EnablePersonalization = &val
	}
}

func WithSearchForFacetsQueryType(val QueryType) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.QueryType = &val
	}
}

func WithSearchForFacetsRemoveWordsIfNoResults(val RemoveWordsIfNoResults) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithSearchForFacetsMode(val Mode) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Mode = &val
	}
}

func WithSearchForFacetsSemanticSearch(val SemanticSearch) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.SemanticSearch = &val
	}
}

func WithSearchForFacetsAdvancedSyntax(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AdvancedSyntax = &val
	}
}

func WithSearchForFacetsOptionalWords(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.OptionalWords = val
	}
}

func WithSearchForFacetsDisableExactOnAttributes(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.DisableExactOnAttributes = val
	}
}

func WithSearchForFacetsExactOnSingleWordQuery(val ExactOnSingleWordQuery) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithSearchForFacetsAlternativesAsExact(val []AlternativesAsExact) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AlternativesAsExact = val
	}
}

func WithSearchForFacetsAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithSearchForFacetsDistinct(val Distinct) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.Distinct = &val
	}
}

func WithSearchForFacetsReplaceSynonymsInHighlight(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithSearchForFacetsMinProximity(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MinProximity = &val
	}
}

func WithSearchForFacetsResponseFields(val []string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.ResponseFields = val
	}
}

func WithSearchForFacetsMaxFacetHits(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MaxFacetHits = &val
	}
}

func WithSearchForFacetsMaxValuesPerFacet(val int32) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.MaxValuesPerFacet = &val
	}
}

func WithSearchForFacetsSortFacetValuesBy(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.SortFacetValuesBy = &val
	}
}

func WithSearchForFacetsAttributeCriteriaComputedByMinProximity(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithSearchForFacetsRenderingContent(val RenderingContent) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.RenderingContent = &val
	}
}

func WithSearchForFacetsEnableReRanking(val bool) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.EnableReRanking = &val
	}
}

func WithSearchForFacetsReRankingApplyFilter(val NullableReRankingApplyFilter) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.ReRankingApplyFilter = val
	}
}

func WithSearchForFacetsFacetQuery(val string) SearchForFacetsOption {
	return func(f *SearchForFacets) {
		f.FacetQuery = &val
	}
}

// NewSearchForFacets instantiates a new SearchForFacets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchForFacets(facet string, indexName string, type_ SearchTypeFacet, opts ...SearchForFacetsOption) *SearchForFacets {
	this := &SearchForFacets{}
	this.Facet = facet
	this.IndexName = indexName
	this.Type = type_
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSearchForFacetsWithDefaults instantiates a new SearchForFacets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchForFacetsWithDefaults() *SearchForFacets {
	this := &SearchForFacets{}
	var params string = ""
	this.Params = &params
	var query string = ""
	this.Query = &query
	var similarQuery string = ""
	this.SimilarQuery = &similarQuery
	var filters string = ""
	this.Filters = &filters
	var sumOrFiltersScores bool = false
	this.SumOrFiltersScores = &sumOrFiltersScores
	var facetingAfterDistinct bool = false
	this.FacetingAfterDistinct = &facetingAfterDistinct
	var page int32 = 0
	this.Page = &page
	var aroundLatLng string = ""
	this.AroundLatLng = &aroundLatLng
	var aroundLatLngViaIP bool = false
	this.AroundLatLngViaIP = &aroundLatLngViaIP
	var personalizationImpact int32 = 100
	this.PersonalizationImpact = &personalizationImpact
	var getRankingInfo bool = false
	this.GetRankingInfo = &getRankingInfo
	var synonyms bool = true
	this.Synonyms = &synonyms
	var clickAnalytics bool = false
	this.ClickAnalytics = &clickAnalytics
	var analytics bool = true
	this.Analytics = &analytics
	var percentileComputation bool = true
	this.PercentileComputation = &percentileComputation
	var enableABTest bool = true
	this.EnableABTest = &enableABTest
	var relevancyStrictness int32 = 100
	this.RelevancyStrictness = &relevancyStrictness
	var highlightPreTag string = "<em>"
	this.HighlightPreTag = &highlightPreTag
	var highlightPostTag string = "</em>"
	this.HighlightPostTag = &highlightPostTag
	var snippetEllipsisText string = "…"
	this.SnippetEllipsisText = &snippetEllipsisText
	var restrictHighlightAndSnippetArrays bool = false
	this.RestrictHighlightAndSnippetArrays = &restrictHighlightAndSnippetArrays
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	var minWordSizefor1Typo int32 = 4
	this.MinWordSizefor1Typo = &minWordSizefor1Typo
	var minWordSizefor2Typos int32 = 8
	this.MinWordSizefor2Typos = &minWordSizefor2Typos
	var allowTyposOnNumericTokens bool = true
	this.AllowTyposOnNumericTokens = &allowTyposOnNumericTokens
	var keepDiacriticsOnCharacters string = ""
	this.KeepDiacriticsOnCharacters = &keepDiacriticsOnCharacters
	var decompoundQuery bool = true
	this.DecompoundQuery = &decompoundQuery
	var enableRules bool = true
	this.EnableRules = &enableRules
	var enablePersonalization bool = false
	this.EnablePersonalization = &enablePersonalization
	var queryType QueryType = QUERYTYPE_PREFIX_LAST
	this.QueryType = &queryType
	var removeWordsIfNoResults RemoveWordsIfNoResults = REMOVEWORDSIFNORESULTS_NONE
	this.RemoveWordsIfNoResults = &removeWordsIfNoResults
	var mode Mode = MODE_KEYWORD_SEARCH
	this.Mode = &mode
	var advancedSyntax bool = false
	this.AdvancedSyntax = &advancedSyntax
	var exactOnSingleWordQuery ExactOnSingleWordQuery = EXACTONSINGLEWORDQUERY_ATTRIBUTE
	this.ExactOnSingleWordQuery = &exactOnSingleWordQuery
	var replaceSynonymsInHighlight bool = false
	this.ReplaceSynonymsInHighlight = &replaceSynonymsInHighlight
	var minProximity int32 = 1
	this.MinProximity = &minProximity
	var maxFacetHits int32 = 10
	this.MaxFacetHits = &maxFacetHits
	var maxValuesPerFacet int32 = 100
	this.MaxValuesPerFacet = &maxValuesPerFacet
	var sortFacetValuesBy string = "count"
	this.SortFacetValuesBy = &sortFacetValuesBy
	var attributeCriteriaComputedByMinProximity bool = false
	this.AttributeCriteriaComputedByMinProximity = &attributeCriteriaComputedByMinProximity
	var enableReRanking bool = true
	this.EnableReRanking = &enableReRanking
	var facetQuery string = ""
	this.FacetQuery = &facetQuery
	var type_ SearchTypeFacet = SEARCHTYPEFACET_FACET
	this.Type = type_
	return this
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *SearchForFacets) GetParams() string {
	if o == nil || o.Params == nil {
		var ret string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetParamsOk() (*string, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *SearchForFacets) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given string and assigns it to the Params field.
func (o *SearchForFacets) SetParams(v string) {
	o.Params = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchForFacets) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchForFacets) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchForFacets) SetQuery(v string) {
	o.Query = &v
}

// GetSimilarQuery returns the SimilarQuery field value if set, zero value otherwise.
func (o *SearchForFacets) GetSimilarQuery() string {
	if o == nil || o.SimilarQuery == nil {
		var ret string
		return ret
	}
	return *o.SimilarQuery
}

// GetSimilarQueryOk returns a tuple with the SimilarQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSimilarQueryOk() (*string, bool) {
	if o == nil || o.SimilarQuery == nil {
		return nil, false
	}
	return o.SimilarQuery, true
}

// HasSimilarQuery returns a boolean if a field has been set.
func (o *SearchForFacets) HasSimilarQuery() bool {
	if o != nil && o.SimilarQuery != nil {
		return true
	}

	return false
}

// SetSimilarQuery gets a reference to the given string and assigns it to the SimilarQuery field.
func (o *SearchForFacets) SetSimilarQuery(v string) {
	o.SimilarQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SearchForFacets) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SearchForFacets) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *SearchForFacets) SetFilters(v string) {
	o.Filters = &v
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *SearchForFacets) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *SearchForFacets) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *SearchForFacets) SetFacetFilters(v FacetFilters) {
	o.FacetFilters = &v
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *SearchForFacets) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *SearchForFacets) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *SearchForFacets) SetOptionalFilters(v OptionalFilters) {
	o.OptionalFilters = &v
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *SearchForFacets) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *SearchForFacets) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *SearchForFacets) SetNumericFilters(v NumericFilters) {
	o.NumericFilters = &v
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *SearchForFacets) GetTagFilters() TagFilters {
	if o == nil || o.TagFilters == nil {
		var ret TagFilters
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetTagFiltersOk() (*TagFilters, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *SearchForFacets) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given TagFilters and assigns it to the TagFilters field.
func (o *SearchForFacets) SetTagFilters(v TagFilters) {
	o.TagFilters = &v
}

// GetSumOrFiltersScores returns the SumOrFiltersScores field value if set, zero value otherwise.
func (o *SearchForFacets) GetSumOrFiltersScores() bool {
	if o == nil || o.SumOrFiltersScores == nil {
		var ret bool
		return ret
	}
	return *o.SumOrFiltersScores
}

// GetSumOrFiltersScoresOk returns a tuple with the SumOrFiltersScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSumOrFiltersScoresOk() (*bool, bool) {
	if o == nil || o.SumOrFiltersScores == nil {
		return nil, false
	}
	return o.SumOrFiltersScores, true
}

// HasSumOrFiltersScores returns a boolean if a field has been set.
func (o *SearchForFacets) HasSumOrFiltersScores() bool {
	if o != nil && o.SumOrFiltersScores != nil {
		return true
	}

	return false
}

// SetSumOrFiltersScores gets a reference to the given bool and assigns it to the SumOrFiltersScores field.
func (o *SearchForFacets) SetSumOrFiltersScores(v bool) {
	o.SumOrFiltersScores = &v
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *SearchForFacets) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *SearchForFacets) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *SearchForFacets) SetRestrictSearchableAttributes(v []string) {
	o.RestrictSearchableAttributes = v
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *SearchForFacets) GetFacets() []string {
	if o == nil || o.Facets == nil {
		var ret []string
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFacetsOk() ([]string, bool) {
	if o == nil || o.Facets == nil {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *SearchForFacets) HasFacets() bool {
	if o != nil && o.Facets != nil {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []string and assigns it to the Facets field.
func (o *SearchForFacets) SetFacets(v []string) {
	o.Facets = v
}

// GetFacetingAfterDistinct returns the FacetingAfterDistinct field value if set, zero value otherwise.
func (o *SearchForFacets) GetFacetingAfterDistinct() bool {
	if o == nil || o.FacetingAfterDistinct == nil {
		var ret bool
		return ret
	}
	return *o.FacetingAfterDistinct
}

// GetFacetingAfterDistinctOk returns a tuple with the FacetingAfterDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFacetingAfterDistinctOk() (*bool, bool) {
	if o == nil || o.FacetingAfterDistinct == nil {
		return nil, false
	}
	return o.FacetingAfterDistinct, true
}

// HasFacetingAfterDistinct returns a boolean if a field has been set.
func (o *SearchForFacets) HasFacetingAfterDistinct() bool {
	if o != nil && o.FacetingAfterDistinct != nil {
		return true
	}

	return false
}

// SetFacetingAfterDistinct gets a reference to the given bool and assigns it to the FacetingAfterDistinct field.
func (o *SearchForFacets) SetFacetingAfterDistinct(v bool) {
	o.FacetingAfterDistinct = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchForFacets) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchForFacets) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchForFacets) SetPage(v int32) {
	o.Page = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchForFacets) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchForFacets) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchForFacets) SetOffset(v int32) {
	o.Offset = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *SearchForFacets) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *SearchForFacets) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *SearchForFacets) SetLength(v int32) {
	o.Length = &v
}

// GetAroundLatLng returns the AroundLatLng field value if set, zero value otherwise.
func (o *SearchForFacets) GetAroundLatLng() string {
	if o == nil || o.AroundLatLng == nil {
		var ret string
		return ret
	}
	return *o.AroundLatLng
}

// GetAroundLatLngOk returns a tuple with the AroundLatLng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAroundLatLngOk() (*string, bool) {
	if o == nil || o.AroundLatLng == nil {
		return nil, false
	}
	return o.AroundLatLng, true
}

// HasAroundLatLng returns a boolean if a field has been set.
func (o *SearchForFacets) HasAroundLatLng() bool {
	if o != nil && o.AroundLatLng != nil {
		return true
	}

	return false
}

// SetAroundLatLng gets a reference to the given string and assigns it to the AroundLatLng field.
func (o *SearchForFacets) SetAroundLatLng(v string) {
	o.AroundLatLng = &v
}

// GetAroundLatLngViaIP returns the AroundLatLngViaIP field value if set, zero value otherwise.
func (o *SearchForFacets) GetAroundLatLngViaIP() bool {
	if o == nil || o.AroundLatLngViaIP == nil {
		var ret bool
		return ret
	}
	return *o.AroundLatLngViaIP
}

// GetAroundLatLngViaIPOk returns a tuple with the AroundLatLngViaIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAroundLatLngViaIPOk() (*bool, bool) {
	if o == nil || o.AroundLatLngViaIP == nil {
		return nil, false
	}
	return o.AroundLatLngViaIP, true
}

// HasAroundLatLngViaIP returns a boolean if a field has been set.
func (o *SearchForFacets) HasAroundLatLngViaIP() bool {
	if o != nil && o.AroundLatLngViaIP != nil {
		return true
	}

	return false
}

// SetAroundLatLngViaIP gets a reference to the given bool and assigns it to the AroundLatLngViaIP field.
func (o *SearchForFacets) SetAroundLatLngViaIP(v bool) {
	o.AroundLatLngViaIP = &v
}

// GetAroundRadius returns the AroundRadius field value if set, zero value otherwise.
func (o *SearchForFacets) GetAroundRadius() AroundRadius {
	if o == nil || o.AroundRadius == nil {
		var ret AroundRadius
		return ret
	}
	return *o.AroundRadius
}

// GetAroundRadiusOk returns a tuple with the AroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAroundRadiusOk() (*AroundRadius, bool) {
	if o == nil || o.AroundRadius == nil {
		return nil, false
	}
	return o.AroundRadius, true
}

// HasAroundRadius returns a boolean if a field has been set.
func (o *SearchForFacets) HasAroundRadius() bool {
	if o != nil && o.AroundRadius != nil {
		return true
	}

	return false
}

// SetAroundRadius gets a reference to the given AroundRadius and assigns it to the AroundRadius field.
func (o *SearchForFacets) SetAroundRadius(v AroundRadius) {
	o.AroundRadius = &v
}

// GetAroundPrecision returns the AroundPrecision field value if set, zero value otherwise.
func (o *SearchForFacets) GetAroundPrecision() AroundPrecision {
	if o == nil || o.AroundPrecision == nil {
		var ret AroundPrecision
		return ret
	}
	return *o.AroundPrecision
}

// GetAroundPrecisionOk returns a tuple with the AroundPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAroundPrecisionOk() (*AroundPrecision, bool) {
	if o == nil || o.AroundPrecision == nil {
		return nil, false
	}
	return o.AroundPrecision, true
}

// HasAroundPrecision returns a boolean if a field has been set.
func (o *SearchForFacets) HasAroundPrecision() bool {
	if o != nil && o.AroundPrecision != nil {
		return true
	}

	return false
}

// SetAroundPrecision gets a reference to the given AroundPrecision and assigns it to the AroundPrecision field.
func (o *SearchForFacets) SetAroundPrecision(v AroundPrecision) {
	o.AroundPrecision = &v
}

// GetMinimumAroundRadius returns the MinimumAroundRadius field value if set, zero value otherwise.
func (o *SearchForFacets) GetMinimumAroundRadius() int32 {
	if o == nil || o.MinimumAroundRadius == nil {
		var ret int32
		return ret
	}
	return *o.MinimumAroundRadius
}

// GetMinimumAroundRadiusOk returns a tuple with the MinimumAroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMinimumAroundRadiusOk() (*int32, bool) {
	if o == nil || o.MinimumAroundRadius == nil {
		return nil, false
	}
	return o.MinimumAroundRadius, true
}

// HasMinimumAroundRadius returns a boolean if a field has been set.
func (o *SearchForFacets) HasMinimumAroundRadius() bool {
	if o != nil && o.MinimumAroundRadius != nil {
		return true
	}

	return false
}

// SetMinimumAroundRadius gets a reference to the given int32 and assigns it to the MinimumAroundRadius field.
func (o *SearchForFacets) SetMinimumAroundRadius(v int32) {
	o.MinimumAroundRadius = &v
}

// GetInsideBoundingBox returns the InsideBoundingBox field value if set, zero value otherwise.
func (o *SearchForFacets) GetInsideBoundingBox() [][]float64 {
	if o == nil || o.InsideBoundingBox == nil {
		var ret [][]float64
		return ret
	}
	return o.InsideBoundingBox
}

// GetInsideBoundingBoxOk returns a tuple with the InsideBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetInsideBoundingBoxOk() ([][]float64, bool) {
	if o == nil || o.InsideBoundingBox == nil {
		return nil, false
	}
	return o.InsideBoundingBox, true
}

// HasInsideBoundingBox returns a boolean if a field has been set.
func (o *SearchForFacets) HasInsideBoundingBox() bool {
	if o != nil && o.InsideBoundingBox != nil {
		return true
	}

	return false
}

// SetInsideBoundingBox gets a reference to the given [][]float64 and assigns it to the InsideBoundingBox field.
func (o *SearchForFacets) SetInsideBoundingBox(v [][]float64) {
	o.InsideBoundingBox = v
}

// GetInsidePolygon returns the InsidePolygon field value if set, zero value otherwise.
func (o *SearchForFacets) GetInsidePolygon() [][]float64 {
	if o == nil || o.InsidePolygon == nil {
		var ret [][]float64
		return ret
	}
	return o.InsidePolygon
}

// GetInsidePolygonOk returns a tuple with the InsidePolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetInsidePolygonOk() ([][]float64, bool) {
	if o == nil || o.InsidePolygon == nil {
		return nil, false
	}
	return o.InsidePolygon, true
}

// HasInsidePolygon returns a boolean if a field has been set.
func (o *SearchForFacets) HasInsidePolygon() bool {
	if o != nil && o.InsidePolygon != nil {
		return true
	}

	return false
}

// SetInsidePolygon gets a reference to the given [][]float64 and assigns it to the InsidePolygon field.
func (o *SearchForFacets) SetInsidePolygon(v [][]float64) {
	o.InsidePolygon = v
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *SearchForFacets) GetNaturalLanguages() []string {
	if o == nil || o.NaturalLanguages == nil {
		var ret []string
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetNaturalLanguagesOk() ([]string, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *SearchForFacets) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []string and assigns it to the NaturalLanguages field.
func (o *SearchForFacets) SetNaturalLanguages(v []string) {
	o.NaturalLanguages = v
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *SearchForFacets) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *SearchForFacets) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *SearchForFacets) SetRuleContexts(v []string) {
	o.RuleContexts = v
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *SearchForFacets) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *SearchForFacets) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *SearchForFacets) SetPersonalizationImpact(v int32) {
	o.PersonalizationImpact = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *SearchForFacets) GetUserToken() string {
	if o == nil || o.UserToken == nil {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetUserTokenOk() (*string, bool) {
	if o == nil || o.UserToken == nil {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *SearchForFacets) HasUserToken() bool {
	if o != nil && o.UserToken != nil {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *SearchForFacets) SetUserToken(v string) {
	o.UserToken = &v
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *SearchForFacets) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *SearchForFacets) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *SearchForFacets) SetGetRankingInfo(v bool) {
	o.GetRankingInfo = &v
}

// GetExplain returns the Explain field value if set, zero value otherwise.
func (o *SearchForFacets) GetExplain() []string {
	if o == nil || o.Explain == nil {
		var ret []string
		return ret
	}
	return o.Explain
}

// GetExplainOk returns a tuple with the Explain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetExplainOk() ([]string, bool) {
	if o == nil || o.Explain == nil {
		return nil, false
	}
	return o.Explain, true
}

// HasExplain returns a boolean if a field has been set.
func (o *SearchForFacets) HasExplain() bool {
	if o != nil && o.Explain != nil {
		return true
	}

	return false
}

// SetExplain gets a reference to the given []string and assigns it to the Explain field.
func (o *SearchForFacets) SetExplain(v []string) {
	o.Explain = v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *SearchForFacets) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *SearchForFacets) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *SearchForFacets) SetSynonyms(v bool) {
	o.Synonyms = &v
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *SearchForFacets) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *SearchForFacets) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *SearchForFacets) SetClickAnalytics(v bool) {
	o.ClickAnalytics = &v
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *SearchForFacets) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *SearchForFacets) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *SearchForFacets) SetAnalytics(v bool) {
	o.Analytics = &v
}

// GetAnalyticsTags returns the AnalyticsTags field value if set, zero value otherwise.
func (o *SearchForFacets) GetAnalyticsTags() []string {
	if o == nil || o.AnalyticsTags == nil {
		var ret []string
		return ret
	}
	return o.AnalyticsTags
}

// GetAnalyticsTagsOk returns a tuple with the AnalyticsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAnalyticsTagsOk() ([]string, bool) {
	if o == nil || o.AnalyticsTags == nil {
		return nil, false
	}
	return o.AnalyticsTags, true
}

// HasAnalyticsTags returns a boolean if a field has been set.
func (o *SearchForFacets) HasAnalyticsTags() bool {
	if o != nil && o.AnalyticsTags != nil {
		return true
	}

	return false
}

// SetAnalyticsTags gets a reference to the given []string and assigns it to the AnalyticsTags field.
func (o *SearchForFacets) SetAnalyticsTags(v []string) {
	o.AnalyticsTags = v
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *SearchForFacets) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *SearchForFacets) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *SearchForFacets) SetPercentileComputation(v bool) {
	o.PercentileComputation = &v
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *SearchForFacets) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *SearchForFacets) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *SearchForFacets) SetEnableABTest(v bool) {
	o.EnableABTest = &v
}

// GetAttributesForFaceting returns the AttributesForFaceting field value if set, zero value otherwise.
func (o *SearchForFacets) GetAttributesForFaceting() []string {
	if o == nil || o.AttributesForFaceting == nil {
		var ret []string
		return ret
	}
	return o.AttributesForFaceting
}

// GetAttributesForFacetingOk returns a tuple with the AttributesForFaceting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAttributesForFacetingOk() ([]string, bool) {
	if o == nil || o.AttributesForFaceting == nil {
		return nil, false
	}
	return o.AttributesForFaceting, true
}

// HasAttributesForFaceting returns a boolean if a field has been set.
func (o *SearchForFacets) HasAttributesForFaceting() bool {
	if o != nil && o.AttributesForFaceting != nil {
		return true
	}

	return false
}

// SetAttributesForFaceting gets a reference to the given []string and assigns it to the AttributesForFaceting field.
func (o *SearchForFacets) SetAttributesForFaceting(v []string) {
	o.AttributesForFaceting = v
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *SearchForFacets) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *SearchForFacets) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *SearchForFacets) SetAttributesToRetrieve(v []string) {
	o.AttributesToRetrieve = v
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *SearchForFacets) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *SearchForFacets) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *SearchForFacets) SetRanking(v []string) {
	o.Ranking = v
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *SearchForFacets) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *SearchForFacets) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *SearchForFacets) SetCustomRanking(v []string) {
	o.CustomRanking = v
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *SearchForFacets) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *SearchForFacets) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *SearchForFacets) SetRelevancyStrictness(v int32) {
	o.RelevancyStrictness = &v
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *SearchForFacets) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *SearchForFacets) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *SearchForFacets) SetAttributesToHighlight(v []string) {
	o.AttributesToHighlight = v
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *SearchForFacets) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *SearchForFacets) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *SearchForFacets) SetAttributesToSnippet(v []string) {
	o.AttributesToSnippet = v
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *SearchForFacets) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *SearchForFacets) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *SearchForFacets) SetHighlightPreTag(v string) {
	o.HighlightPreTag = &v
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *SearchForFacets) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *SearchForFacets) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *SearchForFacets) SetHighlightPostTag(v string) {
	o.HighlightPostTag = &v
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *SearchForFacets) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *SearchForFacets) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *SearchForFacets) SetSnippetEllipsisText(v string) {
	o.SnippetEllipsisText = &v
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *SearchForFacets) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *SearchForFacets) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *SearchForFacets) SetRestrictHighlightAndSnippetArrays(v bool) {
	o.RestrictHighlightAndSnippetArrays = &v
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *SearchForFacets) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *SearchForFacets) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *SearchForFacets) SetHitsPerPage(v int32) {
	o.HitsPerPage = &v
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *SearchForFacets) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *SearchForFacets) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *SearchForFacets) SetMinWordSizefor1Typo(v int32) {
	o.MinWordSizefor1Typo = &v
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *SearchForFacets) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *SearchForFacets) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *SearchForFacets) SetMinWordSizefor2Typos(v int32) {
	o.MinWordSizefor2Typos = &v
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *SearchForFacets) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *SearchForFacets) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *SearchForFacets) SetTypoTolerance(v TypoTolerance) {
	o.TypoTolerance = &v
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *SearchForFacets) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *SearchForFacets) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *SearchForFacets) SetAllowTyposOnNumericTokens(v bool) {
	o.AllowTyposOnNumericTokens = &v
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *SearchForFacets) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *SearchForFacets) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *SearchForFacets) SetDisableTypoToleranceOnAttributes(v []string) {
	o.DisableTypoToleranceOnAttributes = v
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *SearchForFacets) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *SearchForFacets) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *SearchForFacets) SetIgnorePlurals(v IgnorePlurals) {
	o.IgnorePlurals = &v
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *SearchForFacets) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *SearchForFacets) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *SearchForFacets) SetRemoveStopWords(v RemoveStopWords) {
	o.RemoveStopWords = &v
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *SearchForFacets) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *SearchForFacets) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *SearchForFacets) SetKeepDiacriticsOnCharacters(v string) {
	o.KeepDiacriticsOnCharacters = &v
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *SearchForFacets) GetQueryLanguages() []string {
	if o == nil || o.QueryLanguages == nil {
		var ret []string
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetQueryLanguagesOk() ([]string, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *SearchForFacets) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []string and assigns it to the QueryLanguages field.
func (o *SearchForFacets) SetQueryLanguages(v []string) {
	o.QueryLanguages = v
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *SearchForFacets) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *SearchForFacets) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *SearchForFacets) SetDecompoundQuery(v bool) {
	o.DecompoundQuery = &v
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *SearchForFacets) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *SearchForFacets) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *SearchForFacets) SetEnableRules(v bool) {
	o.EnableRules = &v
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *SearchForFacets) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *SearchForFacets) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *SearchForFacets) SetEnablePersonalization(v bool) {
	o.EnablePersonalization = &v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *SearchForFacets) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *SearchForFacets) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *SearchForFacets) SetQueryType(v QueryType) {
	o.QueryType = &v
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *SearchForFacets) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *SearchForFacets) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *SearchForFacets) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) {
	o.RemoveWordsIfNoResults = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SearchForFacets) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SearchForFacets) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *SearchForFacets) SetMode(v Mode) {
	o.Mode = &v
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *SearchForFacets) GetSemanticSearch() SemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret SemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSemanticSearchOk() (*SemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *SearchForFacets) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given SemanticSearch and assigns it to the SemanticSearch field.
func (o *SearchForFacets) SetSemanticSearch(v SemanticSearch) {
	o.SemanticSearch = &v
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *SearchForFacets) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *SearchForFacets) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *SearchForFacets) SetAdvancedSyntax(v bool) {
	o.AdvancedSyntax = &v
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *SearchForFacets) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *SearchForFacets) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *SearchForFacets) SetOptionalWords(v []string) {
	o.OptionalWords = v
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *SearchForFacets) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *SearchForFacets) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *SearchForFacets) SetDisableExactOnAttributes(v []string) {
	o.DisableExactOnAttributes = v
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *SearchForFacets) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *SearchForFacets) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *SearchForFacets) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) {
	o.ExactOnSingleWordQuery = &v
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *SearchForFacets) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *SearchForFacets) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *SearchForFacets) SetAlternativesAsExact(v []AlternativesAsExact) {
	o.AlternativesAsExact = v
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *SearchForFacets) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *SearchForFacets) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *SearchForFacets) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) {
	o.AdvancedSyntaxFeatures = v
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *SearchForFacets) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *SearchForFacets) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *SearchForFacets) SetDistinct(v Distinct) {
	o.Distinct = &v
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *SearchForFacets) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *SearchForFacets) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *SearchForFacets) SetReplaceSynonymsInHighlight(v bool) {
	o.ReplaceSynonymsInHighlight = &v
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *SearchForFacets) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *SearchForFacets) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *SearchForFacets) SetMinProximity(v int32) {
	o.MinProximity = &v
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *SearchForFacets) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *SearchForFacets) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *SearchForFacets) SetResponseFields(v []string) {
	o.ResponseFields = v
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *SearchForFacets) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *SearchForFacets) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *SearchForFacets) SetMaxFacetHits(v int32) {
	o.MaxFacetHits = &v
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *SearchForFacets) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *SearchForFacets) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *SearchForFacets) SetMaxValuesPerFacet(v int32) {
	o.MaxValuesPerFacet = &v
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *SearchForFacets) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *SearchForFacets) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *SearchForFacets) SetSortFacetValuesBy(v string) {
	o.SortFacetValuesBy = &v
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *SearchForFacets) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *SearchForFacets) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *SearchForFacets) SetAttributeCriteriaComputedByMinProximity(v bool) {
	o.AttributeCriteriaComputedByMinProximity = &v
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *SearchForFacets) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *SearchForFacets) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *SearchForFacets) SetRenderingContent(v RenderingContent) {
	o.RenderingContent = &v
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *SearchForFacets) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *SearchForFacets) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *SearchForFacets) SetEnableReRanking(v bool) {
	o.EnableReRanking = &v
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchForFacets) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter.Get() == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter.Get()
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchForFacets) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter.Get(), o.ReRankingApplyFilter.IsSet()
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *SearchForFacets) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter.IsSet() {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given NullableReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *SearchForFacets) SetReRankingApplyFilter(v ReRankingApplyFilter) {
	o.ReRankingApplyFilter.Set(&v)
}

// SetReRankingApplyFilterNil sets the value for ReRankingApplyFilter to be an explicit nil
func (o *SearchForFacets) SetReRankingApplyFilterNil() {
	o.ReRankingApplyFilter.Set(nil)
}

// UnsetReRankingApplyFilter ensures that no value is present for ReRankingApplyFilter, not even an explicit nil
func (o *SearchForFacets) UnsetReRankingApplyFilter() {
	o.ReRankingApplyFilter.Unset()
}

// GetFacet returns the Facet field value
func (o *SearchForFacets) GetFacet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Facet
}

// GetFacetOk returns a tuple with the Facet field value
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFacetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Facet, true
}

// SetFacet sets field value
func (o *SearchForFacets) SetFacet(v string) {
	o.Facet = v
}

// GetIndexName returns the IndexName field value
func (o *SearchForFacets) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *SearchForFacets) SetIndexName(v string) {
	o.IndexName = v
}

// GetFacetQuery returns the FacetQuery field value if set, zero value otherwise.
func (o *SearchForFacets) GetFacetQuery() string {
	if o == nil || o.FacetQuery == nil {
		var ret string
		return ret
	}
	return *o.FacetQuery
}

// GetFacetQueryOk returns a tuple with the FacetQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetFacetQueryOk() (*string, bool) {
	if o == nil || o.FacetQuery == nil {
		return nil, false
	}
	return o.FacetQuery, true
}

// HasFacetQuery returns a boolean if a field has been set.
func (o *SearchForFacets) HasFacetQuery() bool {
	if o != nil && o.FacetQuery != nil {
		return true
	}

	return false
}

// SetFacetQuery gets a reference to the given string and assigns it to the FacetQuery field.
func (o *SearchForFacets) SetFacetQuery(v string) {
	o.FacetQuery = &v
}

// GetType returns the Type field value
func (o *SearchForFacets) GetType() SearchTypeFacet {
	if o == nil {
		var ret SearchTypeFacet
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SearchForFacets) GetTypeOk() (*SearchTypeFacet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SearchForFacets) SetType(v SearchTypeFacet) {
	o.Type = v
}

func (o SearchForFacets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.SimilarQuery != nil {
		toSerialize["similarQuery"] = o.SimilarQuery
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.TagFilters != nil {
		toSerialize["tagFilters"] = o.TagFilters
	}
	if o.SumOrFiltersScores != nil {
		toSerialize["sumOrFiltersScores"] = o.SumOrFiltersScores
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.Facets != nil {
		toSerialize["facets"] = o.Facets
	}
	if o.FacetingAfterDistinct != nil {
		toSerialize["facetingAfterDistinct"] = o.FacetingAfterDistinct
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.AroundLatLng != nil {
		toSerialize["aroundLatLng"] = o.AroundLatLng
	}
	if o.AroundLatLngViaIP != nil {
		toSerialize["aroundLatLngViaIP"] = o.AroundLatLngViaIP
	}
	if o.AroundRadius != nil {
		toSerialize["aroundRadius"] = o.AroundRadius
	}
	if o.AroundPrecision != nil {
		toSerialize["aroundPrecision"] = o.AroundPrecision
	}
	if o.MinimumAroundRadius != nil {
		toSerialize["minimumAroundRadius"] = o.MinimumAroundRadius
	}
	if o.InsideBoundingBox != nil {
		toSerialize["insideBoundingBox"] = o.InsideBoundingBox
	}
	if o.InsidePolygon != nil {
		toSerialize["insidePolygon"] = o.InsidePolygon
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if o.UserToken != nil {
		toSerialize["userToken"] = o.UserToken
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.Explain != nil {
		toSerialize["explain"] = o.Explain
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AnalyticsTags != nil {
		toSerialize["analyticsTags"] = o.AnalyticsTags
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	if o.AttributesForFaceting != nil {
		toSerialize["attributesForFaceting"] = o.AttributesForFaceting
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter.IsSet() {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter.Get()
	}
	if true {
		toSerialize["facet"] = o.Facet
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.FacetQuery != nil {
		toSerialize["facetQuery"] = o.FacetQuery
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

func (o SearchForFacets) String() string {
	out := ""
	out += fmt.Sprintf("  params=%v\n", o.Params)
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  similarQuery=%v\n", o.SimilarQuery)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  tagFilters=%v\n", o.TagFilters)
	out += fmt.Sprintf("  sumOrFiltersScores=%v\n", o.SumOrFiltersScores)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  facets=%v\n", o.Facets)
	out += fmt.Sprintf("  facetingAfterDistinct=%v\n", o.FacetingAfterDistinct)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  offset=%v\n", o.Offset)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  aroundLatLng=%v\n", o.AroundLatLng)
	out += fmt.Sprintf("  aroundLatLngViaIP=%v\n", o.AroundLatLngViaIP)
	out += fmt.Sprintf("  aroundRadius=%v\n", o.AroundRadius)
	out += fmt.Sprintf("  aroundPrecision=%v\n", o.AroundPrecision)
	out += fmt.Sprintf("  minimumAroundRadius=%v\n", o.MinimumAroundRadius)
	out += fmt.Sprintf("  insideBoundingBox=%v\n", o.InsideBoundingBox)
	out += fmt.Sprintf("  insidePolygon=%v\n", o.InsidePolygon)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  explain=%v\n", o.Explain)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  analyticsTags=%v\n", o.AnalyticsTags)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	out += fmt.Sprintf("  attributesForFaceting=%v\n", o.AttributesForFaceting)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	out += fmt.Sprintf("  facet=%v\n", o.Facet)
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  facetQuery=%v\n", o.FacetQuery)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	return fmt.Sprintf("SearchForFacets {\n%s}", out)
}

type NullableSearchForFacets struct {
	value *SearchForFacets
	isSet bool
}

func (v NullableSearchForFacets) Get() *SearchForFacets {
	return v.value
}

func (v *NullableSearchForFacets) Set(val *SearchForFacets) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchForFacets) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchForFacets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchForFacets(val *SearchForFacets) *NullableSearchForFacets {
	return &NullableSearchForFacets{value: val, isSet: true}
}

func (v NullableSearchForFacets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchForFacets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
