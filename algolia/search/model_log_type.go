// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// LogType the model 'LogType'.
type LogType string

// List of logType.
const (
	LOG_TYPE_ALL   LogType = "all"
	LOG_TYPE_QUERY LogType = "query"
	LOG_TYPE_BUILD LogType = "build"
	LOG_TYPE_ERROR LogType = "error"
)

// All allowed values of LogType enum.
var AllowedLogTypeEnumValues = []LogType{
	"all",
	"query",
	"build",
	"error",
}

func (v *LogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'LogType': %w", string(src), err)
	}
	enumTypeValue := LogType(value)
	for _, existing := range AllowedLogTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogType", value)
}

// NewLogTypeFromValue returns a pointer to a valid LogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewLogTypeFromValue(v string) (*LogType, error) {
	ev := LogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogType: valid values are %v", v, AllowedLogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v LogType) IsValid() bool {
	for _, existing := range AllowedLogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to logType value.
func (v LogType) Ptr() *LogType {
	return &v
}
