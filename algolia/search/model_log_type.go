// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// LogType the model 'LogType'
type LogType string

// List of logType
const (
	LOGTYPE_ALL   LogType = "all"
	LOGTYPE_QUERY LogType = "query"
	LOGTYPE_BUILD LogType = "build"
	LOGTYPE_ERROR LogType = "error"
)

// All allowed values of LogType enum
var AllowedLogTypeEnumValues = []LogType{
	"all",
	"query",
	"build",
	"error",
}

func (v *LogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogType(value)
	for _, existing := range AllowedLogTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogType", value)
}

// NewLogTypeFromValue returns a pointer to a valid LogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogTypeFromValue(v string) (*LogType, error) {
	ev := LogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogType: valid values are %v", v, AllowedLogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogType) IsValid() bool {
	for _, existing := range AllowedLogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to logType value
func (v LogType) Ptr() *LogType {
	return &v
}

type NullableLogType struct {
	value *LogType
	isSet bool
}

func (v NullableLogType) Get() *LogType {
	return v.value
}

func (v *NullableLogType) Set(val *LogType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogType(val *LogType) *NullableLogType {
	return &NullableLogType{value: val, isSet: true}
}

func (v NullableLogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
