// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// IndexSettings Algolia index settings.
type IndexSettings struct {
	// Creates [replicas](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/), which are copies of a primary index with the same records but different settings.
	Replicas []string `json:"replicas,omitempty"`
	// Maximum number of hits accessible through pagination.
	PaginationLimitedTo *int32 `json:"paginationLimitedTo,omitempty"`
	// Attributes that can't be retrieved at query time.
	UnretrievableAttributes []string `json:"unretrievableAttributes,omitempty"`
	// Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
	DisableTypoToleranceOnWords []string `json:"disableTypoToleranceOnWords,omitempty"`
	// Attributes in your index to which [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead) applies. This will ensure that words indexed in Katakana or Kanji can also be searched in Hiragana.
	AttributesToTransliterate []string `json:"attributesToTransliterate,omitempty"`
	// Attributes on which to split [camel case](https://wikipedia.org/wiki/Camel_case) words.
	CamelCaseAttributes []string `json:"camelCaseAttributes,omitempty"`
	// Attributes in your index to which [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding) applies.
	DecompoundedAttributes map[string]interface{} `json:"decompoundedAttributes,omitempty"`
	// Set the languages of your index, for language-specific processing steps such as [tokenization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/tokenization/) and [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
	IndexLanguages []string `json:"indexLanguages,omitempty"`
	// Attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).
	DisablePrefixOnAttributes []string `json:"disablePrefixOnAttributes,omitempty"`
	// Incidates whether the engine compresses arrays with exclusively non-negative integers. When enabled, the compressed arrays may be reordered.
	AllowCompressionOfIntegerArray *bool `json:"allowCompressionOfIntegerArray,omitempty"`
	// Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).
	NumericAttributesForFiltering []string `json:"numericAttributesForFiltering,omitempty"`
	// Controls which separators are added to an Algolia index as part of [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean). Separators are all non-letter characters except spaces and currency characters, such as $€£¥.
	SeparatorsToIndex *string `json:"separatorsToIndex,omitempty"`
	// [Attributes used for searching](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/), including determining [if matches at the beginning of a word are important (ordered) or not (unordered)](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/how-to/configuring-searchable-attributes-the-right-way/#understanding-word-position).
	SearchableAttributes []string `json:"searchableAttributes,omitempty"`
	// Lets you store custom data in your indices.
	UserData interface{} `json:"userData,omitempty"`
	// A list of characters and their normalized replacements to override Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
	CustomNormalization *map[string]map[string]string `json:"customNormalization,omitempty"`
	// Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/) and the [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) that can be applied: `filterOnly`, `searchable`, and `afterDistinct`.
	AttributesForFaceting []string `json:"attributesForFaceting,omitempty"`
	// Attributes to include in the API response. To reduce the size of your response, you can retrieve only some of the attributes. By default, the response includes all attributes.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Determines the order in which Algolia [returns your results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).
	Ranking []string `json:"ranking,omitempty"`
	// Specifies the [Custom ranking criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Use the `asc` and `desc` modifiers to specify the ranking order: ascending or descending.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Relevancy threshold below which less relevant results aren't included in the results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// Attributes to highlight. Strings that match the search query in the attributes are highlighted by surrounding them with HTML tags (`highlightPreTag` and `highlightPostTag`).
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// Attributes to _snippet_. 'Snippeting' is shortening the attribute to a certain number of words. If not specified, the attribute is shortened to the 10 words around the matching string but you can specify the number. For example: `body:20`.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// HTML string to insert before the highlighted parts in all highlight and snippet results.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// HTML string to insert after the highlighted parts in all highlight and snippet results.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Restrict highlighting and snippeting to items that matched the query.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers (\"numeric tokens\") in the query string.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// Characters that the engine shouldn't automatically [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Sets your user's search language. This adjusts language-specific settings and features such as `ignorePlurals`, `removeStopWords`, and [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) word detection.
	QueryLanguages []string `json:"queryLanguages,omitempty"`
	// [Splits compound words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words) into their component word parts in the query.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Incidates whether [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/) are enabled.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Incidates whether [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/) is enabled.
	EnablePersonalization  *bool                   `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType              `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                   `json:"mode,omitempty"`
	SemanticSearch         *SemanticSearch         `json:"semanticSearch,omitempty"`
	// Enables the [advanced query syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax).
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// Words which should be considered [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words) when found in a query.
	OptionalWords []string `json:"optionalWords,omitempty"`
	// Attributes for which you want to [turn off the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// Alternatives that should be considered an exact match by [the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Allows you to specify which advanced syntax features are active when `advancedSyntax` is enabled.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	Distinct               *Distinct                `json:"distinct,omitempty"`
	// Name of the deduplication attribute to be used with Algolia's [_distinct_ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).
	AttributeForDistinct *string `json:"attributeForDistinct,omitempty"`
	// Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Precision of the [proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity).
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Attributes to include in the API response for search and browse queries.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// Maximum number of facet values to return for each facet.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Controls how facet values are fetched.
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// When the [Attribute criterion is ranked above Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations) in your ranking formula, Proximity is used to select which searchable attribute is matched in the Attribute ranking stage.
	AttributeCriteriaComputedByMinProximity *bool             `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent `json:"renderingContent,omitempty"`
	// Indicates whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
	EnableReRanking      *bool                        `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter NullableReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
}

type IndexSettingsOption func(f *IndexSettings)

func WithIndexSettingsReplicas(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Replicas = val
	}
}

func WithIndexSettingsPaginationLimitedTo(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.PaginationLimitedTo = &val
	}
}

func WithIndexSettingsUnretrievableAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.UnretrievableAttributes = val
	}
}

func WithIndexSettingsDisableTypoToleranceOnWords(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableTypoToleranceOnWords = val
	}
}

func WithIndexSettingsAttributesToTransliterate(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToTransliterate = val
	}
}

func WithIndexSettingsCamelCaseAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CamelCaseAttributes = val
	}
}

func WithIndexSettingsDecompoundedAttributes(val map[string]interface{}) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DecompoundedAttributes = val
	}
}

func WithIndexSettingsIndexLanguages(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.IndexLanguages = val
	}
}

func WithIndexSettingsDisablePrefixOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisablePrefixOnAttributes = val
	}
}

func WithIndexSettingsAllowCompressionOfIntegerArray(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AllowCompressionOfIntegerArray = &val
	}
}

func WithIndexSettingsNumericAttributesForFiltering(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.NumericAttributesForFiltering = val
	}
}

func WithIndexSettingsSeparatorsToIndex(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SeparatorsToIndex = &val
	}
}

func WithIndexSettingsSearchableAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SearchableAttributes = val
	}
}

func WithIndexSettingsUserData(val interface{}) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.UserData = val
	}
}

func WithIndexSettingsCustomNormalization(val map[string]map[string]string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CustomNormalization = &val
	}
}

func WithIndexSettingsAttributesForFaceting(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesForFaceting = val
	}
}

func WithIndexSettingsAttributesToRetrieve(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToRetrieve = val
	}
}

func WithIndexSettingsRanking(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Ranking = val
	}
}

func WithIndexSettingsCustomRanking(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CustomRanking = val
	}
}

func WithIndexSettingsRelevancyStrictness(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RelevancyStrictness = &val
	}
}

func WithIndexSettingsAttributesToHighlight(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToHighlight = val
	}
}

func WithIndexSettingsAttributesToSnippet(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToSnippet = val
	}
}

func WithIndexSettingsHighlightPreTag(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HighlightPreTag = &val
	}
}

func WithIndexSettingsHighlightPostTag(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HighlightPostTag = &val
	}
}

func WithIndexSettingsSnippetEllipsisText(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SnippetEllipsisText = &val
	}
}

func WithIndexSettingsRestrictHighlightAndSnippetArrays(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithIndexSettingsHitsPerPage(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HitsPerPage = &val
	}
}

func WithIndexSettingsMinWordSizefor1Typo(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithIndexSettingsMinWordSizefor2Typos(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithIndexSettingsTypoTolerance(val TypoTolerance) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.TypoTolerance = &val
	}
}

func WithIndexSettingsAllowTyposOnNumericTokens(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithIndexSettingsDisableTypoToleranceOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithIndexSettingsIgnorePlurals(val IgnorePlurals) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.IgnorePlurals = &val
	}
}

func WithIndexSettingsRemoveStopWords(val RemoveStopWords) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RemoveStopWords = &val
	}
}

func WithIndexSettingsKeepDiacriticsOnCharacters(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithIndexSettingsQueryLanguages(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.QueryLanguages = val
	}
}

func WithIndexSettingsDecompoundQuery(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DecompoundQuery = &val
	}
}

func WithIndexSettingsEnableRules(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnableRules = &val
	}
}

func WithIndexSettingsEnablePersonalization(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnablePersonalization = &val
	}
}

func WithIndexSettingsQueryType(val QueryType) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.QueryType = &val
	}
}

func WithIndexSettingsRemoveWordsIfNoResults(val RemoveWordsIfNoResults) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithIndexSettingsMode(val Mode) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Mode = &val
	}
}

func WithIndexSettingsSemanticSearch(val SemanticSearch) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SemanticSearch = &val
	}
}

func WithIndexSettingsAdvancedSyntax(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AdvancedSyntax = &val
	}
}

func WithIndexSettingsOptionalWords(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.OptionalWords = val
	}
}

func WithIndexSettingsDisableExactOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableExactOnAttributes = val
	}
}

func WithIndexSettingsExactOnSingleWordQuery(val ExactOnSingleWordQuery) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithIndexSettingsAlternativesAsExact(val []AlternativesAsExact) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AlternativesAsExact = val
	}
}

func WithIndexSettingsAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithIndexSettingsDistinct(val Distinct) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Distinct = &val
	}
}

func WithIndexSettingsAttributeForDistinct(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributeForDistinct = &val
	}
}

func WithIndexSettingsReplaceSynonymsInHighlight(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithIndexSettingsMinProximity(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinProximity = &val
	}
}

func WithIndexSettingsResponseFields(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ResponseFields = val
	}
}

func WithIndexSettingsMaxFacetHits(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MaxFacetHits = &val
	}
}

func WithIndexSettingsMaxValuesPerFacet(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MaxValuesPerFacet = &val
	}
}

func WithIndexSettingsSortFacetValuesBy(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SortFacetValuesBy = &val
	}
}

func WithIndexSettingsAttributeCriteriaComputedByMinProximity(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithIndexSettingsRenderingContent(val RenderingContent) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RenderingContent = &val
	}
}

func WithIndexSettingsEnableReRanking(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnableReRanking = &val
	}
}

func WithIndexSettingsReRankingApplyFilter(val NullableReRankingApplyFilter) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ReRankingApplyFilter = val
	}
}

// NewIndexSettings instantiates a new IndexSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexSettings(opts ...IndexSettingsOption) *IndexSettings {
	this := &IndexSettings{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewIndexSettingsWithDefaults instantiates a new IndexSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexSettingsWithDefaults() *IndexSettings {
	this := &IndexSettings{}
	var paginationLimitedTo int32 = 1000
	this.PaginationLimitedTo = &paginationLimitedTo
	var allowCompressionOfIntegerArray bool = false
	this.AllowCompressionOfIntegerArray = &allowCompressionOfIntegerArray
	var separatorsToIndex string = ""
	this.SeparatorsToIndex = &separatorsToIndex
	var relevancyStrictness int32 = 100
	this.RelevancyStrictness = &relevancyStrictness
	var highlightPreTag string = "<em>"
	this.HighlightPreTag = &highlightPreTag
	var highlightPostTag string = "</em>"
	this.HighlightPostTag = &highlightPostTag
	var snippetEllipsisText string = "…"
	this.SnippetEllipsisText = &snippetEllipsisText
	var restrictHighlightAndSnippetArrays bool = false
	this.RestrictHighlightAndSnippetArrays = &restrictHighlightAndSnippetArrays
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	var minWordSizefor1Typo int32 = 4
	this.MinWordSizefor1Typo = &minWordSizefor1Typo
	var minWordSizefor2Typos int32 = 8
	this.MinWordSizefor2Typos = &minWordSizefor2Typos
	var allowTyposOnNumericTokens bool = true
	this.AllowTyposOnNumericTokens = &allowTyposOnNumericTokens
	var keepDiacriticsOnCharacters string = ""
	this.KeepDiacriticsOnCharacters = &keepDiacriticsOnCharacters
	var decompoundQuery bool = true
	this.DecompoundQuery = &decompoundQuery
	var enableRules bool = true
	this.EnableRules = &enableRules
	var enablePersonalization bool = false
	this.EnablePersonalization = &enablePersonalization
	var queryType QueryType = QUERYTYPE_PREFIX_LAST
	this.QueryType = &queryType
	var removeWordsIfNoResults RemoveWordsIfNoResults = REMOVEWORDSIFNORESULTS_NONE
	this.RemoveWordsIfNoResults = &removeWordsIfNoResults
	var mode Mode = MODE_KEYWORD_SEARCH
	this.Mode = &mode
	var advancedSyntax bool = false
	this.AdvancedSyntax = &advancedSyntax
	var exactOnSingleWordQuery ExactOnSingleWordQuery = EXACTONSINGLEWORDQUERY_ATTRIBUTE
	this.ExactOnSingleWordQuery = &exactOnSingleWordQuery
	var replaceSynonymsInHighlight bool = false
	this.ReplaceSynonymsInHighlight = &replaceSynonymsInHighlight
	var minProximity int32 = 1
	this.MinProximity = &minProximity
	var maxFacetHits int32 = 10
	this.MaxFacetHits = &maxFacetHits
	var maxValuesPerFacet int32 = 100
	this.MaxValuesPerFacet = &maxValuesPerFacet
	var sortFacetValuesBy string = "count"
	this.SortFacetValuesBy = &sortFacetValuesBy
	var attributeCriteriaComputedByMinProximity bool = false
	this.AttributeCriteriaComputedByMinProximity = &attributeCriteriaComputedByMinProximity
	var enableReRanking bool = true
	this.EnableReRanking = &enableReRanking
	return this
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *IndexSettings) GetReplicas() []string {
	if o == nil || o.Replicas == nil {
		var ret []string
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetReplicasOk() ([]string, bool) {
	if o == nil || o.Replicas == nil {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *IndexSettings) HasReplicas() bool {
	if o != nil && o.Replicas != nil {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []string and assigns it to the Replicas field.
func (o *IndexSettings) SetReplicas(v []string) {
	o.Replicas = v
}

// GetPaginationLimitedTo returns the PaginationLimitedTo field value if set, zero value otherwise.
func (o *IndexSettings) GetPaginationLimitedTo() int32 {
	if o == nil || o.PaginationLimitedTo == nil {
		var ret int32
		return ret
	}
	return *o.PaginationLimitedTo
}

// GetPaginationLimitedToOk returns a tuple with the PaginationLimitedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetPaginationLimitedToOk() (*int32, bool) {
	if o == nil || o.PaginationLimitedTo == nil {
		return nil, false
	}
	return o.PaginationLimitedTo, true
}

// HasPaginationLimitedTo returns a boolean if a field has been set.
func (o *IndexSettings) HasPaginationLimitedTo() bool {
	if o != nil && o.PaginationLimitedTo != nil {
		return true
	}

	return false
}

// SetPaginationLimitedTo gets a reference to the given int32 and assigns it to the PaginationLimitedTo field.
func (o *IndexSettings) SetPaginationLimitedTo(v int32) {
	o.PaginationLimitedTo = &v
}

// GetUnretrievableAttributes returns the UnretrievableAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetUnretrievableAttributes() []string {
	if o == nil || o.UnretrievableAttributes == nil {
		var ret []string
		return ret
	}
	return o.UnretrievableAttributes
}

// GetUnretrievableAttributesOk returns a tuple with the UnretrievableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetUnretrievableAttributesOk() ([]string, bool) {
	if o == nil || o.UnretrievableAttributes == nil {
		return nil, false
	}
	return o.UnretrievableAttributes, true
}

// HasUnretrievableAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasUnretrievableAttributes() bool {
	if o != nil && o.UnretrievableAttributes != nil {
		return true
	}

	return false
}

// SetUnretrievableAttributes gets a reference to the given []string and assigns it to the UnretrievableAttributes field.
func (o *IndexSettings) SetUnretrievableAttributes(v []string) {
	o.UnretrievableAttributes = v
}

// GetDisableTypoToleranceOnWords returns the DisableTypoToleranceOnWords field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableTypoToleranceOnWords() []string {
	if o == nil || o.DisableTypoToleranceOnWords == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnWords
}

// GetDisableTypoToleranceOnWordsOk returns a tuple with the DisableTypoToleranceOnWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableTypoToleranceOnWordsOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnWords == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnWords, true
}

// HasDisableTypoToleranceOnWords returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableTypoToleranceOnWords() bool {
	if o != nil && o.DisableTypoToleranceOnWords != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnWords gets a reference to the given []string and assigns it to the DisableTypoToleranceOnWords field.
func (o *IndexSettings) SetDisableTypoToleranceOnWords(v []string) {
	o.DisableTypoToleranceOnWords = v
}

// GetAttributesToTransliterate returns the AttributesToTransliterate field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToTransliterate() []string {
	if o == nil || o.AttributesToTransliterate == nil {
		var ret []string
		return ret
	}
	return o.AttributesToTransliterate
}

// GetAttributesToTransliterateOk returns a tuple with the AttributesToTransliterate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToTransliterateOk() ([]string, bool) {
	if o == nil || o.AttributesToTransliterate == nil {
		return nil, false
	}
	return o.AttributesToTransliterate, true
}

// HasAttributesToTransliterate returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToTransliterate() bool {
	if o != nil && o.AttributesToTransliterate != nil {
		return true
	}

	return false
}

// SetAttributesToTransliterate gets a reference to the given []string and assigns it to the AttributesToTransliterate field.
func (o *IndexSettings) SetAttributesToTransliterate(v []string) {
	o.AttributesToTransliterate = v
}

// GetCamelCaseAttributes returns the CamelCaseAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetCamelCaseAttributes() []string {
	if o == nil || o.CamelCaseAttributes == nil {
		var ret []string
		return ret
	}
	return o.CamelCaseAttributes
}

// GetCamelCaseAttributesOk returns a tuple with the CamelCaseAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCamelCaseAttributesOk() ([]string, bool) {
	if o == nil || o.CamelCaseAttributes == nil {
		return nil, false
	}
	return o.CamelCaseAttributes, true
}

// HasCamelCaseAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasCamelCaseAttributes() bool {
	if o != nil && o.CamelCaseAttributes != nil {
		return true
	}

	return false
}

// SetCamelCaseAttributes gets a reference to the given []string and assigns it to the CamelCaseAttributes field.
func (o *IndexSettings) SetCamelCaseAttributes(v []string) {
	o.CamelCaseAttributes = v
}

// GetDecompoundedAttributes returns the DecompoundedAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDecompoundedAttributes() map[string]interface{} {
	if o == nil || o.DecompoundedAttributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.DecompoundedAttributes
}

// GetDecompoundedAttributesOk returns a tuple with the DecompoundedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDecompoundedAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.DecompoundedAttributes == nil {
		return nil, false
	}
	return o.DecompoundedAttributes, true
}

// HasDecompoundedAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDecompoundedAttributes() bool {
	if o != nil && o.DecompoundedAttributes != nil {
		return true
	}

	return false
}

// SetDecompoundedAttributes gets a reference to the given map[string]interface{} and assigns it to the DecompoundedAttributes field.
func (o *IndexSettings) SetDecompoundedAttributes(v map[string]interface{}) {
	o.DecompoundedAttributes = v
}

// GetIndexLanguages returns the IndexLanguages field value if set, zero value otherwise.
func (o *IndexSettings) GetIndexLanguages() []string {
	if o == nil || o.IndexLanguages == nil {
		var ret []string
		return ret
	}
	return o.IndexLanguages
}

// GetIndexLanguagesOk returns a tuple with the IndexLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetIndexLanguagesOk() ([]string, bool) {
	if o == nil || o.IndexLanguages == nil {
		return nil, false
	}
	return o.IndexLanguages, true
}

// HasIndexLanguages returns a boolean if a field has been set.
func (o *IndexSettings) HasIndexLanguages() bool {
	if o != nil && o.IndexLanguages != nil {
		return true
	}

	return false
}

// SetIndexLanguages gets a reference to the given []string and assigns it to the IndexLanguages field.
func (o *IndexSettings) SetIndexLanguages(v []string) {
	o.IndexLanguages = v
}

// GetDisablePrefixOnAttributes returns the DisablePrefixOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisablePrefixOnAttributes() []string {
	if o == nil || o.DisablePrefixOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisablePrefixOnAttributes
}

// GetDisablePrefixOnAttributesOk returns a tuple with the DisablePrefixOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisablePrefixOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisablePrefixOnAttributes == nil {
		return nil, false
	}
	return o.DisablePrefixOnAttributes, true
}

// HasDisablePrefixOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisablePrefixOnAttributes() bool {
	if o != nil && o.DisablePrefixOnAttributes != nil {
		return true
	}

	return false
}

// SetDisablePrefixOnAttributes gets a reference to the given []string and assigns it to the DisablePrefixOnAttributes field.
func (o *IndexSettings) SetDisablePrefixOnAttributes(v []string) {
	o.DisablePrefixOnAttributes = v
}

// GetAllowCompressionOfIntegerArray returns the AllowCompressionOfIntegerArray field value if set, zero value otherwise.
func (o *IndexSettings) GetAllowCompressionOfIntegerArray() bool {
	if o == nil || o.AllowCompressionOfIntegerArray == nil {
		var ret bool
		return ret
	}
	return *o.AllowCompressionOfIntegerArray
}

// GetAllowCompressionOfIntegerArrayOk returns a tuple with the AllowCompressionOfIntegerArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAllowCompressionOfIntegerArrayOk() (*bool, bool) {
	if o == nil || o.AllowCompressionOfIntegerArray == nil {
		return nil, false
	}
	return o.AllowCompressionOfIntegerArray, true
}

// HasAllowCompressionOfIntegerArray returns a boolean if a field has been set.
func (o *IndexSettings) HasAllowCompressionOfIntegerArray() bool {
	if o != nil && o.AllowCompressionOfIntegerArray != nil {
		return true
	}

	return false
}

// SetAllowCompressionOfIntegerArray gets a reference to the given bool and assigns it to the AllowCompressionOfIntegerArray field.
func (o *IndexSettings) SetAllowCompressionOfIntegerArray(v bool) {
	o.AllowCompressionOfIntegerArray = &v
}

// GetNumericAttributesForFiltering returns the NumericAttributesForFiltering field value if set, zero value otherwise.
func (o *IndexSettings) GetNumericAttributesForFiltering() []string {
	if o == nil || o.NumericAttributesForFiltering == nil {
		var ret []string
		return ret
	}
	return o.NumericAttributesForFiltering
}

// GetNumericAttributesForFilteringOk returns a tuple with the NumericAttributesForFiltering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetNumericAttributesForFilteringOk() ([]string, bool) {
	if o == nil || o.NumericAttributesForFiltering == nil {
		return nil, false
	}
	return o.NumericAttributesForFiltering, true
}

// HasNumericAttributesForFiltering returns a boolean if a field has been set.
func (o *IndexSettings) HasNumericAttributesForFiltering() bool {
	if o != nil && o.NumericAttributesForFiltering != nil {
		return true
	}

	return false
}

// SetNumericAttributesForFiltering gets a reference to the given []string and assigns it to the NumericAttributesForFiltering field.
func (o *IndexSettings) SetNumericAttributesForFiltering(v []string) {
	o.NumericAttributesForFiltering = v
}

// GetSeparatorsToIndex returns the SeparatorsToIndex field value if set, zero value otherwise.
func (o *IndexSettings) GetSeparatorsToIndex() string {
	if o == nil || o.SeparatorsToIndex == nil {
		var ret string
		return ret
	}
	return *o.SeparatorsToIndex
}

// GetSeparatorsToIndexOk returns a tuple with the SeparatorsToIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSeparatorsToIndexOk() (*string, bool) {
	if o == nil || o.SeparatorsToIndex == nil {
		return nil, false
	}
	return o.SeparatorsToIndex, true
}

// HasSeparatorsToIndex returns a boolean if a field has been set.
func (o *IndexSettings) HasSeparatorsToIndex() bool {
	if o != nil && o.SeparatorsToIndex != nil {
		return true
	}

	return false
}

// SetSeparatorsToIndex gets a reference to the given string and assigns it to the SeparatorsToIndex field.
func (o *IndexSettings) SetSeparatorsToIndex(v string) {
	o.SeparatorsToIndex = &v
}

// GetSearchableAttributes returns the SearchableAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetSearchableAttributes() []string {
	if o == nil || o.SearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.SearchableAttributes
}

// GetSearchableAttributesOk returns a tuple with the SearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.SearchableAttributes == nil {
		return nil, false
	}
	return o.SearchableAttributes, true
}

// HasSearchableAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasSearchableAttributes() bool {
	if o != nil && o.SearchableAttributes != nil {
		return true
	}

	return false
}

// SetSearchableAttributes gets a reference to the given []string and assigns it to the SearchableAttributes field.
func (o *IndexSettings) SetSearchableAttributes(v []string) {
	o.SearchableAttributes = v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexSettings) GetUserData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexSettings) GetUserDataOk() (*interface{}, bool) {
	if o == nil || o.UserData == nil {
		return nil, false
	}
	return &o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *IndexSettings) HasUserData() bool {
	if o != nil && o.UserData != nil {
		return true
	}

	return false
}

// SetUserData gets a reference to the given interface{} and assigns it to the UserData field.
func (o *IndexSettings) SetUserData(v interface{}) {
	o.UserData = v
}

// GetCustomNormalization returns the CustomNormalization field value if set, zero value otherwise.
func (o *IndexSettings) GetCustomNormalization() map[string]map[string]string {
	if o == nil || o.CustomNormalization == nil {
		var ret map[string]map[string]string
		return ret
	}
	return *o.CustomNormalization
}

// GetCustomNormalizationOk returns a tuple with the CustomNormalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCustomNormalizationOk() (*map[string]map[string]string, bool) {
	if o == nil || o.CustomNormalization == nil {
		return nil, false
	}
	return o.CustomNormalization, true
}

// HasCustomNormalization returns a boolean if a field has been set.
func (o *IndexSettings) HasCustomNormalization() bool {
	if o != nil && o.CustomNormalization != nil {
		return true
	}

	return false
}

// SetCustomNormalization gets a reference to the given map[string]map[string]string and assigns it to the CustomNormalization field.
func (o *IndexSettings) SetCustomNormalization(v map[string]map[string]string) {
	o.CustomNormalization = &v
}

// GetAttributesForFaceting returns the AttributesForFaceting field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesForFaceting() []string {
	if o == nil || o.AttributesForFaceting == nil {
		var ret []string
		return ret
	}
	return o.AttributesForFaceting
}

// GetAttributesForFacetingOk returns a tuple with the AttributesForFaceting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesForFacetingOk() ([]string, bool) {
	if o == nil || o.AttributesForFaceting == nil {
		return nil, false
	}
	return o.AttributesForFaceting, true
}

// HasAttributesForFaceting returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesForFaceting() bool {
	if o != nil && o.AttributesForFaceting != nil {
		return true
	}

	return false
}

// SetAttributesForFaceting gets a reference to the given []string and assigns it to the AttributesForFaceting field.
func (o *IndexSettings) SetAttributesForFaceting(v []string) {
	o.AttributesForFaceting = v
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *IndexSettings) SetAttributesToRetrieve(v []string) {
	o.AttributesToRetrieve = v
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *IndexSettings) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *IndexSettings) SetRanking(v []string) {
	o.Ranking = v
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *IndexSettings) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *IndexSettings) SetCustomRanking(v []string) {
	o.CustomRanking = v
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *IndexSettings) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *IndexSettings) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *IndexSettings) SetRelevancyStrictness(v int32) {
	o.RelevancyStrictness = &v
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *IndexSettings) SetAttributesToHighlight(v []string) {
	o.AttributesToHighlight = v
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *IndexSettings) SetAttributesToSnippet(v []string) {
	o.AttributesToSnippet = v
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *IndexSettings) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *IndexSettings) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *IndexSettings) SetHighlightPreTag(v string) {
	o.HighlightPreTag = &v
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *IndexSettings) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *IndexSettings) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *IndexSettings) SetHighlightPostTag(v string) {
	o.HighlightPostTag = &v
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *IndexSettings) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *IndexSettings) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *IndexSettings) SetSnippetEllipsisText(v string) {
	o.SnippetEllipsisText = &v
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *IndexSettings) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *IndexSettings) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *IndexSettings) SetRestrictHighlightAndSnippetArrays(v bool) {
	o.RestrictHighlightAndSnippetArrays = &v
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *IndexSettings) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *IndexSettings) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *IndexSettings) SetHitsPerPage(v int32) {
	o.HitsPerPage = &v
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *IndexSettings) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *IndexSettings) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *IndexSettings) SetMinWordSizefor1Typo(v int32) {
	o.MinWordSizefor1Typo = &v
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *IndexSettings) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *IndexSettings) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *IndexSettings) SetMinWordSizefor2Typos(v int32) {
	o.MinWordSizefor2Typos = &v
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *IndexSettings) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *IndexSettings) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *IndexSettings) SetTypoTolerance(v TypoTolerance) {
	o.TypoTolerance = &v
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *IndexSettings) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *IndexSettings) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *IndexSettings) SetAllowTyposOnNumericTokens(v bool) {
	o.AllowTyposOnNumericTokens = &v
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *IndexSettings) SetDisableTypoToleranceOnAttributes(v []string) {
	o.DisableTypoToleranceOnAttributes = v
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *IndexSettings) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *IndexSettings) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *IndexSettings) SetIgnorePlurals(v IgnorePlurals) {
	o.IgnorePlurals = &v
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *IndexSettings) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *IndexSettings) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *IndexSettings) SetRemoveStopWords(v RemoveStopWords) {
	o.RemoveStopWords = &v
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *IndexSettings) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *IndexSettings) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *IndexSettings) SetKeepDiacriticsOnCharacters(v string) {
	o.KeepDiacriticsOnCharacters = &v
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *IndexSettings) GetQueryLanguages() []string {
	if o == nil || o.QueryLanguages == nil {
		var ret []string
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetQueryLanguagesOk() ([]string, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *IndexSettings) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []string and assigns it to the QueryLanguages field.
func (o *IndexSettings) SetQueryLanguages(v []string) {
	o.QueryLanguages = v
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *IndexSettings) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *IndexSettings) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *IndexSettings) SetDecompoundQuery(v bool) {
	o.DecompoundQuery = &v
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *IndexSettings) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *IndexSettings) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *IndexSettings) SetEnableRules(v bool) {
	o.EnableRules = &v
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *IndexSettings) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *IndexSettings) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *IndexSettings) SetEnablePersonalization(v bool) {
	o.EnablePersonalization = &v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *IndexSettings) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *IndexSettings) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *IndexSettings) SetQueryType(v QueryType) {
	o.QueryType = &v
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *IndexSettings) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *IndexSettings) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *IndexSettings) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) {
	o.RemoveWordsIfNoResults = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *IndexSettings) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *IndexSettings) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *IndexSettings) SetMode(v Mode) {
	o.Mode = &v
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *IndexSettings) GetSemanticSearch() SemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret SemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSemanticSearchOk() (*SemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *IndexSettings) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given SemanticSearch and assigns it to the SemanticSearch field.
func (o *IndexSettings) SetSemanticSearch(v SemanticSearch) {
	o.SemanticSearch = &v
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *IndexSettings) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *IndexSettings) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *IndexSettings) SetAdvancedSyntax(v bool) {
	o.AdvancedSyntax = &v
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *IndexSettings) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *IndexSettings) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *IndexSettings) SetOptionalWords(v []string) {
	o.OptionalWords = v
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *IndexSettings) SetDisableExactOnAttributes(v []string) {
	o.DisableExactOnAttributes = v
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *IndexSettings) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *IndexSettings) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *IndexSettings) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) {
	o.ExactOnSingleWordQuery = &v
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *IndexSettings) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *IndexSettings) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *IndexSettings) SetAlternativesAsExact(v []AlternativesAsExact) {
	o.AlternativesAsExact = v
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *IndexSettings) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *IndexSettings) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *IndexSettings) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) {
	o.AdvancedSyntaxFeatures = v
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *IndexSettings) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *IndexSettings) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *IndexSettings) SetDistinct(v Distinct) {
	o.Distinct = &v
}

// GetAttributeForDistinct returns the AttributeForDistinct field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributeForDistinct() string {
	if o == nil || o.AttributeForDistinct == nil {
		var ret string
		return ret
	}
	return *o.AttributeForDistinct
}

// GetAttributeForDistinctOk returns a tuple with the AttributeForDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributeForDistinctOk() (*string, bool) {
	if o == nil || o.AttributeForDistinct == nil {
		return nil, false
	}
	return o.AttributeForDistinct, true
}

// HasAttributeForDistinct returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributeForDistinct() bool {
	if o != nil && o.AttributeForDistinct != nil {
		return true
	}

	return false
}

// SetAttributeForDistinct gets a reference to the given string and assigns it to the AttributeForDistinct field.
func (o *IndexSettings) SetAttributeForDistinct(v string) {
	o.AttributeForDistinct = &v
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *IndexSettings) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *IndexSettings) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *IndexSettings) SetReplaceSynonymsInHighlight(v bool) {
	o.ReplaceSynonymsInHighlight = &v
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *IndexSettings) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *IndexSettings) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *IndexSettings) SetMinProximity(v int32) {
	o.MinProximity = &v
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *IndexSettings) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *IndexSettings) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *IndexSettings) SetResponseFields(v []string) {
	o.ResponseFields = v
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *IndexSettings) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *IndexSettings) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *IndexSettings) SetMaxFacetHits(v int32) {
	o.MaxFacetHits = &v
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *IndexSettings) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *IndexSettings) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *IndexSettings) SetMaxValuesPerFacet(v int32) {
	o.MaxValuesPerFacet = &v
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *IndexSettings) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *IndexSettings) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *IndexSettings) SetSortFacetValuesBy(v string) {
	o.SortFacetValuesBy = &v
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *IndexSettings) SetAttributeCriteriaComputedByMinProximity(v bool) {
	o.AttributeCriteriaComputedByMinProximity = &v
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *IndexSettings) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *IndexSettings) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *IndexSettings) SetRenderingContent(v RenderingContent) {
	o.RenderingContent = &v
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *IndexSettings) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *IndexSettings) SetEnableReRanking(v bool) {
	o.EnableReRanking = &v
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexSettings) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter.Get() == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter.Get()
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexSettings) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter.Get(), o.ReRankingApplyFilter.IsSet()
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *IndexSettings) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter.IsSet() {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given NullableReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *IndexSettings) SetReRankingApplyFilter(v ReRankingApplyFilter) {
	o.ReRankingApplyFilter.Set(&v)
}

// SetReRankingApplyFilterNil sets the value for ReRankingApplyFilter to be an explicit nil
func (o *IndexSettings) SetReRankingApplyFilterNil() {
	o.ReRankingApplyFilter.Set(nil)
}

// UnsetReRankingApplyFilter ensures that no value is present for ReRankingApplyFilter, not even an explicit nil
func (o *IndexSettings) UnsetReRankingApplyFilter() {
	o.ReRankingApplyFilter.Unset()
}

func (o IndexSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Replicas != nil {
		toSerialize["replicas"] = o.Replicas
	}
	if o.PaginationLimitedTo != nil {
		toSerialize["paginationLimitedTo"] = o.PaginationLimitedTo
	}
	if o.UnretrievableAttributes != nil {
		toSerialize["unretrievableAttributes"] = o.UnretrievableAttributes
	}
	if o.DisableTypoToleranceOnWords != nil {
		toSerialize["disableTypoToleranceOnWords"] = o.DisableTypoToleranceOnWords
	}
	if o.AttributesToTransliterate != nil {
		toSerialize["attributesToTransliterate"] = o.AttributesToTransliterate
	}
	if o.CamelCaseAttributes != nil {
		toSerialize["camelCaseAttributes"] = o.CamelCaseAttributes
	}
	if o.DecompoundedAttributes != nil {
		toSerialize["decompoundedAttributes"] = o.DecompoundedAttributes
	}
	if o.IndexLanguages != nil {
		toSerialize["indexLanguages"] = o.IndexLanguages
	}
	if o.DisablePrefixOnAttributes != nil {
		toSerialize["disablePrefixOnAttributes"] = o.DisablePrefixOnAttributes
	}
	if o.AllowCompressionOfIntegerArray != nil {
		toSerialize["allowCompressionOfIntegerArray"] = o.AllowCompressionOfIntegerArray
	}
	if o.NumericAttributesForFiltering != nil {
		toSerialize["numericAttributesForFiltering"] = o.NumericAttributesForFiltering
	}
	if o.SeparatorsToIndex != nil {
		toSerialize["separatorsToIndex"] = o.SeparatorsToIndex
	}
	if o.SearchableAttributes != nil {
		toSerialize["searchableAttributes"] = o.SearchableAttributes
	}
	if o.UserData != nil {
		toSerialize["userData"] = o.UserData
	}
	if o.CustomNormalization != nil {
		toSerialize["customNormalization"] = o.CustomNormalization
	}
	if o.AttributesForFaceting != nil {
		toSerialize["attributesForFaceting"] = o.AttributesForFaceting
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.AttributeForDistinct != nil {
		toSerialize["attributeForDistinct"] = o.AttributeForDistinct
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter.IsSet() {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter.Get()
	}
	return json.Marshal(toSerialize)
}

func (o IndexSettings) String() string {
	out := ""
	out += fmt.Sprintf("  replicas=%v\n", o.Replicas)
	out += fmt.Sprintf("  paginationLimitedTo=%v\n", o.PaginationLimitedTo)
	out += fmt.Sprintf("  unretrievableAttributes=%v\n", o.UnretrievableAttributes)
	out += fmt.Sprintf("  disableTypoToleranceOnWords=%v\n", o.DisableTypoToleranceOnWords)
	out += fmt.Sprintf("  attributesToTransliterate=%v\n", o.AttributesToTransliterate)
	out += fmt.Sprintf("  camelCaseAttributes=%v\n", o.CamelCaseAttributes)
	out += fmt.Sprintf("  decompoundedAttributes=%v\n", o.DecompoundedAttributes)
	out += fmt.Sprintf("  indexLanguages=%v\n", o.IndexLanguages)
	out += fmt.Sprintf("  disablePrefixOnAttributes=%v\n", o.DisablePrefixOnAttributes)
	out += fmt.Sprintf("  allowCompressionOfIntegerArray=%v\n", o.AllowCompressionOfIntegerArray)
	out += fmt.Sprintf("  numericAttributesForFiltering=%v\n", o.NumericAttributesForFiltering)
	out += fmt.Sprintf("  separatorsToIndex=%v\n", o.SeparatorsToIndex)
	out += fmt.Sprintf("  searchableAttributes=%v\n", o.SearchableAttributes)
	out += fmt.Sprintf("  userData=%v\n", o.UserData)
	out += fmt.Sprintf("  customNormalization=%v\n", o.CustomNormalization)
	out += fmt.Sprintf("  attributesForFaceting=%v\n", o.AttributesForFaceting)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  attributeForDistinct=%v\n", o.AttributeForDistinct)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	return fmt.Sprintf("IndexSettings {\n%s}", out)
}

type NullableIndexSettings struct {
	value *IndexSettings
	isSet bool
}

func (v NullableIndexSettings) Get() *IndexSettings {
	return v.value
}

func (v *NullableIndexSettings) Set(val *IndexSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexSettings(val *IndexSettings) *NullableIndexSettings {
	return &NullableIndexSettings{value: val, isSet: true}
}

func (v NullableIndexSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
