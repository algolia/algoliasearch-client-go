// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// IndexSettings Index settings.
type IndexSettings struct {
	// Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).  Facets are attributes that let you categorize search results. They can be used for filtering search results. By default, no attribute is used for faceting. Attribute names are case-sensitive.  **Modifiers**  - `filterOnly(\"ATTRIBUTE\")`.   Allows using this attribute as a filter, but doesn't evalue the facet values.  - `searchable(\"ATTRIBUTE\")`.   Allows searching for facet values.  - `afterDistinct(\"ATTRIBUTE\")`.   Evaluates the facet count _after_ deduplication with `distinct`.   This ensures accurate facet counts.   You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`.
	AttributesForFaceting []string `json:"attributesForFaceting,omitempty"`
	// Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).  Replicas are copies of a primary index with the same records but different settings, synonyms, or rules. If you want to offer a different ranking or sorting of your search results, you'll use replica indices. All index operations on a primary index are automatically forwarded to its replicas. To add a replica index, you must provide the complete set of replicas to this parameter. If you omit a replica from this list, the replica turns into a regular, standalone index that will no longer by synced with the primary index.  **Modifier**  - `virtual(\"REPLICA\")`.   Create a virtual replica,   Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/).
	Replicas []string `json:"replicas,omitempty"`
	// Maximum number of search results that can be obtained through pagination.  Higher pagination limits might slow down your search. For pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed.
	PaginationLimitedTo *int32 `json:"paginationLimitedTo,omitempty"`
	// Attributes that can't be retrieved at query time.  This can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/), but don't want to include it in the search results. Attribute names are case-sensitive.
	UnretrievableAttributes []string `json:"unretrievableAttributes,omitempty"`
	// Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). This also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words.
	DisableTypoToleranceOnWords []string `json:"disableTypoToleranceOnWords,omitempty"`
	// Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).  Transliteration supports searching in any of the Japanese writing systems. To support transliteration, you must set the indexing language to Japanese. Attribute names are case-sensitive.
	AttributesToTransliterate []string `json:"attributesToTransliterate,omitempty"`
	// Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words. Attribute names are case-sensitive.
	CamelCaseAttributes []string `json:"camelCaseAttributes,omitempty"`
	// Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding). Attribute names are case-sensitive.  Compound words are formed by combining two or more individual words, and are particularly prevalent in Germanic languages—for example, \"firefighter\". With decompounding, the individual components are indexed separately.  You can specify different lists for different languages. Decompounding is supported for these languages: Dutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`).
	DecompoundedAttributes map[string]any `json:"decompoundedAttributes,omitempty"`
	// Languages for language-specific processing steps, such as word detection and dictionary settings.  **You should always specify an indexing language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).
	IndexLanguages []SupportedLanguage `json:"indexLanguages,omitempty"`
	// Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search). Attribute names are case-sensitive.
	DisablePrefixOnAttributes []string `json:"disablePrefixOnAttributes,omitempty"`
	// Whether arrays with exclusively non-negative integers should be compressed for better performance. If true, the compressed arrays may be reordered.
	AllowCompressionOfIntegerArray *bool `json:"allowCompressionOfIntegerArray,omitempty"`
	// Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters). Attribute names are case-sensitive.  By default, all numeric attributes are available as numerical filters. For faster indexing, reduce the number of numeric attributes.  If you want to turn off filtering for all numeric attributes, specify an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.  **Modifier**  - `equalOnly(\"ATTRIBUTE\")`.   Support only filtering based on equality comparisons `=` and `!=`.
	NumericAttributesForFiltering []string `json:"numericAttributesForFiltering,omitempty"`
	// Controls which separators are indexed.  Separators are all non-letter characters except spaces and currency characters, such as $€£¥. By default, separator characters aren't indexed. With `separatorsToIndex`, Algolia treats separator characters as separate words. For example, a search for `C#` would report two matches.
	SeparatorsToIndex *string `json:"separatorsToIndex,omitempty"`
	// Attributes used for searching. Attribute names are case-sensitive.  By default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off. With a non-empty list, Algolia only returns results with matches in the selected attributes. In addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first. To make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`. Attributes with the same priority are always unordered.  For more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).  **Modifier**  - `unordered(\"ATTRIBUTE\")`.   Ignore the position of a match within the attribute.  Without modifier, matches at the beginning of an attribute rank higher than matches at the end.
	SearchableAttributes []string `json:"searchableAttributes,omitempty"`
	// An object with custom data.  You can store up to 32kB as custom data.
	UserData map[string]any `json:"userData,omitempty"`
	// Characters and their normalized replacements. This overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
	CustomNormalization *map[string]map[string]string `json:"customNormalization,omitempty"`
	// Attribute that should be used to establish groups of results. Attribute names are case-sensitive.  All records with the same value for this attribute are considered a group. You can combine `attributeForDistinct` with the `distinct` search parameter to control how many items per group are included in the search results.  If you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting. This applies faceting _after_ deduplication, which will result in accurate facet counts.
	AttributeForDistinct *string `json:"attributeForDistinct,omitempty"`
	// Attributes to include in the API response.  To reduce the size of your response, you can retrieve only some of the attributes. Attribute names are case-sensitive.  - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Determines the order in which Algolia returns your results.  By default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/). The tie-breaking algorithm sequentially applies each criterion in the order they're specified. If you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/), you put the sorting attribute at the top of the list.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order. - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  Before you modify the default setting, you should test your changes in the dashboard, and by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/).
	Ranking []string `json:"ranking,omitempty"`
	// Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Attribute names are case-sensitive.  The custom ranking attributes decide which items are shown first if the other ranking criteria are equal.  Records with missing values for your selected custom ranking attributes are always sorted last. Boolean attributes are sorted based on their alphabetical order.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order.  - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  If you use two or more custom ranking attributes, [reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes, or the other attributes will never be applied.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Relevancy threshold below which less relevant results aren't included in the results.  You can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas). Use this setting to strike a balance between the relevance and number of returned results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// Attributes to highlight.  By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive.  With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI.  For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// Attributes for which to enable snippets. Attribute names are case-sensitive.  Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// HTML tag to insert before the highlighted parts in all highlighted results and snippets.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// HTML tag to insert after the highlighted parts in all highlighted results and snippets.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers in the search query.  Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). Attribute names are case-sensitive.  Returning only exact matches can help when:  - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions.  Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// Characters for which diacritics should be preserved.  By default, Algolia removes diacritics from letters. For example, `é` becomes `e`. If this causes issues in your search, you can specify characters that should keep their diacritics.
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**.  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).
	QueryLanguages []SupportedLanguage `json:"queryLanguages,omitempty"`
	// Whether to split compound words into their building blocks.  For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Whether to enable rules.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Whether to enable Personalization.
	EnablePersonalization  *bool                   `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType              `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                   `json:"mode,omitempty"`
	SemanticSearch         *SemanticSearch         `json:"semanticSearch,omitempty"`
	// Whether to support phrase matching and excluding words from search queries.  Use the `advancedSyntaxFeatures` parameter to control which feature is supported.
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// Words that should be considered optional when found in the query.  By default, records must match all words in the search query to be included in the search results. Adding optional words can help to increase the number of search results by running an additional search query that doesn't include the optional words. For example, if the search query is \"action video\" and \"video\" is an optional word, the search engine runs two queries. One for \"action video\" and one for \"action\". Records that match all words are ranked higher.  For a search query with 4 or more words **and** all its words are optional, the number of matched words required for a record to be included in the search results increases for every 1,000 records:  - If `optionalWords` has less than 10 words, the required number of matched words increases by 1:   results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 2 matched words. - If `optionalWords` has 10 or more words, the number of required matched words increases by the number of optional words dividied by 5 (rounded down).   For example, with 18 optional words: results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 4 matched words.  For more information, see [Optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).
	OptionalWords []string `json:"optionalWords,omitempty"`
	// Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes). Attribute names are case-sensitive.  This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking.
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// Alternatives of query words that should be considered as exact matches by the Exact ranking criterion.  - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.  - `singleWordSynonym`.   Single-word synonyms, such as \"NY/NYC\" are considered exact matches.  - `multiWordsSynonym`.   Multi-word synonyms, such as \"NY/New York\" are considered exact matches.
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Advanced search syntax features you want to support.  - `exactPhrase`.   Phrases in quotes must match exactly.   For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".  - `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine` matches records that contain \"search\" but not \"engine\".  This setting only has an effect if `advancedSyntax` is true.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	Distinct               *Distinct                `json:"distinct,omitempty"`
	// Whether to replace a highlighted word with the matched synonym.  By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted.  With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Minimum proximity score for two matching words.  This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart.  For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Properties to include in the API response of `search` and `browse` requests.  By default, all response properties are included. To reduce the response size, you can select, which attributes should be included.  You can't exclude these properties: `message`, `warning`, `cursor`, `serverUsed`, `indexUsed`, `abTestVariantID`, `parsedQuery`, or any property triggered by the `getRankingInfo` parameter.  Don't exclude properties that you might need in your search UI.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// Maximum number of facet values to return for each facet.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Order in which to retrieve facet values.  - `count`.   Facet values are retrieved by decreasing count.   The count is the number of matching records containing this facet value.  - `alpha`.   Retrieve facet values alphabetically.  This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/).
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// Whether the best matching attribute should be determined by minimum proximity.  This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.
	AttributeCriteriaComputedByMinProximity *bool             `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent `json:"renderingContent,omitempty"`
	// Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).  This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
	EnableReRanking      *bool                 `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter *ReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
}

type IndexSettingsOption func(f *IndexSettings)

func WithIndexSettingsAttributesForFaceting(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesForFaceting = val
	}
}

func WithIndexSettingsReplicas(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Replicas = val
	}
}

func WithIndexSettingsPaginationLimitedTo(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.PaginationLimitedTo = &val
	}
}

func WithIndexSettingsUnretrievableAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.UnretrievableAttributes = val
	}
}

func WithIndexSettingsDisableTypoToleranceOnWords(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableTypoToleranceOnWords = val
	}
}

func WithIndexSettingsAttributesToTransliterate(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToTransliterate = val
	}
}

func WithIndexSettingsCamelCaseAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CamelCaseAttributes = val
	}
}

func WithIndexSettingsDecompoundedAttributes(val map[string]any) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DecompoundedAttributes = val
	}
}

func WithIndexSettingsIndexLanguages(val []SupportedLanguage) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.IndexLanguages = val
	}
}

func WithIndexSettingsDisablePrefixOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisablePrefixOnAttributes = val
	}
}

func WithIndexSettingsAllowCompressionOfIntegerArray(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AllowCompressionOfIntegerArray = &val
	}
}

func WithIndexSettingsNumericAttributesForFiltering(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.NumericAttributesForFiltering = val
	}
}

func WithIndexSettingsSeparatorsToIndex(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SeparatorsToIndex = &val
	}
}

func WithIndexSettingsSearchableAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SearchableAttributes = val
	}
}

func WithIndexSettingsUserData(val map[string]any) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.UserData = val
	}
}

func WithIndexSettingsCustomNormalization(val map[string]map[string]string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CustomNormalization = &val
	}
}

func WithIndexSettingsAttributeForDistinct(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributeForDistinct = &val
	}
}

func WithIndexSettingsAttributesToRetrieve(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToRetrieve = val
	}
}

func WithIndexSettingsRanking(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Ranking = val
	}
}

func WithIndexSettingsCustomRanking(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.CustomRanking = val
	}
}

func WithIndexSettingsRelevancyStrictness(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RelevancyStrictness = &val
	}
}

func WithIndexSettingsAttributesToHighlight(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToHighlight = val
	}
}

func WithIndexSettingsAttributesToSnippet(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributesToSnippet = val
	}
}

func WithIndexSettingsHighlightPreTag(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HighlightPreTag = &val
	}
}

func WithIndexSettingsHighlightPostTag(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HighlightPostTag = &val
	}
}

func WithIndexSettingsSnippetEllipsisText(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SnippetEllipsisText = &val
	}
}

func WithIndexSettingsRestrictHighlightAndSnippetArrays(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithIndexSettingsHitsPerPage(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.HitsPerPage = &val
	}
}

func WithIndexSettingsMinWordSizefor1Typo(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithIndexSettingsMinWordSizefor2Typos(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithIndexSettingsTypoTolerance(val TypoTolerance) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.TypoTolerance = &val
	}
}

func WithIndexSettingsAllowTyposOnNumericTokens(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithIndexSettingsDisableTypoToleranceOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithIndexSettingsIgnorePlurals(val IgnorePlurals) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.IgnorePlurals = &val
	}
}

func WithIndexSettingsRemoveStopWords(val RemoveStopWords) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RemoveStopWords = &val
	}
}

func WithIndexSettingsKeepDiacriticsOnCharacters(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithIndexSettingsQueryLanguages(val []SupportedLanguage) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.QueryLanguages = val
	}
}

func WithIndexSettingsDecompoundQuery(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DecompoundQuery = &val
	}
}

func WithIndexSettingsEnableRules(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnableRules = &val
	}
}

func WithIndexSettingsEnablePersonalization(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnablePersonalization = &val
	}
}

func WithIndexSettingsQueryType(val QueryType) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.QueryType = &val
	}
}

func WithIndexSettingsRemoveWordsIfNoResults(val RemoveWordsIfNoResults) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithIndexSettingsMode(val Mode) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Mode = &val
	}
}

func WithIndexSettingsSemanticSearch(val SemanticSearch) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SemanticSearch = &val
	}
}

func WithIndexSettingsAdvancedSyntax(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AdvancedSyntax = &val
	}
}

func WithIndexSettingsOptionalWords(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.OptionalWords = val
	}
}

func WithIndexSettingsDisableExactOnAttributes(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.DisableExactOnAttributes = val
	}
}

func WithIndexSettingsExactOnSingleWordQuery(val ExactOnSingleWordQuery) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithIndexSettingsAlternativesAsExact(val []AlternativesAsExact) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AlternativesAsExact = val
	}
}

func WithIndexSettingsAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithIndexSettingsDistinct(val Distinct) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.Distinct = &val
	}
}

func WithIndexSettingsReplaceSynonymsInHighlight(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithIndexSettingsMinProximity(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MinProximity = &val
	}
}

func WithIndexSettingsResponseFields(val []string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ResponseFields = val
	}
}

func WithIndexSettingsMaxFacetHits(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MaxFacetHits = &val
	}
}

func WithIndexSettingsMaxValuesPerFacet(val int32) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.MaxValuesPerFacet = &val
	}
}

func WithIndexSettingsSortFacetValuesBy(val string) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.SortFacetValuesBy = &val
	}
}

func WithIndexSettingsAttributeCriteriaComputedByMinProximity(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithIndexSettingsRenderingContent(val RenderingContent) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.RenderingContent = &val
	}
}

func WithIndexSettingsEnableReRanking(val bool) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.EnableReRanking = &val
	}
}

func WithIndexSettingsReRankingApplyFilter(val ReRankingApplyFilter) IndexSettingsOption {
	return func(f *IndexSettings) {
		f.ReRankingApplyFilter = &val
	}
}

// NewIndexSettings instantiates a new IndexSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewIndexSettings(opts ...IndexSettingsOption) *IndexSettings {
	this := &IndexSettings{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyIndexSettings return a pointer to an empty IndexSettings object.
func NewEmptyIndexSettings() *IndexSettings {
	return &IndexSettings{}
}

// GetAttributesForFaceting returns the AttributesForFaceting field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesForFaceting() []string {
	if o == nil || o.AttributesForFaceting == nil {
		var ret []string
		return ret
	}
	return o.AttributesForFaceting
}

// GetAttributesForFacetingOk returns a tuple with the AttributesForFaceting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesForFacetingOk() ([]string, bool) {
	if o == nil || o.AttributesForFaceting == nil {
		return nil, false
	}
	return o.AttributesForFaceting, true
}

// HasAttributesForFaceting returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesForFaceting() bool {
	if o != nil && o.AttributesForFaceting != nil {
		return true
	}

	return false
}

// SetAttributesForFaceting gets a reference to the given []string and assigns it to the AttributesForFaceting field.
func (o *IndexSettings) SetAttributesForFaceting(v []string) *IndexSettings {
	o.AttributesForFaceting = v
	return o
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *IndexSettings) GetReplicas() []string {
	if o == nil || o.Replicas == nil {
		var ret []string
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetReplicasOk() ([]string, bool) {
	if o == nil || o.Replicas == nil {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *IndexSettings) HasReplicas() bool {
	if o != nil && o.Replicas != nil {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []string and assigns it to the Replicas field.
func (o *IndexSettings) SetReplicas(v []string) *IndexSettings {
	o.Replicas = v
	return o
}

// GetPaginationLimitedTo returns the PaginationLimitedTo field value if set, zero value otherwise.
func (o *IndexSettings) GetPaginationLimitedTo() int32 {
	if o == nil || o.PaginationLimitedTo == nil {
		var ret int32
		return ret
	}
	return *o.PaginationLimitedTo
}

// GetPaginationLimitedToOk returns a tuple with the PaginationLimitedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetPaginationLimitedToOk() (*int32, bool) {
	if o == nil || o.PaginationLimitedTo == nil {
		return nil, false
	}
	return o.PaginationLimitedTo, true
}

// HasPaginationLimitedTo returns a boolean if a field has been set.
func (o *IndexSettings) HasPaginationLimitedTo() bool {
	if o != nil && o.PaginationLimitedTo != nil {
		return true
	}

	return false
}

// SetPaginationLimitedTo gets a reference to the given int32 and assigns it to the PaginationLimitedTo field.
func (o *IndexSettings) SetPaginationLimitedTo(v int32) *IndexSettings {
	o.PaginationLimitedTo = &v
	return o
}

// GetUnretrievableAttributes returns the UnretrievableAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetUnretrievableAttributes() []string {
	if o == nil || o.UnretrievableAttributes == nil {
		var ret []string
		return ret
	}
	return o.UnretrievableAttributes
}

// GetUnretrievableAttributesOk returns a tuple with the UnretrievableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetUnretrievableAttributesOk() ([]string, bool) {
	if o == nil || o.UnretrievableAttributes == nil {
		return nil, false
	}
	return o.UnretrievableAttributes, true
}

// HasUnretrievableAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasUnretrievableAttributes() bool {
	if o != nil && o.UnretrievableAttributes != nil {
		return true
	}

	return false
}

// SetUnretrievableAttributes gets a reference to the given []string and assigns it to the UnretrievableAttributes field.
func (o *IndexSettings) SetUnretrievableAttributes(v []string) *IndexSettings {
	o.UnretrievableAttributes = v
	return o
}

// GetDisableTypoToleranceOnWords returns the DisableTypoToleranceOnWords field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableTypoToleranceOnWords() []string {
	if o == nil || o.DisableTypoToleranceOnWords == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnWords
}

// GetDisableTypoToleranceOnWordsOk returns a tuple with the DisableTypoToleranceOnWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableTypoToleranceOnWordsOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnWords == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnWords, true
}

// HasDisableTypoToleranceOnWords returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableTypoToleranceOnWords() bool {
	if o != nil && o.DisableTypoToleranceOnWords != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnWords gets a reference to the given []string and assigns it to the DisableTypoToleranceOnWords field.
func (o *IndexSettings) SetDisableTypoToleranceOnWords(v []string) *IndexSettings {
	o.DisableTypoToleranceOnWords = v
	return o
}

// GetAttributesToTransliterate returns the AttributesToTransliterate field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToTransliterate() []string {
	if o == nil || o.AttributesToTransliterate == nil {
		var ret []string
		return ret
	}
	return o.AttributesToTransliterate
}

// GetAttributesToTransliterateOk returns a tuple with the AttributesToTransliterate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToTransliterateOk() ([]string, bool) {
	if o == nil || o.AttributesToTransliterate == nil {
		return nil, false
	}
	return o.AttributesToTransliterate, true
}

// HasAttributesToTransliterate returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToTransliterate() bool {
	if o != nil && o.AttributesToTransliterate != nil {
		return true
	}

	return false
}

// SetAttributesToTransliterate gets a reference to the given []string and assigns it to the AttributesToTransliterate field.
func (o *IndexSettings) SetAttributesToTransliterate(v []string) *IndexSettings {
	o.AttributesToTransliterate = v
	return o
}

// GetCamelCaseAttributes returns the CamelCaseAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetCamelCaseAttributes() []string {
	if o == nil || o.CamelCaseAttributes == nil {
		var ret []string
		return ret
	}
	return o.CamelCaseAttributes
}

// GetCamelCaseAttributesOk returns a tuple with the CamelCaseAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCamelCaseAttributesOk() ([]string, bool) {
	if o == nil || o.CamelCaseAttributes == nil {
		return nil, false
	}
	return o.CamelCaseAttributes, true
}

// HasCamelCaseAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasCamelCaseAttributes() bool {
	if o != nil && o.CamelCaseAttributes != nil {
		return true
	}

	return false
}

// SetCamelCaseAttributes gets a reference to the given []string and assigns it to the CamelCaseAttributes field.
func (o *IndexSettings) SetCamelCaseAttributes(v []string) *IndexSettings {
	o.CamelCaseAttributes = v
	return o
}

// GetDecompoundedAttributes returns the DecompoundedAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDecompoundedAttributes() map[string]any {
	if o == nil || o.DecompoundedAttributes == nil {
		var ret map[string]any
		return ret
	}
	return o.DecompoundedAttributes
}

// GetDecompoundedAttributesOk returns a tuple with the DecompoundedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDecompoundedAttributesOk() (map[string]any, bool) {
	if o == nil || o.DecompoundedAttributes == nil {
		return nil, false
	}
	return o.DecompoundedAttributes, true
}

// HasDecompoundedAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDecompoundedAttributes() bool {
	if o != nil && o.DecompoundedAttributes != nil {
		return true
	}

	return false
}

// SetDecompoundedAttributes gets a reference to the given map[string]any and assigns it to the DecompoundedAttributes field.
func (o *IndexSettings) SetDecompoundedAttributes(v map[string]any) *IndexSettings {
	o.DecompoundedAttributes = v
	return o
}

// GetIndexLanguages returns the IndexLanguages field value if set, zero value otherwise.
func (o *IndexSettings) GetIndexLanguages() []SupportedLanguage {
	if o == nil || o.IndexLanguages == nil {
		var ret []SupportedLanguage
		return ret
	}
	return o.IndexLanguages
}

// GetIndexLanguagesOk returns a tuple with the IndexLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetIndexLanguagesOk() ([]SupportedLanguage, bool) {
	if o == nil || o.IndexLanguages == nil {
		return nil, false
	}
	return o.IndexLanguages, true
}

// HasIndexLanguages returns a boolean if a field has been set.
func (o *IndexSettings) HasIndexLanguages() bool {
	if o != nil && o.IndexLanguages != nil {
		return true
	}

	return false
}

// SetIndexLanguages gets a reference to the given []SupportedLanguage and assigns it to the IndexLanguages field.
func (o *IndexSettings) SetIndexLanguages(v []SupportedLanguage) *IndexSettings {
	o.IndexLanguages = v
	return o
}

// GetDisablePrefixOnAttributes returns the DisablePrefixOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisablePrefixOnAttributes() []string {
	if o == nil || o.DisablePrefixOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisablePrefixOnAttributes
}

// GetDisablePrefixOnAttributesOk returns a tuple with the DisablePrefixOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisablePrefixOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisablePrefixOnAttributes == nil {
		return nil, false
	}
	return o.DisablePrefixOnAttributes, true
}

// HasDisablePrefixOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisablePrefixOnAttributes() bool {
	if o != nil && o.DisablePrefixOnAttributes != nil {
		return true
	}

	return false
}

// SetDisablePrefixOnAttributes gets a reference to the given []string and assigns it to the DisablePrefixOnAttributes field.
func (o *IndexSettings) SetDisablePrefixOnAttributes(v []string) *IndexSettings {
	o.DisablePrefixOnAttributes = v
	return o
}

// GetAllowCompressionOfIntegerArray returns the AllowCompressionOfIntegerArray field value if set, zero value otherwise.
func (o *IndexSettings) GetAllowCompressionOfIntegerArray() bool {
	if o == nil || o.AllowCompressionOfIntegerArray == nil {
		var ret bool
		return ret
	}
	return *o.AllowCompressionOfIntegerArray
}

// GetAllowCompressionOfIntegerArrayOk returns a tuple with the AllowCompressionOfIntegerArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAllowCompressionOfIntegerArrayOk() (*bool, bool) {
	if o == nil || o.AllowCompressionOfIntegerArray == nil {
		return nil, false
	}
	return o.AllowCompressionOfIntegerArray, true
}

// HasAllowCompressionOfIntegerArray returns a boolean if a field has been set.
func (o *IndexSettings) HasAllowCompressionOfIntegerArray() bool {
	if o != nil && o.AllowCompressionOfIntegerArray != nil {
		return true
	}

	return false
}

// SetAllowCompressionOfIntegerArray gets a reference to the given bool and assigns it to the AllowCompressionOfIntegerArray field.
func (o *IndexSettings) SetAllowCompressionOfIntegerArray(v bool) *IndexSettings {
	o.AllowCompressionOfIntegerArray = &v
	return o
}

// GetNumericAttributesForFiltering returns the NumericAttributesForFiltering field value if set, zero value otherwise.
func (o *IndexSettings) GetNumericAttributesForFiltering() []string {
	if o == nil || o.NumericAttributesForFiltering == nil {
		var ret []string
		return ret
	}
	return o.NumericAttributesForFiltering
}

// GetNumericAttributesForFilteringOk returns a tuple with the NumericAttributesForFiltering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetNumericAttributesForFilteringOk() ([]string, bool) {
	if o == nil || o.NumericAttributesForFiltering == nil {
		return nil, false
	}
	return o.NumericAttributesForFiltering, true
}

// HasNumericAttributesForFiltering returns a boolean if a field has been set.
func (o *IndexSettings) HasNumericAttributesForFiltering() bool {
	if o != nil && o.NumericAttributesForFiltering != nil {
		return true
	}

	return false
}

// SetNumericAttributesForFiltering gets a reference to the given []string and assigns it to the NumericAttributesForFiltering field.
func (o *IndexSettings) SetNumericAttributesForFiltering(v []string) *IndexSettings {
	o.NumericAttributesForFiltering = v
	return o
}

// GetSeparatorsToIndex returns the SeparatorsToIndex field value if set, zero value otherwise.
func (o *IndexSettings) GetSeparatorsToIndex() string {
	if o == nil || o.SeparatorsToIndex == nil {
		var ret string
		return ret
	}
	return *o.SeparatorsToIndex
}

// GetSeparatorsToIndexOk returns a tuple with the SeparatorsToIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSeparatorsToIndexOk() (*string, bool) {
	if o == nil || o.SeparatorsToIndex == nil {
		return nil, false
	}
	return o.SeparatorsToIndex, true
}

// HasSeparatorsToIndex returns a boolean if a field has been set.
func (o *IndexSettings) HasSeparatorsToIndex() bool {
	if o != nil && o.SeparatorsToIndex != nil {
		return true
	}

	return false
}

// SetSeparatorsToIndex gets a reference to the given string and assigns it to the SeparatorsToIndex field.
func (o *IndexSettings) SetSeparatorsToIndex(v string) *IndexSettings {
	o.SeparatorsToIndex = &v
	return o
}

// GetSearchableAttributes returns the SearchableAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetSearchableAttributes() []string {
	if o == nil || o.SearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.SearchableAttributes
}

// GetSearchableAttributesOk returns a tuple with the SearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.SearchableAttributes == nil {
		return nil, false
	}
	return o.SearchableAttributes, true
}

// HasSearchableAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasSearchableAttributes() bool {
	if o != nil && o.SearchableAttributes != nil {
		return true
	}

	return false
}

// SetSearchableAttributes gets a reference to the given []string and assigns it to the SearchableAttributes field.
func (o *IndexSettings) SetSearchableAttributes(v []string) *IndexSettings {
	o.SearchableAttributes = v
	return o
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *IndexSettings) GetUserData() map[string]any {
	if o == nil || o.UserData == nil {
		var ret map[string]any
		return ret
	}
	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetUserDataOk() (map[string]any, bool) {
	if o == nil || o.UserData == nil {
		return nil, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *IndexSettings) HasUserData() bool {
	if o != nil && o.UserData != nil {
		return true
	}

	return false
}

// SetUserData gets a reference to the given map[string]any and assigns it to the UserData field.
func (o *IndexSettings) SetUserData(v map[string]any) *IndexSettings {
	o.UserData = v
	return o
}

// GetCustomNormalization returns the CustomNormalization field value if set, zero value otherwise.
func (o *IndexSettings) GetCustomNormalization() map[string]map[string]string {
	if o == nil || o.CustomNormalization == nil {
		var ret map[string]map[string]string
		return ret
	}
	return *o.CustomNormalization
}

// GetCustomNormalizationOk returns a tuple with the CustomNormalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCustomNormalizationOk() (*map[string]map[string]string, bool) {
	if o == nil || o.CustomNormalization == nil {
		return nil, false
	}
	return o.CustomNormalization, true
}

// HasCustomNormalization returns a boolean if a field has been set.
func (o *IndexSettings) HasCustomNormalization() bool {
	if o != nil && o.CustomNormalization != nil {
		return true
	}

	return false
}

// SetCustomNormalization gets a reference to the given map[string]map[string]string and assigns it to the CustomNormalization field.
func (o *IndexSettings) SetCustomNormalization(v map[string]map[string]string) *IndexSettings {
	o.CustomNormalization = &v
	return o
}

// GetAttributeForDistinct returns the AttributeForDistinct field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributeForDistinct() string {
	if o == nil || o.AttributeForDistinct == nil {
		var ret string
		return ret
	}
	return *o.AttributeForDistinct
}

// GetAttributeForDistinctOk returns a tuple with the AttributeForDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributeForDistinctOk() (*string, bool) {
	if o == nil || o.AttributeForDistinct == nil {
		return nil, false
	}
	return o.AttributeForDistinct, true
}

// HasAttributeForDistinct returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributeForDistinct() bool {
	if o != nil && o.AttributeForDistinct != nil {
		return true
	}

	return false
}

// SetAttributeForDistinct gets a reference to the given string and assigns it to the AttributeForDistinct field.
func (o *IndexSettings) SetAttributeForDistinct(v string) *IndexSettings {
	o.AttributeForDistinct = &v
	return o
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *IndexSettings) SetAttributesToRetrieve(v []string) *IndexSettings {
	o.AttributesToRetrieve = v
	return o
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *IndexSettings) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *IndexSettings) SetRanking(v []string) *IndexSettings {
	o.Ranking = v
	return o
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *IndexSettings) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *IndexSettings) SetCustomRanking(v []string) *IndexSettings {
	o.CustomRanking = v
	return o
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *IndexSettings) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *IndexSettings) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *IndexSettings) SetRelevancyStrictness(v int32) *IndexSettings {
	o.RelevancyStrictness = &v
	return o
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *IndexSettings) SetAttributesToHighlight(v []string) *IndexSettings {
	o.AttributesToHighlight = v
	return o
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *IndexSettings) SetAttributesToSnippet(v []string) *IndexSettings {
	o.AttributesToSnippet = v
	return o
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *IndexSettings) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *IndexSettings) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *IndexSettings) SetHighlightPreTag(v string) *IndexSettings {
	o.HighlightPreTag = &v
	return o
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *IndexSettings) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *IndexSettings) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *IndexSettings) SetHighlightPostTag(v string) *IndexSettings {
	o.HighlightPostTag = &v
	return o
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *IndexSettings) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *IndexSettings) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *IndexSettings) SetSnippetEllipsisText(v string) *IndexSettings {
	o.SnippetEllipsisText = &v
	return o
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *IndexSettings) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *IndexSettings) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *IndexSettings) SetRestrictHighlightAndSnippetArrays(v bool) *IndexSettings {
	o.RestrictHighlightAndSnippetArrays = &v
	return o
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *IndexSettings) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *IndexSettings) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *IndexSettings) SetHitsPerPage(v int32) *IndexSettings {
	o.HitsPerPage = &v
	return o
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *IndexSettings) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *IndexSettings) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *IndexSettings) SetMinWordSizefor1Typo(v int32) *IndexSettings {
	o.MinWordSizefor1Typo = &v
	return o
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *IndexSettings) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *IndexSettings) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *IndexSettings) SetMinWordSizefor2Typos(v int32) *IndexSettings {
	o.MinWordSizefor2Typos = &v
	return o
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *IndexSettings) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *IndexSettings) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *IndexSettings) SetTypoTolerance(v *TypoTolerance) *IndexSettings {
	o.TypoTolerance = v
	return o
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *IndexSettings) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *IndexSettings) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *IndexSettings) SetAllowTyposOnNumericTokens(v bool) *IndexSettings {
	o.AllowTyposOnNumericTokens = &v
	return o
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *IndexSettings) SetDisableTypoToleranceOnAttributes(v []string) *IndexSettings {
	o.DisableTypoToleranceOnAttributes = v
	return o
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *IndexSettings) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *IndexSettings) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *IndexSettings) SetIgnorePlurals(v *IgnorePlurals) *IndexSettings {
	o.IgnorePlurals = v
	return o
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *IndexSettings) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *IndexSettings) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *IndexSettings) SetRemoveStopWords(v *RemoveStopWords) *IndexSettings {
	o.RemoveStopWords = v
	return o
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *IndexSettings) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *IndexSettings) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *IndexSettings) SetKeepDiacriticsOnCharacters(v string) *IndexSettings {
	o.KeepDiacriticsOnCharacters = &v
	return o
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *IndexSettings) GetQueryLanguages() []SupportedLanguage {
	if o == nil || o.QueryLanguages == nil {
		var ret []SupportedLanguage
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetQueryLanguagesOk() ([]SupportedLanguage, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *IndexSettings) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []SupportedLanguage and assigns it to the QueryLanguages field.
func (o *IndexSettings) SetQueryLanguages(v []SupportedLanguage) *IndexSettings {
	o.QueryLanguages = v
	return o
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *IndexSettings) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *IndexSettings) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *IndexSettings) SetDecompoundQuery(v bool) *IndexSettings {
	o.DecompoundQuery = &v
	return o
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *IndexSettings) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *IndexSettings) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *IndexSettings) SetEnableRules(v bool) *IndexSettings {
	o.EnableRules = &v
	return o
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *IndexSettings) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *IndexSettings) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *IndexSettings) SetEnablePersonalization(v bool) *IndexSettings {
	o.EnablePersonalization = &v
	return o
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *IndexSettings) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *IndexSettings) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *IndexSettings) SetQueryType(v QueryType) *IndexSettings {
	o.QueryType = &v
	return o
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *IndexSettings) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *IndexSettings) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *IndexSettings) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) *IndexSettings {
	o.RemoveWordsIfNoResults = &v
	return o
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *IndexSettings) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *IndexSettings) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *IndexSettings) SetMode(v Mode) *IndexSettings {
	o.Mode = &v
	return o
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *IndexSettings) GetSemanticSearch() SemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret SemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSemanticSearchOk() (*SemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *IndexSettings) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given SemanticSearch and assigns it to the SemanticSearch field.
func (o *IndexSettings) SetSemanticSearch(v *SemanticSearch) *IndexSettings {
	o.SemanticSearch = v
	return o
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *IndexSettings) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *IndexSettings) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *IndexSettings) SetAdvancedSyntax(v bool) *IndexSettings {
	o.AdvancedSyntax = &v
	return o
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *IndexSettings) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *IndexSettings) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *IndexSettings) SetOptionalWords(v []string) *IndexSettings {
	o.OptionalWords = v
	return o
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *IndexSettings) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *IndexSettings) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *IndexSettings) SetDisableExactOnAttributes(v []string) *IndexSettings {
	o.DisableExactOnAttributes = v
	return o
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *IndexSettings) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *IndexSettings) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *IndexSettings) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) *IndexSettings {
	o.ExactOnSingleWordQuery = &v
	return o
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *IndexSettings) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *IndexSettings) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *IndexSettings) SetAlternativesAsExact(v []AlternativesAsExact) *IndexSettings {
	o.AlternativesAsExact = v
	return o
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *IndexSettings) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *IndexSettings) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *IndexSettings) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) *IndexSettings {
	o.AdvancedSyntaxFeatures = v
	return o
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *IndexSettings) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *IndexSettings) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *IndexSettings) SetDistinct(v *Distinct) *IndexSettings {
	o.Distinct = v
	return o
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *IndexSettings) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *IndexSettings) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *IndexSettings) SetReplaceSynonymsInHighlight(v bool) *IndexSettings {
	o.ReplaceSynonymsInHighlight = &v
	return o
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *IndexSettings) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *IndexSettings) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *IndexSettings) SetMinProximity(v int32) *IndexSettings {
	o.MinProximity = &v
	return o
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *IndexSettings) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *IndexSettings) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *IndexSettings) SetResponseFields(v []string) *IndexSettings {
	o.ResponseFields = v
	return o
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *IndexSettings) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *IndexSettings) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *IndexSettings) SetMaxFacetHits(v int32) *IndexSettings {
	o.MaxFacetHits = &v
	return o
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *IndexSettings) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *IndexSettings) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *IndexSettings) SetMaxValuesPerFacet(v int32) *IndexSettings {
	o.MaxValuesPerFacet = &v
	return o
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *IndexSettings) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *IndexSettings) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *IndexSettings) SetSortFacetValuesBy(v string) *IndexSettings {
	o.SortFacetValuesBy = &v
	return o
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *IndexSettings) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *IndexSettings) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *IndexSettings) SetAttributeCriteriaComputedByMinProximity(v bool) *IndexSettings {
	o.AttributeCriteriaComputedByMinProximity = &v
	return o
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *IndexSettings) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *IndexSettings) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *IndexSettings) SetRenderingContent(v *RenderingContent) *IndexSettings {
	o.RenderingContent = v
	return o
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *IndexSettings) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *IndexSettings) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *IndexSettings) SetEnableReRanking(v bool) *IndexSettings {
	o.EnableReRanking = &v
	return o
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise.
func (o *IndexSettings) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettings) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil || o.ReRankingApplyFilter == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter, true
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *IndexSettings) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter != nil {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given ReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *IndexSettings) SetReRankingApplyFilter(v *ReRankingApplyFilter) *IndexSettings {
	o.ReRankingApplyFilter = v
	return o
}

func (o IndexSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.AttributesForFaceting != nil {
		toSerialize["attributesForFaceting"] = o.AttributesForFaceting
	}
	if o.Replicas != nil {
		toSerialize["replicas"] = o.Replicas
	}
	if o.PaginationLimitedTo != nil {
		toSerialize["paginationLimitedTo"] = o.PaginationLimitedTo
	}
	if o.UnretrievableAttributes != nil {
		toSerialize["unretrievableAttributes"] = o.UnretrievableAttributes
	}
	if o.DisableTypoToleranceOnWords != nil {
		toSerialize["disableTypoToleranceOnWords"] = o.DisableTypoToleranceOnWords
	}
	if o.AttributesToTransliterate != nil {
		toSerialize["attributesToTransliterate"] = o.AttributesToTransliterate
	}
	if o.CamelCaseAttributes != nil {
		toSerialize["camelCaseAttributes"] = o.CamelCaseAttributes
	}
	if o.DecompoundedAttributes != nil {
		toSerialize["decompoundedAttributes"] = o.DecompoundedAttributes
	}
	if o.IndexLanguages != nil {
		toSerialize["indexLanguages"] = o.IndexLanguages
	}
	if o.DisablePrefixOnAttributes != nil {
		toSerialize["disablePrefixOnAttributes"] = o.DisablePrefixOnAttributes
	}
	if o.AllowCompressionOfIntegerArray != nil {
		toSerialize["allowCompressionOfIntegerArray"] = o.AllowCompressionOfIntegerArray
	}
	if o.NumericAttributesForFiltering != nil {
		toSerialize["numericAttributesForFiltering"] = o.NumericAttributesForFiltering
	}
	if o.SeparatorsToIndex != nil {
		toSerialize["separatorsToIndex"] = o.SeparatorsToIndex
	}
	if o.SearchableAttributes != nil {
		toSerialize["searchableAttributes"] = o.SearchableAttributes
	}
	if o.UserData != nil {
		toSerialize["userData"] = o.UserData
	}
	if o.CustomNormalization != nil {
		toSerialize["customNormalization"] = o.CustomNormalization
	}
	if o.AttributeForDistinct != nil {
		toSerialize["attributeForDistinct"] = o.AttributeForDistinct
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter != nil {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal IndexSettings: %w", err)
	}

	return serialized, nil
}

func (o IndexSettings) String() string {
	out := ""
	out += fmt.Sprintf("  attributesForFaceting=%v\n", o.AttributesForFaceting)
	out += fmt.Sprintf("  replicas=%v\n", o.Replicas)
	out += fmt.Sprintf("  paginationLimitedTo=%v\n", o.PaginationLimitedTo)
	out += fmt.Sprintf("  unretrievableAttributes=%v\n", o.UnretrievableAttributes)
	out += fmt.Sprintf("  disableTypoToleranceOnWords=%v\n", o.DisableTypoToleranceOnWords)
	out += fmt.Sprintf("  attributesToTransliterate=%v\n", o.AttributesToTransliterate)
	out += fmt.Sprintf("  camelCaseAttributes=%v\n", o.CamelCaseAttributes)
	out += fmt.Sprintf("  decompoundedAttributes=%v\n", o.DecompoundedAttributes)
	out += fmt.Sprintf("  indexLanguages=%v\n", o.IndexLanguages)
	out += fmt.Sprintf("  disablePrefixOnAttributes=%v\n", o.DisablePrefixOnAttributes)
	out += fmt.Sprintf("  allowCompressionOfIntegerArray=%v\n", o.AllowCompressionOfIntegerArray)
	out += fmt.Sprintf("  numericAttributesForFiltering=%v\n", o.NumericAttributesForFiltering)
	out += fmt.Sprintf("  separatorsToIndex=%v\n", o.SeparatorsToIndex)
	out += fmt.Sprintf("  searchableAttributes=%v\n", o.SearchableAttributes)
	out += fmt.Sprintf("  userData=%v\n", o.UserData)
	out += fmt.Sprintf("  customNormalization=%v\n", o.CustomNormalization)
	out += fmt.Sprintf("  attributeForDistinct=%v\n", o.AttributeForDistinct)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	return fmt.Sprintf("IndexSettings {\n%s}", out)
}
