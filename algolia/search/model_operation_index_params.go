// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// OperationIndexParams struct for OperationIndexParams.
type OperationIndexParams struct {
	Operation OperationType `json:"operation"`
	// Index name (case-sensitive).
	Destination string `json:"destination"`
	// **Only for copying.**  If you specify a scope, only the selected scopes are copied. Records and the other scopes are left unchanged. If you omit the `scope` parameter, everything is copied: records, settings, synonyms, and rules.
	Scope []ScopeType `json:"scope,omitempty"`
}

type OperationIndexParamsOption func(f *OperationIndexParams)

func WithOperationIndexParamsScope(val []ScopeType) OperationIndexParamsOption {
	return func(f *OperationIndexParams) {
		f.Scope = val
	}
}

// NewOperationIndexParams instantiates a new OperationIndexParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewOperationIndexParams(operation OperationType, destination string, opts ...OperationIndexParamsOption) *OperationIndexParams {
	this := &OperationIndexParams{}
	this.Operation = operation
	this.Destination = destination
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyOperationIndexParams return a pointer to an empty OperationIndexParams object.
func NewEmptyOperationIndexParams() *OperationIndexParams {
	return &OperationIndexParams{}
}

// GetOperation returns the Operation field value.
func (o *OperationIndexParams) GetOperation() OperationType {
	if o == nil {
		var ret OperationType
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *OperationIndexParams) GetOperationOk() (*OperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value.
func (o *OperationIndexParams) SetOperation(v OperationType) *OperationIndexParams {
	o.Operation = v
	return o
}

// GetDestination returns the Destination field value.
func (o *OperationIndexParams) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *OperationIndexParams) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value.
func (o *OperationIndexParams) SetDestination(v string) *OperationIndexParams {
	o.Destination = v
	return o
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *OperationIndexParams) GetScope() []ScopeType {
	if o == nil || o.Scope == nil {
		var ret []ScopeType
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationIndexParams) GetScopeOk() ([]ScopeType, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *OperationIndexParams) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given []ScopeType and assigns it to the Scope field.
func (o *OperationIndexParams) SetScope(v []ScopeType) *OperationIndexParams {
	o.Scope = v
	return o
}

func (o OperationIndexParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["operation"] = o.Operation
	}
	if true {
		toSerialize["destination"] = o.Destination
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal OperationIndexParams: %w", err)
	}

	return serialized, nil
}

func (o OperationIndexParams) String() string {
	out := ""
	out += fmt.Sprintf("  operation=%v\n", o.Operation)
	out += fmt.Sprintf("  destination=%v\n", o.Destination)
	out += fmt.Sprintf("  scope=%v\n", o.Scope)
	return fmt.Sprintf("OperationIndexParams {\n%s}", out)
}
