// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchHits struct for SearchHits.
type SearchHits struct {
	// Search results (hits).  Hits are records from your index that match the search criteria, augmented with additional attributes, such as, for highlighting.
	Hits []Hit `json:"hits"`
	// Search query.
	Query string `json:"query"`
	// URL-encoded string of all search parameters.
	Params               string `json:"params"`
	AdditionalProperties map[string]any
}

type _SearchHits SearchHits

// NewSearchHits instantiates a new SearchHits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchHits(hits []Hit, query string, params string) *SearchHits {
	this := &SearchHits{}
	this.Hits = hits
	this.Query = query
	this.Params = params
	return this
}

// NewEmptySearchHits return a pointer to an empty SearchHits object.
func NewEmptySearchHits() *SearchHits {
	return &SearchHits{}
}

// GetHits returns the Hits field value.
func (o *SearchHits) GetHits() []Hit {
	if o == nil {
		var ret []Hit
		return ret
	}

	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value
// and a boolean to check if the value has been set.
func (o *SearchHits) GetHitsOk() ([]Hit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hits, true
}

// SetHits sets field value.
func (o *SearchHits) SetHits(v *[]Hit) *SearchHits {
	o.Hits = *v
	return o
}

// GetQuery returns the Query field value.
func (o *SearchHits) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchHits) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value.
func (o *SearchHits) SetQuery(v string) *SearchHits {
	o.Query = v
	return o
}

// GetParams returns the Params field value.
func (o *SearchHits) GetParams() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *SearchHits) GetParamsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value.
func (o *SearchHits) SetParams(v string) *SearchHits {
	o.Params = v
	return o
}

func (o *SearchHits) SetAdditionalProperty(key string, value any) *SearchHits {
	if o.AdditionalProperties == nil {
		o.AdditionalProperties = make(map[string]any)
	}

	o.AdditionalProperties[key] = value

	return o
}

func (o SearchHits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["hits"] = o.Hits
	}
	if true {
		toSerialize["query"] = o.Query
	}
	if true {
		toSerialize["params"] = o.Params
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchHits: %w", err)
	}

	return serialized, nil
}

func (o *SearchHits) UnmarshalJSON(bytes []byte) error {
	varSearchHits := _SearchHits{}

	err := json.Unmarshal(bytes, &varSearchHits)
	if err != nil {
		return fmt.Errorf("failed to unmarshal SearchHits: %w", err)
	}

	*o = SearchHits(varSearchHits)

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
	if err != nil {
		return fmt.Errorf("failed to unmarshal additionalProperties in SearchHits: %w", err)
	}

	delete(additionalProperties, "hits")
	delete(additionalProperties, "query")
	delete(additionalProperties, "params")
	o.AdditionalProperties = additionalProperties

	return nil
}

func (o SearchHits) String() string {
	out := ""
	out += fmt.Sprintf("  hits=%v\n", o.Hits)
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  params=%v\n", o.Params)
	for key, value := range o.AdditionalProperties {
		out += fmt.Sprintf("  %s=%v\n", key, value)
	}
	return fmt.Sprintf("SearchHits {\n%s}", out)
}

type NullableSearchHits struct {
	value *SearchHits
	isSet bool
}

func (v NullableSearchHits) Get() *SearchHits {
	return v.value
}

func (v *NullableSearchHits) Set(val *SearchHits) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchHits) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchHits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchHits(val *SearchHits) *NullableSearchHits {
	return &NullableSearchHits{value: val, isSet: true}
}

func (v NullableSearchHits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableSearchHits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
