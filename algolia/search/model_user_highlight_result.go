// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// UserHighlightResult struct for UserHighlightResult
type UserHighlightResult struct {
	// Show highlighted section and words matched on a query.
	UserID map[string]HighlightResult `json:"userID"`
	// Show highlighted section and words matched on a query.
	ClusterName map[string]HighlightResult `json:"clusterName"`
}

// NewUserHighlightResult instantiates a new UserHighlightResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHighlightResult(userID map[string]HighlightResult, clusterName map[string]HighlightResult) *UserHighlightResult {
	this := &UserHighlightResult{}
	this.UserID = userID
	this.ClusterName = clusterName
	return this
}

// NewUserHighlightResultWithDefaults instantiates a new UserHighlightResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHighlightResultWithDefaults() *UserHighlightResult {
	this := &UserHighlightResult{}
	return this
}

// GetUserID returns the UserID field value
func (o *UserHighlightResult) GetUserID() map[string]HighlightResult {
	if o == nil {
		var ret map[string]HighlightResult
		return ret
	}

	return o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value
// and a boolean to check if the value has been set.
func (o *UserHighlightResult) GetUserIDOk() (*map[string]HighlightResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserID, true
}

// SetUserID sets field value
func (o *UserHighlightResult) SetUserID(v map[string]HighlightResult) {
	o.UserID = v
}

// GetClusterName returns the ClusterName field value
func (o *UserHighlightResult) GetClusterName() map[string]HighlightResult {
	if o == nil {
		var ret map[string]HighlightResult
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *UserHighlightResult) GetClusterNameOk() (*map[string]HighlightResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *UserHighlightResult) SetClusterName(v map[string]HighlightResult) {
	o.ClusterName = v
}

func (o UserHighlightResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["userID"] = o.UserID
	}
	if true {
		toSerialize["clusterName"] = o.ClusterName
	}
	return json.Marshal(toSerialize)
}

func (o UserHighlightResult) String() string {
	out := ""
	out += fmt.Sprintf("  userID=%v\n", o.UserID)
	out += fmt.Sprintf("  clusterName=%v\n", o.ClusterName)
	return fmt.Sprintf("UserHighlightResult {\n%s}", out)
}

type NullableUserHighlightResult struct {
	value *UserHighlightResult
	isSet bool
}

func (v NullableUserHighlightResult) Get() *UserHighlightResult {
	return v.value
}

func (v *NullableUserHighlightResult) Set(val *UserHighlightResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHighlightResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHighlightResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHighlightResult(val *UserHighlightResult) *NullableUserHighlightResult {
	return &NullableUserHighlightResult{value: val, isSet: true}
}

func (v NullableUserHighlightResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHighlightResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
