// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// DictionaryEntryType Whether a dictionary entry is provided by Algolia (standard), or has been added by you (custom).
type DictionaryEntryType string

// List of dictionaryEntryType.
const (
	DICTIONARY_ENTRY_TYPE_CUSTOM   DictionaryEntryType = "custom"
	DICTIONARY_ENTRY_TYPE_STANDARD DictionaryEntryType = "standard"
)

// All allowed values of DictionaryEntryType enum.
var AllowedDictionaryEntryTypeEnumValues = []DictionaryEntryType{
	"custom",
	"standard",
}

func (v *DictionaryEntryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'DictionaryEntryType': %w", string(src), err)
	}
	enumTypeValue := DictionaryEntryType(value)
	for _, existing := range AllowedDictionaryEntryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DictionaryEntryType", value)
}

// NewDictionaryEntryTypeFromValue returns a pointer to a valid DictionaryEntryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewDictionaryEntryTypeFromValue(v string) (*DictionaryEntryType, error) {
	ev := DictionaryEntryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DictionaryEntryType: valid values are %v", v, AllowedDictionaryEntryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v DictionaryEntryType) IsValid() bool {
	for _, existing := range AllowedDictionaryEntryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dictionaryEntryType value.
func (v DictionaryEntryType) Ptr() *DictionaryEntryType {
	return &v
}
