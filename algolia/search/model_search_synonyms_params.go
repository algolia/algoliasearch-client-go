// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchSynonymsParams struct for SearchSynonymsParams.
type SearchSynonymsParams struct {
	// Search query.
	Query *string      `json:"query,omitempty"`
	Type  *SynonymType `json:"type,omitempty"`
	// Page of search results to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
}

type SearchSynonymsParamsOption func(f *SearchSynonymsParams)

func WithSearchSynonymsParamsQuery(val string) SearchSynonymsParamsOption {
	return func(f *SearchSynonymsParams) {
		f.Query = &val
	}
}

func WithSearchSynonymsParamsType(val SynonymType) SearchSynonymsParamsOption {
	return func(f *SearchSynonymsParams) {
		f.Type = &val
	}
}

func WithSearchSynonymsParamsPage(val int32) SearchSynonymsParamsOption {
	return func(f *SearchSynonymsParams) {
		f.Page = &val
	}
}

func WithSearchSynonymsParamsHitsPerPage(val int32) SearchSynonymsParamsOption {
	return func(f *SearchSynonymsParams) {
		f.HitsPerPage = &val
	}
}

// NewSearchSynonymsParams instantiates a new SearchSynonymsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchSynonymsParams(opts ...SearchSynonymsParamsOption) *SearchSynonymsParams {
	this := &SearchSynonymsParams{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySearchSynonymsParams return a pointer to an empty SearchSynonymsParams object.
func NewEmptySearchSynonymsParams() *SearchSynonymsParams {
	return &SearchSynonymsParams{}
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchSynonymsParams) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSynonymsParams) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchSynonymsParams) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchSynonymsParams) SetQuery(v string) *SearchSynonymsParams {
	o.Query = &v
	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchSynonymsParams) GetType() SynonymType {
	if o == nil || o.Type == nil {
		var ret SynonymType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSynonymsParams) GetTypeOk() (*SynonymType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchSynonymsParams) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SynonymType and assigns it to the Type field.
func (o *SearchSynonymsParams) SetType(v SynonymType) *SearchSynonymsParams {
	o.Type = &v
	return o
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchSynonymsParams) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSynonymsParams) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchSynonymsParams) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchSynonymsParams) SetPage(v int32) *SearchSynonymsParams {
	o.Page = &v
	return o
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *SearchSynonymsParams) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSynonymsParams) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *SearchSynonymsParams) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *SearchSynonymsParams) SetHitsPerPage(v int32) *SearchSynonymsParams {
	o.HitsPerPage = &v
	return o
}

func (o SearchSynonymsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchSynonymsParams: %w", err)
	}

	return serialized, nil
}

func (o SearchSynonymsParams) String() string {
	out := ""
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	return fmt.Sprintf("SearchSynonymsParams {\n%s}", out)
}

type NullableSearchSynonymsParams struct {
	value *SearchSynonymsParams
	isSet bool
}

func (v NullableSearchSynonymsParams) Get() *SearchSynonymsParams {
	return v.value
}

func (v *NullableSearchSynonymsParams) Set(val *SearchSynonymsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSynonymsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSynonymsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSynonymsParams(val *SearchSynonymsParams) *NullableSearchSynonymsParams {
	return &NullableSearchSynonymsParams{value: val, isSet: true}
}

func (v NullableSearchSynonymsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableSearchSynonymsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
