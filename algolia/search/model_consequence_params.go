// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// ConsequenceParams struct for ConsequenceParams
type ConsequenceParams struct {
	// Overrides the query parameter and performs a more generic search that can be used to find \"similar\" results.
	SimilarQuery *string `json:"similarQuery,omitempty"`
	// Filter the query with numeric, facet and/or tag filters.
	Filters         *string          `json:"filters,omitempty"`
	FacetFilters    *FacetFilters    `json:"facetFilters,omitempty"`
	OptionalFilters *OptionalFilters `json:"optionalFilters,omitempty"`
	NumericFilters  *NumericFilters  `json:"numericFilters,omitempty"`
	TagFilters      *TagFilters      `json:"tagFilters,omitempty"`
	// Determines how to calculate the total score for filtering.
	SumOrFiltersScores *bool `json:"sumOrFiltersScores,omitempty"`
	// Retrieve facets and their facet values.
	Facets []string `json:"facets,omitempty"`
	// Maximum number of facet values to return for each facet during a regular search.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Force faceting to be applied after de-duplication (via the Distinct setting).
	FacetingAfterDistinct *bool `json:"facetingAfterDistinct,omitempty"`
	// Controls how facet values are fetched.
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// Specify the page to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Specify the offset of the first hit to return.
	Offset *int32 `json:"offset,omitempty"`
	// Set the number of hits to retrieve (used only with offset).
	Length *int32 `json:"length,omitempty"`
	// Search for entries around a central geolocation, enabling a geo search within a circular area.
	AroundLatLng *string `json:"aroundLatLng,omitempty"`
	// Search for entries around a given location automatically computed from the requester's IP address.
	AroundLatLngViaIP *bool         `json:"aroundLatLngViaIP,omitempty"`
	AroundRadius      *AroundRadius `json:"aroundRadius,omitempty"`
	// Precision of geo search (in meters), to add grouping by geo location to the ranking formula.
	AroundPrecision *int32 `json:"aroundPrecision,omitempty"`
	// Minimum radius (in meters) used for a geo search when aroundRadius is not set.
	MinimumAroundRadius *int32 `json:"minimumAroundRadius,omitempty"`
	// Search inside a rectangular area (in geo coordinates).
	InsideBoundingBox []float64 `json:"insideBoundingBox,omitempty"`
	// Search inside a polygon (in geo coordinates).
	InsidePolygon []float64 `json:"insidePolygon,omitempty"`
	// This parameter changes the default values of certain parameters and settings that work best for a natural language query, such as ignorePlurals, removeStopWords, removeWordsIfNoResults, analyticsTags and ruleContexts. These parameters and settings work well together when the query is formatted in natural language instead of keywords, for example when your user performs a voice search.
	NaturalLanguages []string `json:"naturalLanguages,omitempty"`
	// Enables contextual rules.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// Define the impact of the Personalization feature.
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Associates a certain user token with the current search.
	UserToken *string `json:"userToken,omitempty"`
	// Retrieve detailed ranking information.
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// Enable the Click Analytics feature.
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Whether the current query will be taken into account in the Analytics.
	Analytics *bool `json:"analytics,omitempty"`
	// List of tags to apply to the query for analytics purposes.
	AnalyticsTags []string `json:"analyticsTags,omitempty"`
	// Whether to include or exclude a query from the processing-time percentile computation.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Whether this search should participate in running AB tests.
	EnableABTest *bool `json:"enableABTest,omitempty"`
	// Whether this search should use AI Re-Ranking.
	EnableReRanking      *bool                        `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter NullableReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
	// The complete list of attributes that will be used for faceting.
	AttributesForFaceting []string `json:"attributesForFaceting,omitempty"`
	// This parameter controls which attributes to retrieve and which not to retrieve.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Restricts a given query to look in only a subset of your searchable attributes.
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Controls how Algolia should sort your results.
	Ranking []string `json:"ranking,omitempty"`
	// Specifies the custom ranking criterion.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Controls the relevancy threshold below which less relevant results aren't included in the results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// List of attributes to highlight.
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// List of attributes to snippet, with an optional maximum number of words to snippet.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// The HTML string to insert before the highlighted parts in all highlight and snippet results.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// The HTML string to insert after the highlighted parts in all highlight and snippet results.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Restrict highlighting and snippeting to items that matched the query.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Set the number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with 1 typo.
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with 2 typos.
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers (\"numeric tokens\") in the query string.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// List of attributes on which you want to disable typo tolerance.
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// List of characters that the engine shouldn't automatically normalize.
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Sets the languages to be used by language-specific settings and functionalities such as ignorePlurals, removeStopWords, and CJK word-detection.
	QueryLanguages []string `json:"queryLanguages,omitempty"`
	// Splits compound words into their composing atoms in the query.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Whether Rules should be globally enabled.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Enable the Personalization feature.
	EnablePersonalization  *bool                                      `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType                                 `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults                    `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                                      `json:"mode,omitempty"`
	SemanticSearch         *IndexSettingsAsSearchParamsSemanticSearch `json:"semanticSearch,omitempty"`
	// Enables the advanced query syntax.
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// A list of words that should be considered as optional when found in the query.
	OptionalWords []string `json:"optionalWords,omitempty"`
	// List of attributes on which you want to disable the exact ranking criterion.
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// List of alternatives that should be considered an exact match by the exact ranking criterion.
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Allows you to specify which advanced syntax features are active when ‘advancedSyntax' is enabled.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	// Enriches the API’s response with meta-information as to how the query was processed.
	Explain  []string  `json:"explain,omitempty"`
	Distinct *Distinct `json:"distinct,omitempty"`
	// Name of the de-duplication attribute to be used with the distinct feature.
	AttributeForDistinct *string `json:"attributeForDistinct,omitempty"`
	// Whether to take into account an index's synonyms for a particular search.
	Synonyms *bool `json:"synonyms,omitempty"`
	// Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Precision of the proximity ranking criterion.
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Choose which fields to return in the API response. This parameters applies to search and browse queries.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet hits to return during a search for facet values. For performance reasons, the maximum allowed number of returned values is 100.
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// When attribute is ranked above proximity in your ranking formula, proximity is used to select which searchable attribute is matched in the attribute ranking stage.
	AttributeCriteriaComputedByMinProximity *bool                  `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent      `json:"renderingContent,omitempty"`
	Query                                   *ConsequenceQuery      `json:"query,omitempty"`
	AutomaticFacetFilters                   *AutomaticFacetFilters `json:"automaticFacetFilters,omitempty"`
	AutomaticOptionalFacetFilters           *AutomaticFacetFilters `json:"automaticOptionalFacetFilters,omitempty"`
}

type ConsequenceParamsOption func(f *ConsequenceParams)

func WithConsequenceParamsSimilarQuery(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.SimilarQuery = &val
	}
}

func WithConsequenceParamsFilters(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Filters = &val
	}
}

func WithConsequenceParamsFacetFilters(val FacetFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.FacetFilters = &val
	}
}

func WithConsequenceParamsOptionalFilters(val OptionalFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.OptionalFilters = &val
	}
}

func WithConsequenceParamsNumericFilters(val NumericFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.NumericFilters = &val
	}
}

func WithConsequenceParamsTagFilters(val TagFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.TagFilters = &val
	}
}

func WithConsequenceParamsSumOrFiltersScores(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.SumOrFiltersScores = &val
	}
}

func WithConsequenceParamsFacets(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Facets = val
	}
}

func WithConsequenceParamsMaxValuesPerFacet(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MaxValuesPerFacet = &val
	}
}

func WithConsequenceParamsFacetingAfterDistinct(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.FacetingAfterDistinct = &val
	}
}

func WithConsequenceParamsSortFacetValuesBy(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.SortFacetValuesBy = &val
	}
}

func WithConsequenceParamsPage(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Page = &val
	}
}

func WithConsequenceParamsOffset(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Offset = &val
	}
}

func WithConsequenceParamsLength(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Length = &val
	}
}

func WithConsequenceParamsAroundLatLng(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AroundLatLng = &val
	}
}

func WithConsequenceParamsAroundLatLngViaIP(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AroundLatLngViaIP = &val
	}
}

func WithConsequenceParamsAroundRadius(val AroundRadius) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AroundRadius = &val
	}
}

func WithConsequenceParamsAroundPrecision(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AroundPrecision = &val
	}
}

func WithConsequenceParamsMinimumAroundRadius(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MinimumAroundRadius = &val
	}
}

func WithConsequenceParamsInsideBoundingBox(val []float64) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.InsideBoundingBox = val
	}
}

func WithConsequenceParamsInsidePolygon(val []float64) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.InsidePolygon = val
	}
}

func WithConsequenceParamsNaturalLanguages(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.NaturalLanguages = val
	}
}

func WithConsequenceParamsRuleContexts(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RuleContexts = val
	}
}

func WithConsequenceParamsPersonalizationImpact(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.PersonalizationImpact = &val
	}
}

func WithConsequenceParamsUserToken(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.UserToken = &val
	}
}

func WithConsequenceParamsGetRankingInfo(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.GetRankingInfo = &val
	}
}

func WithConsequenceParamsClickAnalytics(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.ClickAnalytics = &val
	}
}

func WithConsequenceParamsAnalytics(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Analytics = &val
	}
}

func WithConsequenceParamsAnalyticsTags(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AnalyticsTags = val
	}
}

func WithConsequenceParamsPercentileComputation(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.PercentileComputation = &val
	}
}

func WithConsequenceParamsEnableABTest(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.EnableABTest = &val
	}
}

func WithConsequenceParamsEnableReRanking(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.EnableReRanking = &val
	}
}

func WithConsequenceParamsReRankingApplyFilter(val NullableReRankingApplyFilter) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.ReRankingApplyFilter = val
	}
}

func WithConsequenceParamsAttributesForFaceting(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributesForFaceting = val
	}
}

func WithConsequenceParamsAttributesToRetrieve(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributesToRetrieve = val
	}
}

func WithConsequenceParamsRestrictSearchableAttributes(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RestrictSearchableAttributes = val
	}
}

func WithConsequenceParamsRanking(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Ranking = val
	}
}

func WithConsequenceParamsCustomRanking(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.CustomRanking = val
	}
}

func WithConsequenceParamsRelevancyStrictness(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RelevancyStrictness = &val
	}
}

func WithConsequenceParamsAttributesToHighlight(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributesToHighlight = val
	}
}

func WithConsequenceParamsAttributesToSnippet(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributesToSnippet = val
	}
}

func WithConsequenceParamsHighlightPreTag(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.HighlightPreTag = &val
	}
}

func WithConsequenceParamsHighlightPostTag(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.HighlightPostTag = &val
	}
}

func WithConsequenceParamsSnippetEllipsisText(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.SnippetEllipsisText = &val
	}
}

func WithConsequenceParamsRestrictHighlightAndSnippetArrays(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithConsequenceParamsHitsPerPage(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.HitsPerPage = &val
	}
}

func WithConsequenceParamsMinWordSizefor1Typo(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithConsequenceParamsMinWordSizefor2Typos(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithConsequenceParamsTypoTolerance(val TypoTolerance) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.TypoTolerance = &val
	}
}

func WithConsequenceParamsAllowTyposOnNumericTokens(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithConsequenceParamsDisableTypoToleranceOnAttributes(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithConsequenceParamsIgnorePlurals(val IgnorePlurals) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.IgnorePlurals = &val
	}
}

func WithConsequenceParamsRemoveStopWords(val RemoveStopWords) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RemoveStopWords = &val
	}
}

func WithConsequenceParamsKeepDiacriticsOnCharacters(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithConsequenceParamsQueryLanguages(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.QueryLanguages = val
	}
}

func WithConsequenceParamsDecompoundQuery(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.DecompoundQuery = &val
	}
}

func WithConsequenceParamsEnableRules(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.EnableRules = &val
	}
}

func WithConsequenceParamsEnablePersonalization(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.EnablePersonalization = &val
	}
}

func WithConsequenceParamsQueryType(val QueryType) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.QueryType = &val
	}
}

func WithConsequenceParamsRemoveWordsIfNoResults(val RemoveWordsIfNoResults) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithConsequenceParamsMode(val Mode) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Mode = &val
	}
}

func WithConsequenceParamsSemanticSearch(val IndexSettingsAsSearchParamsSemanticSearch) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.SemanticSearch = &val
	}
}

func WithConsequenceParamsAdvancedSyntax(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AdvancedSyntax = &val
	}
}

func WithConsequenceParamsOptionalWords(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.OptionalWords = val
	}
}

func WithConsequenceParamsDisableExactOnAttributes(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.DisableExactOnAttributes = val
	}
}

func WithConsequenceParamsExactOnSingleWordQuery(val ExactOnSingleWordQuery) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithConsequenceParamsAlternativesAsExact(val []AlternativesAsExact) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AlternativesAsExact = val
	}
}

func WithConsequenceParamsAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithConsequenceParamsExplain(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Explain = val
	}
}

func WithConsequenceParamsDistinct(val Distinct) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Distinct = &val
	}
}

func WithConsequenceParamsAttributeForDistinct(val string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributeForDistinct = &val
	}
}

func WithConsequenceParamsSynonyms(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Synonyms = &val
	}
}

func WithConsequenceParamsReplaceSynonymsInHighlight(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithConsequenceParamsMinProximity(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MinProximity = &val
	}
}

func WithConsequenceParamsResponseFields(val []string) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.ResponseFields = val
	}
}

func WithConsequenceParamsMaxFacetHits(val int32) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.MaxFacetHits = &val
	}
}

func WithConsequenceParamsAttributeCriteriaComputedByMinProximity(val bool) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithConsequenceParamsRenderingContent(val RenderingContent) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.RenderingContent = &val
	}
}

func WithConsequenceParamsQuery(val ConsequenceQuery) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.Query = &val
	}
}

func WithConsequenceParamsAutomaticFacetFilters(val AutomaticFacetFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AutomaticFacetFilters = &val
	}
}

func WithConsequenceParamsAutomaticOptionalFacetFilters(val AutomaticFacetFilters) ConsequenceParamsOption {
	return func(f *ConsequenceParams) {
		f.AutomaticOptionalFacetFilters = &val
	}
}

// NewConsequenceParams instantiates a new ConsequenceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsequenceParams(opts ...ConsequenceParamsOption) *ConsequenceParams {
	this := &ConsequenceParams{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewConsequenceParamsWithDefaults instantiates a new ConsequenceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsequenceParamsWithDefaults() *ConsequenceParams {
	this := &ConsequenceParams{}
	var similarQuery string = ""
	this.SimilarQuery = &similarQuery
	var filters string = ""
	this.Filters = &filters
	var sumOrFiltersScores bool = false
	this.SumOrFiltersScores = &sumOrFiltersScores
	var maxValuesPerFacet int32 = 100
	this.MaxValuesPerFacet = &maxValuesPerFacet
	var facetingAfterDistinct bool = false
	this.FacetingAfterDistinct = &facetingAfterDistinct
	var sortFacetValuesBy string = "count"
	this.SortFacetValuesBy = &sortFacetValuesBy
	var page int32 = 0
	this.Page = &page
	var aroundLatLng string = ""
	this.AroundLatLng = &aroundLatLng
	var aroundLatLngViaIP bool = false
	this.AroundLatLngViaIP = &aroundLatLngViaIP
	var aroundPrecision int32 = 10
	this.AroundPrecision = &aroundPrecision
	var personalizationImpact int32 = 100
	this.PersonalizationImpact = &personalizationImpact
	var getRankingInfo bool = false
	this.GetRankingInfo = &getRankingInfo
	var clickAnalytics bool = false
	this.ClickAnalytics = &clickAnalytics
	var analytics bool = true
	this.Analytics = &analytics
	var percentileComputation bool = true
	this.PercentileComputation = &percentileComputation
	var enableABTest bool = true
	this.EnableABTest = &enableABTest
	var enableReRanking bool = true
	this.EnableReRanking = &enableReRanking
	var relevancyStrictness int32 = 100
	this.RelevancyStrictness = &relevancyStrictness
	var highlightPreTag string = "<em>"
	this.HighlightPreTag = &highlightPreTag
	var highlightPostTag string = "</em>"
	this.HighlightPostTag = &highlightPostTag
	var snippetEllipsisText string = "…"
	this.SnippetEllipsisText = &snippetEllipsisText
	var restrictHighlightAndSnippetArrays bool = false
	this.RestrictHighlightAndSnippetArrays = &restrictHighlightAndSnippetArrays
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	var minWordSizefor1Typo int32 = 4
	this.MinWordSizefor1Typo = &minWordSizefor1Typo
	var minWordSizefor2Typos int32 = 8
	this.MinWordSizefor2Typos = &minWordSizefor2Typos
	var allowTyposOnNumericTokens bool = true
	this.AllowTyposOnNumericTokens = &allowTyposOnNumericTokens
	var keepDiacriticsOnCharacters string = ""
	this.KeepDiacriticsOnCharacters = &keepDiacriticsOnCharacters
	var decompoundQuery bool = true
	this.DecompoundQuery = &decompoundQuery
	var enableRules bool = true
	this.EnableRules = &enableRules
	var enablePersonalization bool = false
	this.EnablePersonalization = &enablePersonalization
	var queryType QueryType = QUERYTYPE_PREFIX_LAST
	this.QueryType = &queryType
	var removeWordsIfNoResults RemoveWordsIfNoResults = REMOVEWORDSIFNORESULTS_NONE
	this.RemoveWordsIfNoResults = &removeWordsIfNoResults
	var mode Mode = MODE_KEYWORD_SEARCH
	this.Mode = &mode
	var advancedSyntax bool = false
	this.AdvancedSyntax = &advancedSyntax
	var exactOnSingleWordQuery ExactOnSingleWordQuery = EXACTONSINGLEWORDQUERY_ATTRIBUTE
	this.ExactOnSingleWordQuery = &exactOnSingleWordQuery
	var synonyms bool = true
	this.Synonyms = &synonyms
	var replaceSynonymsInHighlight bool = false
	this.ReplaceSynonymsInHighlight = &replaceSynonymsInHighlight
	var minProximity int32 = 1
	this.MinProximity = &minProximity
	var maxFacetHits int32 = 10
	this.MaxFacetHits = &maxFacetHits
	var attributeCriteriaComputedByMinProximity bool = false
	this.AttributeCriteriaComputedByMinProximity = &attributeCriteriaComputedByMinProximity
	return this
}

// GetSimilarQuery returns the SimilarQuery field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSimilarQuery() string {
	if o == nil || o.SimilarQuery == nil {
		var ret string
		return ret
	}
	return *o.SimilarQuery
}

// GetSimilarQueryOk returns a tuple with the SimilarQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSimilarQueryOk() (*string, bool) {
	if o == nil || o.SimilarQuery == nil {
		return nil, false
	}
	return o.SimilarQuery, true
}

// HasSimilarQuery returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSimilarQuery() bool {
	if o != nil && o.SimilarQuery != nil {
		return true
	}

	return false
}

// SetSimilarQuery gets a reference to the given string and assigns it to the SimilarQuery field.
func (o *ConsequenceParams) SetSimilarQuery(v string) {
	o.SimilarQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *ConsequenceParams) SetFilters(v string) {
	o.Filters = &v
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *ConsequenceParams) SetFacetFilters(v FacetFilters) {
	o.FacetFilters = &v
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *ConsequenceParams) SetOptionalFilters(v OptionalFilters) {
	o.OptionalFilters = &v
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *ConsequenceParams) SetNumericFilters(v NumericFilters) {
	o.NumericFilters = &v
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetTagFilters() TagFilters {
	if o == nil || o.TagFilters == nil {
		var ret TagFilters
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetTagFiltersOk() (*TagFilters, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given TagFilters and assigns it to the TagFilters field.
func (o *ConsequenceParams) SetTagFilters(v TagFilters) {
	o.TagFilters = &v
}

// GetSumOrFiltersScores returns the SumOrFiltersScores field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSumOrFiltersScores() bool {
	if o == nil || o.SumOrFiltersScores == nil {
		var ret bool
		return ret
	}
	return *o.SumOrFiltersScores
}

// GetSumOrFiltersScoresOk returns a tuple with the SumOrFiltersScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSumOrFiltersScoresOk() (*bool, bool) {
	if o == nil || o.SumOrFiltersScores == nil {
		return nil, false
	}
	return o.SumOrFiltersScores, true
}

// HasSumOrFiltersScores returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSumOrFiltersScores() bool {
	if o != nil && o.SumOrFiltersScores != nil {
		return true
	}

	return false
}

// SetSumOrFiltersScores gets a reference to the given bool and assigns it to the SumOrFiltersScores field.
func (o *ConsequenceParams) SetSumOrFiltersScores(v bool) {
	o.SumOrFiltersScores = &v
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *ConsequenceParams) GetFacets() []string {
	if o == nil || o.Facets == nil {
		var ret []string
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetFacetsOk() ([]string, bool) {
	if o == nil || o.Facets == nil {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *ConsequenceParams) HasFacets() bool {
	if o != nil && o.Facets != nil {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []string and assigns it to the Facets field.
func (o *ConsequenceParams) SetFacets(v []string) {
	o.Facets = v
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *ConsequenceParams) SetMaxValuesPerFacet(v int32) {
	o.MaxValuesPerFacet = &v
}

// GetFacetingAfterDistinct returns the FacetingAfterDistinct field value if set, zero value otherwise.
func (o *ConsequenceParams) GetFacetingAfterDistinct() bool {
	if o == nil || o.FacetingAfterDistinct == nil {
		var ret bool
		return ret
	}
	return *o.FacetingAfterDistinct
}

// GetFacetingAfterDistinctOk returns a tuple with the FacetingAfterDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetFacetingAfterDistinctOk() (*bool, bool) {
	if o == nil || o.FacetingAfterDistinct == nil {
		return nil, false
	}
	return o.FacetingAfterDistinct, true
}

// HasFacetingAfterDistinct returns a boolean if a field has been set.
func (o *ConsequenceParams) HasFacetingAfterDistinct() bool {
	if o != nil && o.FacetingAfterDistinct != nil {
		return true
	}

	return false
}

// SetFacetingAfterDistinct gets a reference to the given bool and assigns it to the FacetingAfterDistinct field.
func (o *ConsequenceParams) SetFacetingAfterDistinct(v bool) {
	o.FacetingAfterDistinct = &v
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *ConsequenceParams) SetSortFacetValuesBy(v string) {
	o.SortFacetValuesBy = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ConsequenceParams) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ConsequenceParams) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *ConsequenceParams) SetPage(v int32) {
	o.Page = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ConsequenceParams) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ConsequenceParams) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ConsequenceParams) SetOffset(v int32) {
	o.Offset = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ConsequenceParams) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ConsequenceParams) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *ConsequenceParams) SetLength(v int32) {
	o.Length = &v
}

// GetAroundLatLng returns the AroundLatLng field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAroundLatLng() string {
	if o == nil || o.AroundLatLng == nil {
		var ret string
		return ret
	}
	return *o.AroundLatLng
}

// GetAroundLatLngOk returns a tuple with the AroundLatLng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAroundLatLngOk() (*string, bool) {
	if o == nil || o.AroundLatLng == nil {
		return nil, false
	}
	return o.AroundLatLng, true
}

// HasAroundLatLng returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAroundLatLng() bool {
	if o != nil && o.AroundLatLng != nil {
		return true
	}

	return false
}

// SetAroundLatLng gets a reference to the given string and assigns it to the AroundLatLng field.
func (o *ConsequenceParams) SetAroundLatLng(v string) {
	o.AroundLatLng = &v
}

// GetAroundLatLngViaIP returns the AroundLatLngViaIP field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAroundLatLngViaIP() bool {
	if o == nil || o.AroundLatLngViaIP == nil {
		var ret bool
		return ret
	}
	return *o.AroundLatLngViaIP
}

// GetAroundLatLngViaIPOk returns a tuple with the AroundLatLngViaIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAroundLatLngViaIPOk() (*bool, bool) {
	if o == nil || o.AroundLatLngViaIP == nil {
		return nil, false
	}
	return o.AroundLatLngViaIP, true
}

// HasAroundLatLngViaIP returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAroundLatLngViaIP() bool {
	if o != nil && o.AroundLatLngViaIP != nil {
		return true
	}

	return false
}

// SetAroundLatLngViaIP gets a reference to the given bool and assigns it to the AroundLatLngViaIP field.
func (o *ConsequenceParams) SetAroundLatLngViaIP(v bool) {
	o.AroundLatLngViaIP = &v
}

// GetAroundRadius returns the AroundRadius field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAroundRadius() AroundRadius {
	if o == nil || o.AroundRadius == nil {
		var ret AroundRadius
		return ret
	}
	return *o.AroundRadius
}

// GetAroundRadiusOk returns a tuple with the AroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAroundRadiusOk() (*AroundRadius, bool) {
	if o == nil || o.AroundRadius == nil {
		return nil, false
	}
	return o.AroundRadius, true
}

// HasAroundRadius returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAroundRadius() bool {
	if o != nil && o.AroundRadius != nil {
		return true
	}

	return false
}

// SetAroundRadius gets a reference to the given AroundRadius and assigns it to the AroundRadius field.
func (o *ConsequenceParams) SetAroundRadius(v AroundRadius) {
	o.AroundRadius = &v
}

// GetAroundPrecision returns the AroundPrecision field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAroundPrecision() int32 {
	if o == nil || o.AroundPrecision == nil {
		var ret int32
		return ret
	}
	return *o.AroundPrecision
}

// GetAroundPrecisionOk returns a tuple with the AroundPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAroundPrecisionOk() (*int32, bool) {
	if o == nil || o.AroundPrecision == nil {
		return nil, false
	}
	return o.AroundPrecision, true
}

// HasAroundPrecision returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAroundPrecision() bool {
	if o != nil && o.AroundPrecision != nil {
		return true
	}

	return false
}

// SetAroundPrecision gets a reference to the given int32 and assigns it to the AroundPrecision field.
func (o *ConsequenceParams) SetAroundPrecision(v int32) {
	o.AroundPrecision = &v
}

// GetMinimumAroundRadius returns the MinimumAroundRadius field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMinimumAroundRadius() int32 {
	if o == nil || o.MinimumAroundRadius == nil {
		var ret int32
		return ret
	}
	return *o.MinimumAroundRadius
}

// GetMinimumAroundRadiusOk returns a tuple with the MinimumAroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMinimumAroundRadiusOk() (*int32, bool) {
	if o == nil || o.MinimumAroundRadius == nil {
		return nil, false
	}
	return o.MinimumAroundRadius, true
}

// HasMinimumAroundRadius returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMinimumAroundRadius() bool {
	if o != nil && o.MinimumAroundRadius != nil {
		return true
	}

	return false
}

// SetMinimumAroundRadius gets a reference to the given int32 and assigns it to the MinimumAroundRadius field.
func (o *ConsequenceParams) SetMinimumAroundRadius(v int32) {
	o.MinimumAroundRadius = &v
}

// GetInsideBoundingBox returns the InsideBoundingBox field value if set, zero value otherwise.
func (o *ConsequenceParams) GetInsideBoundingBox() []float64 {
	if o == nil || o.InsideBoundingBox == nil {
		var ret []float64
		return ret
	}
	return o.InsideBoundingBox
}

// GetInsideBoundingBoxOk returns a tuple with the InsideBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetInsideBoundingBoxOk() ([]float64, bool) {
	if o == nil || o.InsideBoundingBox == nil {
		return nil, false
	}
	return o.InsideBoundingBox, true
}

// HasInsideBoundingBox returns a boolean if a field has been set.
func (o *ConsequenceParams) HasInsideBoundingBox() bool {
	if o != nil && o.InsideBoundingBox != nil {
		return true
	}

	return false
}

// SetInsideBoundingBox gets a reference to the given []float64 and assigns it to the InsideBoundingBox field.
func (o *ConsequenceParams) SetInsideBoundingBox(v []float64) {
	o.InsideBoundingBox = v
}

// GetInsidePolygon returns the InsidePolygon field value if set, zero value otherwise.
func (o *ConsequenceParams) GetInsidePolygon() []float64 {
	if o == nil || o.InsidePolygon == nil {
		var ret []float64
		return ret
	}
	return o.InsidePolygon
}

// GetInsidePolygonOk returns a tuple with the InsidePolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetInsidePolygonOk() ([]float64, bool) {
	if o == nil || o.InsidePolygon == nil {
		return nil, false
	}
	return o.InsidePolygon, true
}

// HasInsidePolygon returns a boolean if a field has been set.
func (o *ConsequenceParams) HasInsidePolygon() bool {
	if o != nil && o.InsidePolygon != nil {
		return true
	}

	return false
}

// SetInsidePolygon gets a reference to the given []float64 and assigns it to the InsidePolygon field.
func (o *ConsequenceParams) SetInsidePolygon(v []float64) {
	o.InsidePolygon = v
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *ConsequenceParams) GetNaturalLanguages() []string {
	if o == nil || o.NaturalLanguages == nil {
		var ret []string
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetNaturalLanguagesOk() ([]string, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *ConsequenceParams) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []string and assigns it to the NaturalLanguages field.
func (o *ConsequenceParams) SetNaturalLanguages(v []string) {
	o.NaturalLanguages = v
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *ConsequenceParams) SetRuleContexts(v []string) {
	o.RuleContexts = v
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *ConsequenceParams) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *ConsequenceParams) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *ConsequenceParams) SetPersonalizationImpact(v int32) {
	o.PersonalizationImpact = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *ConsequenceParams) GetUserToken() string {
	if o == nil || o.UserToken == nil {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetUserTokenOk() (*string, bool) {
	if o == nil || o.UserToken == nil {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *ConsequenceParams) HasUserToken() bool {
	if o != nil && o.UserToken != nil {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *ConsequenceParams) SetUserToken(v string) {
	o.UserToken = &v
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *ConsequenceParams) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *ConsequenceParams) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *ConsequenceParams) SetGetRankingInfo(v bool) {
	o.GetRankingInfo = &v
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *ConsequenceParams) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *ConsequenceParams) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *ConsequenceParams) SetClickAnalytics(v bool) {
	o.ClickAnalytics = &v
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *ConsequenceParams) SetAnalytics(v bool) {
	o.Analytics = &v
}

// GetAnalyticsTags returns the AnalyticsTags field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAnalyticsTags() []string {
	if o == nil || o.AnalyticsTags == nil {
		var ret []string
		return ret
	}
	return o.AnalyticsTags
}

// GetAnalyticsTagsOk returns a tuple with the AnalyticsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAnalyticsTagsOk() ([]string, bool) {
	if o == nil || o.AnalyticsTags == nil {
		return nil, false
	}
	return o.AnalyticsTags, true
}

// HasAnalyticsTags returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAnalyticsTags() bool {
	if o != nil && o.AnalyticsTags != nil {
		return true
	}

	return false
}

// SetAnalyticsTags gets a reference to the given []string and assigns it to the AnalyticsTags field.
func (o *ConsequenceParams) SetAnalyticsTags(v []string) {
	o.AnalyticsTags = v
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *ConsequenceParams) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *ConsequenceParams) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *ConsequenceParams) SetPercentileComputation(v bool) {
	o.PercentileComputation = &v
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *ConsequenceParams) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *ConsequenceParams) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *ConsequenceParams) SetEnableABTest(v bool) {
	o.EnableABTest = &v
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *ConsequenceParams) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *ConsequenceParams) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *ConsequenceParams) SetEnableReRanking(v bool) {
	o.EnableReRanking = &v
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsequenceParams) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter.Get() == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter.Get()
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsequenceParams) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter.Get(), o.ReRankingApplyFilter.IsSet()
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *ConsequenceParams) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter.IsSet() {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given NullableReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *ConsequenceParams) SetReRankingApplyFilter(v ReRankingApplyFilter) {
	o.ReRankingApplyFilter.Set(&v)
}

// SetReRankingApplyFilterNil sets the value for ReRankingApplyFilter to be an explicit nil
func (o *ConsequenceParams) SetReRankingApplyFilterNil() {
	o.ReRankingApplyFilter.Set(nil)
}

// UnsetReRankingApplyFilter ensures that no value is present for ReRankingApplyFilter, not even an explicit nil
func (o *ConsequenceParams) UnsetReRankingApplyFilter() {
	o.ReRankingApplyFilter.Unset()
}

// GetAttributesForFaceting returns the AttributesForFaceting field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributesForFaceting() []string {
	if o == nil || o.AttributesForFaceting == nil {
		var ret []string
		return ret
	}
	return o.AttributesForFaceting
}

// GetAttributesForFacetingOk returns a tuple with the AttributesForFaceting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributesForFacetingOk() ([]string, bool) {
	if o == nil || o.AttributesForFaceting == nil {
		return nil, false
	}
	return o.AttributesForFaceting, true
}

// HasAttributesForFaceting returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributesForFaceting() bool {
	if o != nil && o.AttributesForFaceting != nil {
		return true
	}

	return false
}

// SetAttributesForFaceting gets a reference to the given []string and assigns it to the AttributesForFaceting field.
func (o *ConsequenceParams) SetAttributesForFaceting(v []string) {
	o.AttributesForFaceting = v
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *ConsequenceParams) SetAttributesToRetrieve(v []string) {
	o.AttributesToRetrieve = v
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *ConsequenceParams) SetRestrictSearchableAttributes(v []string) {
	o.RestrictSearchableAttributes = v
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *ConsequenceParams) SetRanking(v []string) {
	o.Ranking = v
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *ConsequenceParams) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *ConsequenceParams) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *ConsequenceParams) SetCustomRanking(v []string) {
	o.CustomRanking = v
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *ConsequenceParams) SetRelevancyStrictness(v int32) {
	o.RelevancyStrictness = &v
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *ConsequenceParams) SetAttributesToHighlight(v []string) {
	o.AttributesToHighlight = v
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *ConsequenceParams) SetAttributesToSnippet(v []string) {
	o.AttributesToSnippet = v
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *ConsequenceParams) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *ConsequenceParams) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *ConsequenceParams) SetHighlightPreTag(v string) {
	o.HighlightPreTag = &v
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *ConsequenceParams) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *ConsequenceParams) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *ConsequenceParams) SetHighlightPostTag(v string) {
	o.HighlightPostTag = &v
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *ConsequenceParams) SetSnippetEllipsisText(v string) {
	o.SnippetEllipsisText = &v
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *ConsequenceParams) SetRestrictHighlightAndSnippetArrays(v bool) {
	o.RestrictHighlightAndSnippetArrays = &v
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *ConsequenceParams) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *ConsequenceParams) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *ConsequenceParams) SetHitsPerPage(v int32) {
	o.HitsPerPage = &v
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *ConsequenceParams) SetMinWordSizefor1Typo(v int32) {
	o.MinWordSizefor1Typo = &v
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *ConsequenceParams) SetMinWordSizefor2Typos(v int32) {
	o.MinWordSizefor2Typos = &v
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *ConsequenceParams) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *ConsequenceParams) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *ConsequenceParams) SetTypoTolerance(v TypoTolerance) {
	o.TypoTolerance = &v
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *ConsequenceParams) SetAllowTyposOnNumericTokens(v bool) {
	o.AllowTyposOnNumericTokens = &v
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *ConsequenceParams) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *ConsequenceParams) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *ConsequenceParams) SetDisableTypoToleranceOnAttributes(v []string) {
	o.DisableTypoToleranceOnAttributes = v
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *ConsequenceParams) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *ConsequenceParams) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *ConsequenceParams) SetIgnorePlurals(v IgnorePlurals) {
	o.IgnorePlurals = &v
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *ConsequenceParams) SetRemoveStopWords(v RemoveStopWords) {
	o.RemoveStopWords = &v
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *ConsequenceParams) SetKeepDiacriticsOnCharacters(v string) {
	o.KeepDiacriticsOnCharacters = &v
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *ConsequenceParams) GetQueryLanguages() []string {
	if o == nil || o.QueryLanguages == nil {
		var ret []string
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetQueryLanguagesOk() ([]string, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *ConsequenceParams) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []string and assigns it to the QueryLanguages field.
func (o *ConsequenceParams) SetQueryLanguages(v []string) {
	o.QueryLanguages = v
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *ConsequenceParams) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *ConsequenceParams) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *ConsequenceParams) SetDecompoundQuery(v bool) {
	o.DecompoundQuery = &v
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *ConsequenceParams) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *ConsequenceParams) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *ConsequenceParams) SetEnableRules(v bool) {
	o.EnableRules = &v
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *ConsequenceParams) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *ConsequenceParams) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *ConsequenceParams) SetEnablePersonalization(v bool) {
	o.EnablePersonalization = &v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *ConsequenceParams) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *ConsequenceParams) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *ConsequenceParams) SetQueryType(v QueryType) {
	o.QueryType = &v
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *ConsequenceParams) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) {
	o.RemoveWordsIfNoResults = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *ConsequenceParams) SetMode(v Mode) {
	o.Mode = &v
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSemanticSearch() IndexSettingsAsSearchParamsSemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret IndexSettingsAsSearchParamsSemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSemanticSearchOk() (*IndexSettingsAsSearchParamsSemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given IndexSettingsAsSearchParamsSemanticSearch and assigns it to the SemanticSearch field.
func (o *ConsequenceParams) SetSemanticSearch(v IndexSettingsAsSearchParamsSemanticSearch) {
	o.SemanticSearch = &v
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *ConsequenceParams) SetAdvancedSyntax(v bool) {
	o.AdvancedSyntax = &v
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *ConsequenceParams) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *ConsequenceParams) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *ConsequenceParams) SetOptionalWords(v []string) {
	o.OptionalWords = v
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *ConsequenceParams) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *ConsequenceParams) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *ConsequenceParams) SetDisableExactOnAttributes(v []string) {
	o.DisableExactOnAttributes = v
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *ConsequenceParams) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *ConsequenceParams) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *ConsequenceParams) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) {
	o.ExactOnSingleWordQuery = &v
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *ConsequenceParams) SetAlternativesAsExact(v []AlternativesAsExact) {
	o.AlternativesAsExact = v
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *ConsequenceParams) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) {
	o.AdvancedSyntaxFeatures = v
}

// GetExplain returns the Explain field value if set, zero value otherwise.
func (o *ConsequenceParams) GetExplain() []string {
	if o == nil || o.Explain == nil {
		var ret []string
		return ret
	}
	return o.Explain
}

// GetExplainOk returns a tuple with the Explain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetExplainOk() ([]string, bool) {
	if o == nil || o.Explain == nil {
		return nil, false
	}
	return o.Explain, true
}

// HasExplain returns a boolean if a field has been set.
func (o *ConsequenceParams) HasExplain() bool {
	if o != nil && o.Explain != nil {
		return true
	}

	return false
}

// SetExplain gets a reference to the given []string and assigns it to the Explain field.
func (o *ConsequenceParams) SetExplain(v []string) {
	o.Explain = v
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *ConsequenceParams) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *ConsequenceParams) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *ConsequenceParams) SetDistinct(v Distinct) {
	o.Distinct = &v
}

// GetAttributeForDistinct returns the AttributeForDistinct field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributeForDistinct() string {
	if o == nil || o.AttributeForDistinct == nil {
		var ret string
		return ret
	}
	return *o.AttributeForDistinct
}

// GetAttributeForDistinctOk returns a tuple with the AttributeForDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributeForDistinctOk() (*string, bool) {
	if o == nil || o.AttributeForDistinct == nil {
		return nil, false
	}
	return o.AttributeForDistinct, true
}

// HasAttributeForDistinct returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributeForDistinct() bool {
	if o != nil && o.AttributeForDistinct != nil {
		return true
	}

	return false
}

// SetAttributeForDistinct gets a reference to the given string and assigns it to the AttributeForDistinct field.
func (o *ConsequenceParams) SetAttributeForDistinct(v string) {
	o.AttributeForDistinct = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *ConsequenceParams) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *ConsequenceParams) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *ConsequenceParams) SetSynonyms(v bool) {
	o.Synonyms = &v
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *ConsequenceParams) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *ConsequenceParams) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *ConsequenceParams) SetReplaceSynonymsInHighlight(v bool) {
	o.ReplaceSynonymsInHighlight = &v
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *ConsequenceParams) SetMinProximity(v int32) {
	o.MinProximity = &v
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *ConsequenceParams) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *ConsequenceParams) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *ConsequenceParams) SetResponseFields(v []string) {
	o.ResponseFields = v
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *ConsequenceParams) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *ConsequenceParams) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *ConsequenceParams) SetMaxFacetHits(v int32) {
	o.MaxFacetHits = &v
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *ConsequenceParams) SetAttributeCriteriaComputedByMinProximity(v bool) {
	o.AttributeCriteriaComputedByMinProximity = &v
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *ConsequenceParams) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *ConsequenceParams) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *ConsequenceParams) SetRenderingContent(v RenderingContent) {
	o.RenderingContent = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ConsequenceParams) GetQuery() ConsequenceQuery {
	if o == nil || o.Query == nil {
		var ret ConsequenceQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetQueryOk() (*ConsequenceQuery, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ConsequenceParams) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given ConsequenceQuery and assigns it to the Query field.
func (o *ConsequenceParams) SetQuery(v ConsequenceQuery) {
	o.Query = &v
}

// GetAutomaticFacetFilters returns the AutomaticFacetFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAutomaticFacetFilters() AutomaticFacetFilters {
	if o == nil || o.AutomaticFacetFilters == nil {
		var ret AutomaticFacetFilters
		return ret
	}
	return *o.AutomaticFacetFilters
}

// GetAutomaticFacetFiltersOk returns a tuple with the AutomaticFacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAutomaticFacetFiltersOk() (*AutomaticFacetFilters, bool) {
	if o == nil || o.AutomaticFacetFilters == nil {
		return nil, false
	}
	return o.AutomaticFacetFilters, true
}

// HasAutomaticFacetFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAutomaticFacetFilters() bool {
	if o != nil && o.AutomaticFacetFilters != nil {
		return true
	}

	return false
}

// SetAutomaticFacetFilters gets a reference to the given AutomaticFacetFilters and assigns it to the AutomaticFacetFilters field.
func (o *ConsequenceParams) SetAutomaticFacetFilters(v AutomaticFacetFilters) {
	o.AutomaticFacetFilters = &v
}

// GetAutomaticOptionalFacetFilters returns the AutomaticOptionalFacetFilters field value if set, zero value otherwise.
func (o *ConsequenceParams) GetAutomaticOptionalFacetFilters() AutomaticFacetFilters {
	if o == nil || o.AutomaticOptionalFacetFilters == nil {
		var ret AutomaticFacetFilters
		return ret
	}
	return *o.AutomaticOptionalFacetFilters
}

// GetAutomaticOptionalFacetFiltersOk returns a tuple with the AutomaticOptionalFacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsequenceParams) GetAutomaticOptionalFacetFiltersOk() (*AutomaticFacetFilters, bool) {
	if o == nil || o.AutomaticOptionalFacetFilters == nil {
		return nil, false
	}
	return o.AutomaticOptionalFacetFilters, true
}

// HasAutomaticOptionalFacetFilters returns a boolean if a field has been set.
func (o *ConsequenceParams) HasAutomaticOptionalFacetFilters() bool {
	if o != nil && o.AutomaticOptionalFacetFilters != nil {
		return true
	}

	return false
}

// SetAutomaticOptionalFacetFilters gets a reference to the given AutomaticFacetFilters and assigns it to the AutomaticOptionalFacetFilters field.
func (o *ConsequenceParams) SetAutomaticOptionalFacetFilters(v AutomaticFacetFilters) {
	o.AutomaticOptionalFacetFilters = &v
}

func (o ConsequenceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.SimilarQuery != nil {
		toSerialize["similarQuery"] = o.SimilarQuery
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.TagFilters != nil {
		toSerialize["tagFilters"] = o.TagFilters
	}
	if o.SumOrFiltersScores != nil {
		toSerialize["sumOrFiltersScores"] = o.SumOrFiltersScores
	}
	if o.Facets != nil {
		toSerialize["facets"] = o.Facets
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.FacetingAfterDistinct != nil {
		toSerialize["facetingAfterDistinct"] = o.FacetingAfterDistinct
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.AroundLatLng != nil {
		toSerialize["aroundLatLng"] = o.AroundLatLng
	}
	if o.AroundLatLngViaIP != nil {
		toSerialize["aroundLatLngViaIP"] = o.AroundLatLngViaIP
	}
	if o.AroundRadius != nil {
		toSerialize["aroundRadius"] = o.AroundRadius
	}
	if o.AroundPrecision != nil {
		toSerialize["aroundPrecision"] = o.AroundPrecision
	}
	if o.MinimumAroundRadius != nil {
		toSerialize["minimumAroundRadius"] = o.MinimumAroundRadius
	}
	if o.InsideBoundingBox != nil {
		toSerialize["insideBoundingBox"] = o.InsideBoundingBox
	}
	if o.InsidePolygon != nil {
		toSerialize["insidePolygon"] = o.InsidePolygon
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if o.UserToken != nil {
		toSerialize["userToken"] = o.UserToken
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AnalyticsTags != nil {
		toSerialize["analyticsTags"] = o.AnalyticsTags
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter.IsSet() {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter.Get()
	}
	if o.AttributesForFaceting != nil {
		toSerialize["attributesForFaceting"] = o.AttributesForFaceting
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Explain != nil {
		toSerialize["explain"] = o.Explain
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.AttributeForDistinct != nil {
		toSerialize["attributeForDistinct"] = o.AttributeForDistinct
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.AutomaticFacetFilters != nil {
		toSerialize["automaticFacetFilters"] = o.AutomaticFacetFilters
	}
	if o.AutomaticOptionalFacetFilters != nil {
		toSerialize["automaticOptionalFacetFilters"] = o.AutomaticOptionalFacetFilters
	}
	return json.Marshal(toSerialize)
}

func (o ConsequenceParams) String() string {
	out := ""
	out += fmt.Sprintf("  similarQuery=%v\n", o.SimilarQuery)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  tagFilters=%v\n", o.TagFilters)
	out += fmt.Sprintf("  sumOrFiltersScores=%v\n", o.SumOrFiltersScores)
	out += fmt.Sprintf("  facets=%v\n", o.Facets)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  facetingAfterDistinct=%v\n", o.FacetingAfterDistinct)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  offset=%v\n", o.Offset)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  aroundLatLng=%v\n", o.AroundLatLng)
	out += fmt.Sprintf("  aroundLatLngViaIP=%v\n", o.AroundLatLngViaIP)
	out += fmt.Sprintf("  aroundRadius=%v\n", o.AroundRadius)
	out += fmt.Sprintf("  aroundPrecision=%v\n", o.AroundPrecision)
	out += fmt.Sprintf("  minimumAroundRadius=%v\n", o.MinimumAroundRadius)
	out += fmt.Sprintf("  insideBoundingBox=%v\n", o.InsideBoundingBox)
	out += fmt.Sprintf("  insidePolygon=%v\n", o.InsidePolygon)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  analyticsTags=%v\n", o.AnalyticsTags)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	out += fmt.Sprintf("  attributesForFaceting=%v\n", o.AttributesForFaceting)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  explain=%v\n", o.Explain)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  attributeForDistinct=%v\n", o.AttributeForDistinct)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  automaticFacetFilters=%v\n", o.AutomaticFacetFilters)
	out += fmt.Sprintf("  automaticOptionalFacetFilters=%v\n", o.AutomaticOptionalFacetFilters)
	return fmt.Sprintf("ConsequenceParams {\n%s}", out)
}

type NullableConsequenceParams struct {
	value *ConsequenceParams
	isSet bool
}

func (v NullableConsequenceParams) Get() *ConsequenceParams {
	return v.value
}

func (v *NullableConsequenceParams) Set(val *ConsequenceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableConsequenceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableConsequenceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsequenceParams(val *ConsequenceParams) *NullableConsequenceParams {
	return &NullableConsequenceParams{value: val, isSet: true}
}

func (v NullableConsequenceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsequenceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
