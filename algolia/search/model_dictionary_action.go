// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// DictionaryAction Actions to perform.
type DictionaryAction string

// List of dictionaryAction.
const (
	DICTIONARY_ACTION_ADD_ENTRY    DictionaryAction = "addEntry"
	DICTIONARY_ACTION_DELETE_ENTRY DictionaryAction = "deleteEntry"
)

// All allowed values of DictionaryAction enum.
var AllowedDictionaryActionEnumValues = []DictionaryAction{
	"addEntry",
	"deleteEntry",
}

func (v *DictionaryAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'DictionaryAction': %w", string(src), err)
	}
	enumTypeValue := DictionaryAction(value)
	for _, existing := range AllowedDictionaryActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DictionaryAction", value)
}

// NewDictionaryActionFromValue returns a pointer to a valid DictionaryAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewDictionaryActionFromValue(v string) (*DictionaryAction, error) {
	ev := DictionaryAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DictionaryAction: valid values are %v", v, AllowedDictionaryActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v DictionaryAction) IsValid() bool {
	for _, existing := range AllowedDictionaryActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dictionaryAction value.
func (v DictionaryAction) Ptr() *DictionaryAction {
	return &v
}
