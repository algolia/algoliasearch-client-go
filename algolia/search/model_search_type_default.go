// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchTypeDefault - `default`: perform a search query - `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
type SearchTypeDefault string

// List of searchTypeDefault.
const (
	SEARCH_TYPE_DEFAULT_DEFAULT SearchTypeDefault = "default"
)

// All allowed values of SearchTypeDefault enum.
var AllowedSearchTypeDefaultEnumValues = []SearchTypeDefault{
	"default",
}

func (v *SearchTypeDefault) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'SearchTypeDefault': %w", string(src), err)
	}
	enumTypeValue := SearchTypeDefault(value)
	for _, existing := range AllowedSearchTypeDefaultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchTypeDefault", value)
}

// NewSearchTypeDefaultFromValue returns a pointer to a valid SearchTypeDefault
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewSearchTypeDefaultFromValue(v string) (*SearchTypeDefault, error) {
	ev := SearchTypeDefault(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchTypeDefault: valid values are %v", v, AllowedSearchTypeDefaultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v SearchTypeDefault) IsValid() bool {
	for _, existing := range AllowedSearchTypeDefaultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchTypeDefault value.
func (v SearchTypeDefault) Ptr() *SearchTypeDefault {
	return &v
}
