// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchTypeDefault Perform a search query with `default`, will search for facet values if `facet` is given.
type SearchTypeDefault string

// List of searchTypeDefault
const (
	SEARCHTYPEDEFAULT_DEFAULT SearchTypeDefault = "default"
)

// All allowed values of SearchTypeDefault enum
var AllowedSearchTypeDefaultEnumValues = []SearchTypeDefault{
	"default",
}

func (v *SearchTypeDefault) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchTypeDefault(value)
	for _, existing := range AllowedSearchTypeDefaultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchTypeDefault", value)
}

// NewSearchTypeDefaultFromValue returns a pointer to a valid SearchTypeDefault
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchTypeDefaultFromValue(v string) (*SearchTypeDefault, error) {
	ev := SearchTypeDefault(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchTypeDefault: valid values are %v", v, AllowedSearchTypeDefaultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchTypeDefault) IsValid() bool {
	for _, existing := range AllowedSearchTypeDefaultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchTypeDefault value
func (v SearchTypeDefault) Ptr() *SearchTypeDefault {
	return &v
}

type NullableSearchTypeDefault struct {
	value *SearchTypeDefault
	isSet bool
}

func (v NullableSearchTypeDefault) Get() *SearchTypeDefault {
	return v.value
}

func (v *NullableSearchTypeDefault) Set(val *SearchTypeDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTypeDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTypeDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTypeDefault(val *SearchTypeDefault) *NullableSearchTypeDefault {
	return &NullableSearchTypeDefault{value: val, isSet: true}
}

func (v NullableSearchTypeDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTypeDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
