// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchParams - struct for SearchParams
type SearchParams struct {
	SearchParamsObject *SearchParamsObject
	SearchParamsString *SearchParamsString
}

// SearchParamsObjectAsSearchParams is a convenience function that returns SearchParamsObject wrapped in SearchParams
func SearchParamsObjectAsSearchParams(v *SearchParamsObject) SearchParams {
	return SearchParams{
		SearchParamsObject: v,
	}
}

// SearchParamsStringAsSearchParams is a convenience function that returns SearchParamsString wrapped in SearchParams
func SearchParamsStringAsSearchParams(v *SearchParamsString) SearchParams {
	return SearchParams{
		SearchParamsString: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SearchParams) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into SearchParamsObject
	err = newStrictDecoder(data).Decode(&dst.SearchParamsObject)
	if err == nil && validateStruct(dst.SearchParamsObject) == nil {
		jsonSearchParamsObject, _ := json.Marshal(dst.SearchParamsObject)
		if string(jsonSearchParamsObject) == "{}" { // empty struct
			dst.SearchParamsObject = nil
		} else {
			return nil
		}
	} else {
		dst.SearchParamsObject = nil
	}

	// try to unmarshal data into SearchParamsString
	err = newStrictDecoder(data).Decode(&dst.SearchParamsString)
	if err == nil && validateStruct(dst.SearchParamsString) == nil {
		jsonSearchParamsString, _ := json.Marshal(dst.SearchParamsString)
		if string(jsonSearchParamsString) == "{}" { // empty struct
			dst.SearchParamsString = nil
		} else {
			return nil
		}
	} else {
		dst.SearchParamsString = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(SearchParams)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchParams) MarshalJSON() ([]byte, error) {
	if src.SearchParamsObject != nil {
		return json.Marshal(&src.SearchParamsObject)
	}

	if src.SearchParamsString != nil {
		return json.Marshal(&src.SearchParamsString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SearchParams) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.SearchParamsObject != nil {
		return obj.SearchParamsObject
	}

	if obj.SearchParamsString != nil {
		return obj.SearchParamsString
	}

	// all schemas are nil
	return nil
}

type NullableSearchParams struct {
	value *SearchParams
	isSet bool
}

func (v NullableSearchParams) Get() *SearchParams {
	return v.value
}

func (v *NullableSearchParams) Set(val *SearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParams(val *SearchParams) *NullableSearchParams {
	return &NullableSearchParams{value: val, isSet: true}
}

func (v NullableSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
