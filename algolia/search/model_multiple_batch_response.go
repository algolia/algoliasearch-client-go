// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// MultipleBatchResponse struct for MultipleBatchResponse
type MultipleBatchResponse struct {
	// TaskIDs per index.
	TaskID map[string]int64 `json:"taskID"`
	// Unique object (record) identifiers.
	ObjectIDs []string `json:"objectIDs"`
}

// NewMultipleBatchResponse instantiates a new MultipleBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleBatchResponse(taskID map[string]int64, objectIDs []string) *MultipleBatchResponse {
	this := &MultipleBatchResponse{}
	this.TaskID = taskID
	this.ObjectIDs = objectIDs
	return this
}

// NewMultipleBatchResponseWithDefaults instantiates a new MultipleBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleBatchResponseWithDefaults() *MultipleBatchResponse {
	this := &MultipleBatchResponse{}
	return this
}

// GetTaskID returns the TaskID field value
func (o *MultipleBatchResponse) GetTaskID() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.TaskID
}

// GetTaskIDOk returns a tuple with the TaskID field value
// and a boolean to check if the value has been set.
func (o *MultipleBatchResponse) GetTaskIDOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskID, true
}

// SetTaskID sets field value
func (o *MultipleBatchResponse) SetTaskID(v map[string]int64) {
	o.TaskID = v
}

// GetObjectIDs returns the ObjectIDs field value
func (o *MultipleBatchResponse) GetObjectIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ObjectIDs
}

// GetObjectIDsOk returns a tuple with the ObjectIDs field value
// and a boolean to check if the value has been set.
func (o *MultipleBatchResponse) GetObjectIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectIDs, true
}

// SetObjectIDs sets field value
func (o *MultipleBatchResponse) SetObjectIDs(v []string) {
	o.ObjectIDs = v
}

func (o MultipleBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["taskID"] = o.TaskID
	}
	if true {
		toSerialize["objectIDs"] = o.ObjectIDs
	}
	return json.Marshal(toSerialize)
}

func (o MultipleBatchResponse) String() string {
	out := ""
	out += fmt.Sprintf("  taskID=%v\n", o.TaskID)
	out += fmt.Sprintf("  objectIDs=%v\n", o.ObjectIDs)
	return fmt.Sprintf("MultipleBatchResponse {\n%s}", out)
}

type NullableMultipleBatchResponse struct {
	value *MultipleBatchResponse
	isSet bool
}

func (v NullableMultipleBatchResponse) Get() *MultipleBatchResponse {
	return v.value
}

func (v *NullableMultipleBatchResponse) Set(val *MultipleBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleBatchResponse(val *MultipleBatchResponse) *NullableMultipleBatchResponse {
	return &NullableMultipleBatchResponse{value: val, isSet: true}
}

func (v NullableMultipleBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
