// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// Action Type of indexing operation.
type Action string

// List of action.
const (
	ACTION_ADD_OBJECT                      Action = "addObject"
	ACTION_UPDATE_OBJECT                   Action = "updateObject"
	ACTION_PARTIAL_UPDATE_OBJECT           Action = "partialUpdateObject"
	ACTION_PARTIAL_UPDATE_OBJECT_NO_CREATE Action = "partialUpdateObjectNoCreate"
	ACTION_DELETE_OBJECT                   Action = "deleteObject"
	ACTION_DELETE                          Action = "delete"
	ACTION_CLEAR                           Action = "clear"
)

// All allowed values of Action enum.
var AllowedActionEnumValues = []Action{
	"addObject",
	"updateObject",
	"partialUpdateObject",
	"partialUpdateObjectNoCreate",
	"deleteObject",
	"delete",
	"clear",
}

func (v *Action) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Action': %w", string(src), err)
	}
	enumTypeValue := Action(value)
	for _, existing := range AllowedActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Action", value)
}

// NewActionFromValue returns a pointer to a valid Action
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewActionFromValue(v string) (*Action, error) {
	ev := Action(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Action: valid values are %v", v, AllowedActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Action) IsValid() bool {
	for _, existing := range AllowedActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to action value.
func (v Action) Ptr() *Action {
	return &v
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
