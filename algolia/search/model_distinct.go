// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// Distinct - Determines how many records of a group are included in the search results.  Records with the same value for the `attributeForDistinct` attribute are considered a group. The `distinct` setting controls how many members of the group are returned. This is useful for [deduplication and grouping](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).  The `distinct` setting is ignored if `attributeForDistinct` is not set.
type Distinct struct {
	Bool  *bool
	Int32 *int32
}

// boolAsDistinct is a convenience function that returns bool wrapped in Distinct.
func BoolAsDistinct(v bool) *Distinct {
	return &Distinct{
		Bool: &v,
	}
}

// int32AsDistinct is a convenience function that returns int32 wrapped in Distinct.
func Int32AsDistinct(v int32) *Distinct {
	return &Distinct{
		Int32: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *Distinct) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil && validateStruct(dst.Bool) == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil && validateStruct(dst.Int32) == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			return nil
		}
	} else {
		dst.Int32 = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(Distinct)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src Distinct) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		serialized, err := json.Marshal(&src.Bool)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Bool of Distinct: %w", err)
		}

		return serialized, nil
	}

	if src.Int32 != nil {
		serialized, err := json.Marshal(&src.Int32)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Int32 of Distinct: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj Distinct) GetActualInstance() any {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableDistinct struct {
	value *Distinct
	isSet bool
}

func (v NullableDistinct) Get() *Distinct {
	return v.value
}

func (v *NullableDistinct) Set(val *Distinct) {
	v.value = val
	v.isSet = true
}

func (v NullableDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistinct(val *Distinct) *NullableDistinct {
	return &NullableDistinct{value: val, isSet: true}
}

func (v NullableDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
