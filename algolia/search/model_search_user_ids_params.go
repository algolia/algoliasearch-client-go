// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchUserIdsParams OK
type SearchUserIdsParams struct {
	// Query to search. The search is a prefix search with typoTolerance. Use empty query to retrieve all users.
	Query string `json:"query"`
	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	// Specify the page to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Set the number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
}

type SearchUserIdsParamsOption func(f *SearchUserIdsParams)

func WithSearchUserIdsParamsClusterName(val string) SearchUserIdsParamsOption {
	return func(f *SearchUserIdsParams) {
		f.ClusterName = &val
	}
}

func WithSearchUserIdsParamsPage(val int32) SearchUserIdsParamsOption {
	return func(f *SearchUserIdsParams) {
		f.Page = &val
	}
}

func WithSearchUserIdsParamsHitsPerPage(val int32) SearchUserIdsParamsOption {
	return func(f *SearchUserIdsParams) {
		f.HitsPerPage = &val
	}
}

// NewSearchUserIdsParams instantiates a new SearchUserIdsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchUserIdsParams(query string, opts ...SearchUserIdsParamsOption) *SearchUserIdsParams {
	this := &SearchUserIdsParams{}
	this.Query = query
	var page int32 = 0
	this.Page = &page
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSearchUserIdsParamsWithDefaults instantiates a new SearchUserIdsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchUserIdsParamsWithDefaults() *SearchUserIdsParams {
	this := &SearchUserIdsParams{}
	var page int32 = 0
	this.Page = &page
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	return this
}

// GetQuery returns the Query field value
func (o *SearchUserIdsParams) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchUserIdsParams) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchUserIdsParams) SetQuery(v string) {
	o.Query = v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *SearchUserIdsParams) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserIdsParams) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *SearchUserIdsParams) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *SearchUserIdsParams) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchUserIdsParams) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserIdsParams) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchUserIdsParams) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchUserIdsParams) SetPage(v int32) {
	o.Page = &v
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *SearchUserIdsParams) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserIdsParams) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *SearchUserIdsParams) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *SearchUserIdsParams) SetHitsPerPage(v int32) {
	o.HitsPerPage = &v
}

func (o SearchUserIdsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["query"] = o.Query
	}
	if o.ClusterName != nil {
		toSerialize["clusterName"] = o.ClusterName
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	return json.Marshal(toSerialize)
}

func (o SearchUserIdsParams) String() string {
	out := "SearchUserIdsParams {\n"
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  clusterName=%v\n", o.ClusterName)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += "}"
	return out
}

type NullableSearchUserIdsParams struct {
	value *SearchUserIdsParams
	isSet bool
}

func (v NullableSearchUserIdsParams) Get() *SearchUserIdsParams {
	return v.value
}

func (v *NullableSearchUserIdsParams) Set(val *SearchUserIdsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchUserIdsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchUserIdsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchUserIdsParams(val *SearchUserIdsParams) *NullableSearchUserIdsParams {
	return &NullableSearchUserIdsParams{value: val, isSet: true}
}

func (v NullableSearchUserIdsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchUserIdsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
