// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// HighlightResult - struct for HighlightResult.
type HighlightResult struct {
	HighlightResultOption         *HighlightResultOption
	ArrayOfHighlightResult        *[]HighlightResult
	MapmapOfStringHighlightResult *map[string]HighlightResult
}

// HighlightResultOptionAsHighlightResult is a convenience function that returns HighlightResultOption wrapped in HighlightResult.
func HighlightResultOptionAsHighlightResult(v *HighlightResultOption) *HighlightResult {
	return &HighlightResult{
		HighlightResultOption: v,
	}
}

// map[string]HighlightResultAsHighlightResult is a convenience function that returns map[string]HighlightResult wrapped in HighlightResult.
func MapmapOfStringHighlightResultAsHighlightResult(v map[string]HighlightResult) *HighlightResult {
	return &HighlightResult{
		MapmapOfStringHighlightResult: &v,
	}
}

// []HighlightResultAsHighlightResult is a convenience function that returns []HighlightResult wrapped in HighlightResult.
func ArrayOfHighlightResultAsHighlightResult(v []HighlightResult) *HighlightResult {
	return &HighlightResult{
		ArrayOfHighlightResult: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *HighlightResult) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "matchLevel") && utils.HasKey(jsonDict, "matchedWords") {
		// try to unmarshal data into HighlightResultOption
		err = newStrictDecoder(data).Decode(&dst.HighlightResultOption)
		if err == nil && validateStruct(dst.HighlightResultOption) == nil {
			return nil // found the correct type
		} else {
			dst.HighlightResultOption = nil
		}
	}
	// try to unmarshal data into MapmapOfStringHighlightResult
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringHighlightResult)
	if err == nil && validateStruct(dst.MapmapOfStringHighlightResult) == nil {
		return nil // found the correct type
	} else {
		dst.MapmapOfStringHighlightResult = nil
	}
	// try to unmarshal data into ArrayOfHighlightResult
	err = newStrictDecoder(data).Decode(&dst.ArrayOfHighlightResult)
	if err == nil && validateStruct(dst.ArrayOfHighlightResult) == nil {
		return nil // found the correct type
	} else {
		dst.ArrayOfHighlightResult = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(HighlightResult)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src HighlightResult) MarshalJSON() ([]byte, error) {
	if src.HighlightResultOption != nil {
		serialized, err := json.Marshal(&src.HighlightResultOption)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of HighlightResultOption of HighlightResult: %w", err)
		}

		return serialized, nil
	}

	if src.ArrayOfHighlightResult != nil {
		serialized, err := json.Marshal(&src.ArrayOfHighlightResult)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ArrayOfHighlightResult of HighlightResult: %w", err)
		}

		return serialized, nil
	}

	if src.MapmapOfStringHighlightResult != nil {
		serialized, err := json.Marshal(&src.MapmapOfStringHighlightResult)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of MapmapOfStringHighlightResult of HighlightResult: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj HighlightResult) GetActualInstance() any {
	if obj.HighlightResultOption != nil {
		return *obj.HighlightResultOption
	}

	if obj.ArrayOfHighlightResult != nil {
		return *obj.ArrayOfHighlightResult
	}

	if obj.MapmapOfStringHighlightResult != nil {
		return *obj.MapmapOfStringHighlightResult
	}

	// all schemas are nil
	return nil
}
