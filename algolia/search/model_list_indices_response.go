// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// ListIndicesResponse struct for ListIndicesResponse
type ListIndicesResponse struct {
	// List of the fetched indices.
	Items []FetchedIndex `json:"items"`
	// Number of pages.
	NbPages *int32 `json:"nbPages,omitempty"`
}

type ListIndicesResponseOption func(f *ListIndicesResponse)

func WithListIndicesResponseNbPages(val int32) ListIndicesResponseOption {
	return func(f *ListIndicesResponse) {
		f.NbPages = &val
	}
}

// NewListIndicesResponse instantiates a new ListIndicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIndicesResponse(items []FetchedIndex, opts ...ListIndicesResponseOption) *ListIndicesResponse {
	this := &ListIndicesResponse{}
	this.Items = items
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewListIndicesResponseWithDefaults instantiates a new ListIndicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIndicesResponseWithDefaults() *ListIndicesResponse {
	this := &ListIndicesResponse{}
	return this
}

// GetItems returns the Items field value
func (o *ListIndicesResponse) GetItems() []FetchedIndex {
	if o == nil {
		var ret []FetchedIndex
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ListIndicesResponse) GetItemsOk() ([]FetchedIndex, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ListIndicesResponse) SetItems(v []FetchedIndex) {
	o.Items = v
}

// GetNbPages returns the NbPages field value if set, zero value otherwise.
func (o *ListIndicesResponse) GetNbPages() int32 {
	if o == nil || o.NbPages == nil {
		var ret int32
		return ret
	}
	return *o.NbPages
}

// GetNbPagesOk returns a tuple with the NbPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIndicesResponse) GetNbPagesOk() (*int32, bool) {
	if o == nil || o.NbPages == nil {
		return nil, false
	}
	return o.NbPages, true
}

// HasNbPages returns a boolean if a field has been set.
func (o *ListIndicesResponse) HasNbPages() bool {
	if o != nil && o.NbPages != nil {
		return true
	}

	return false
}

// SetNbPages gets a reference to the given int32 and assigns it to the NbPages field.
func (o *ListIndicesResponse) SetNbPages(v int32) {
	o.NbPages = &v
}

func (o ListIndicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["items"] = o.Items
	}
	if o.NbPages != nil {
		toSerialize["nbPages"] = o.NbPages
	}
	return json.Marshal(toSerialize)
}

func (o ListIndicesResponse) String() string {
	out := "ListIndicesResponse {\n"
	out += fmt.Sprintf("  items=%v\n", o.Items)
	out += fmt.Sprintf("  nbPages=%v\n", o.NbPages)
	out += "}"
	return out
}

type NullableListIndicesResponse struct {
	value *ListIndicesResponse
	isSet bool
}

func (v NullableListIndicesResponse) Get() *ListIndicesResponse {
	return v.value
}

func (v *NullableListIndicesResponse) Set(val *ListIndicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListIndicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListIndicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIndicesResponse(val *ListIndicesResponse) *NullableListIndicesResponse {
	return &NullableListIndicesResponse{value: val, isSet: true}
}

func (v NullableListIndicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIndicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
