// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package search

import (
	"encoding/json"
	"fmt"
)

// BatchDictionaryEntriesParams Request body for updating dictionary entries.
type BatchDictionaryEntriesParams struct {
	// Whether to replace all custom entries in the dictionary with the ones sent with this request.
	ClearExistingDictionaryEntries *bool `json:"clearExistingDictionaryEntries,omitempty"`
	// List of additions and deletions to your dictionaries.
	Requests []BatchDictionaryEntriesRequest `json:"requests"`
}

type BatchDictionaryEntriesParamsOption func(f *BatchDictionaryEntriesParams)

func WithBatchDictionaryEntriesParamsClearExistingDictionaryEntries(val bool) BatchDictionaryEntriesParamsOption {
	return func(f *BatchDictionaryEntriesParams) {
		f.ClearExistingDictionaryEntries = &val
	}
}

// NewBatchDictionaryEntriesParams instantiates a new BatchDictionaryEntriesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewBatchDictionaryEntriesParams(requests []BatchDictionaryEntriesRequest, opts ...BatchDictionaryEntriesParamsOption) *BatchDictionaryEntriesParams {
	this := &BatchDictionaryEntriesParams{}
	this.Requests = requests
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyBatchDictionaryEntriesParams return a pointer to an empty BatchDictionaryEntriesParams object.
func NewEmptyBatchDictionaryEntriesParams() *BatchDictionaryEntriesParams {
	return &BatchDictionaryEntriesParams{}
}

// GetClearExistingDictionaryEntries returns the ClearExistingDictionaryEntries field value if set, zero value otherwise.
func (o *BatchDictionaryEntriesParams) GetClearExistingDictionaryEntries() bool {
	if o == nil || o.ClearExistingDictionaryEntries == nil {
		var ret bool
		return ret
	}
	return *o.ClearExistingDictionaryEntries
}

// GetClearExistingDictionaryEntriesOk returns a tuple with the ClearExistingDictionaryEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchDictionaryEntriesParams) GetClearExistingDictionaryEntriesOk() (*bool, bool) {
	if o == nil || o.ClearExistingDictionaryEntries == nil {
		return nil, false
	}
	return o.ClearExistingDictionaryEntries, true
}

// HasClearExistingDictionaryEntries returns a boolean if a field has been set.
func (o *BatchDictionaryEntriesParams) HasClearExistingDictionaryEntries() bool {
	if o != nil && o.ClearExistingDictionaryEntries != nil {
		return true
	}

	return false
}

// SetClearExistingDictionaryEntries gets a reference to the given bool and assigns it to the ClearExistingDictionaryEntries field.
func (o *BatchDictionaryEntriesParams) SetClearExistingDictionaryEntries(v bool) *BatchDictionaryEntriesParams {
	o.ClearExistingDictionaryEntries = &v
	return o
}

// GetRequests returns the Requests field value.
func (o *BatchDictionaryEntriesParams) GetRequests() []BatchDictionaryEntriesRequest {
	if o == nil {
		var ret []BatchDictionaryEntriesRequest
		return ret
	}

	return o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value
// and a boolean to check if the value has been set.
func (o *BatchDictionaryEntriesParams) GetRequestsOk() ([]BatchDictionaryEntriesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requests, true
}

// SetRequests sets field value.
func (o *BatchDictionaryEntriesParams) SetRequests(v []BatchDictionaryEntriesRequest) *BatchDictionaryEntriesParams {
	o.Requests = v
	return o
}

func (o BatchDictionaryEntriesParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.ClearExistingDictionaryEntries != nil {
		toSerialize["clearExistingDictionaryEntries"] = o.ClearExistingDictionaryEntries
	}
	if true {
		toSerialize["requests"] = o.Requests
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal BatchDictionaryEntriesParams: %w", err)
	}

	return serialized, nil
}

func (o BatchDictionaryEntriesParams) String() string {
	out := ""
	out += fmt.Sprintf("  clearExistingDictionaryEntries=%v\n", o.ClearExistingDictionaryEntries)
	out += fmt.Sprintf("  requests=%v\n", o.Requests)
	return fmt.Sprintf("BatchDictionaryEntriesParams {\n%s}", out)
}

type NullableBatchDictionaryEntriesParams struct {
	value *BatchDictionaryEntriesParams
	isSet bool
}

func (v NullableBatchDictionaryEntriesParams) Get() *BatchDictionaryEntriesParams {
	return v.value
}

func (v *NullableBatchDictionaryEntriesParams) Set(val *BatchDictionaryEntriesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchDictionaryEntriesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchDictionaryEntriesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchDictionaryEntriesParams(val *BatchDictionaryEntriesParams) *NullableBatchDictionaryEntriesParams {
	return &NullableBatchDictionaryEntriesParams{value: val, isSet: true}
}

func (v NullableBatchDictionaryEntriesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableBatchDictionaryEntriesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
