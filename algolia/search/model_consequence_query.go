// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// ConsequenceQuery - Replace or edit the search query.  If `consequenceQuery` is a string, the entire search query is replaced with that string. If `consequenceQuery` is an object, it describes incremental edits made to the query.
type ConsequenceQuery struct {
	ConsequenceQueryObject *ConsequenceQueryObject
	String                 *string
}

// ConsequenceQueryObjectAsConsequenceQuery is a convenience function that returns ConsequenceQueryObject wrapped in ConsequenceQuery.
func ConsequenceQueryObjectAsConsequenceQuery(v *ConsequenceQueryObject) *ConsequenceQuery {
	return &ConsequenceQuery{
		ConsequenceQueryObject: v,
	}
}

// stringAsConsequenceQuery is a convenience function that returns string wrapped in ConsequenceQuery.
func StringAsConsequenceQuery(v string) *ConsequenceQuery {
	return &ConsequenceQuery{
		String: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *ConsequenceQuery) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into ConsequenceQueryObject
	err = newStrictDecoder(data).Decode(&dst.ConsequenceQueryObject)
	if err == nil && validateStruct(dst.ConsequenceQueryObject) == nil {
		return nil // found the correct type
	} else {
		dst.ConsequenceQueryObject = nil
	}
	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil && validateStruct(dst.String) == nil {
		return nil // found the correct type
	} else {
		dst.String = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(ConsequenceQuery)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src ConsequenceQuery) MarshalJSON() ([]byte, error) {
	if src.ConsequenceQueryObject != nil {
		serialized, err := json.Marshal(&src.ConsequenceQueryObject)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ConsequenceQueryObject of ConsequenceQuery: %w", err)
		}

		return serialized, nil
	}

	if src.String != nil {
		serialized, err := json.Marshal(&src.String)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of String of ConsequenceQuery: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj ConsequenceQuery) GetActualInstance() any {
	if obj.ConsequenceQueryObject != nil {
		return *obj.ConsequenceQueryObject
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}
