// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// SearchForFacetsOptions struct for SearchForFacetsOptions
type SearchForFacetsOptions struct {
	// The `facet` name.
	Facet string `json:"facet" validate:"required"`
	// The Algolia index name.
	IndexName string `json:"indexName" validate:"required"`
	// Text to search inside the facet's values.
	FacetQuery *string `json:"facetQuery,omitempty"`
	// Maximum number of facet hits to return during a search for facet values. For performance reasons, the maximum allowed number of returned values is 100.
	MaxFacetHits *int32          `json:"maxFacetHits,omitempty"`
	Type         SearchTypeFacet `json:"type" validate:"required"`
}

type SearchForFacetsOptionsOption func(f *SearchForFacetsOptions)

func WithSearchForFacetsOptionsFacetQuery(val string) SearchForFacetsOptionsOption {
	return func(f *SearchForFacetsOptions) {
		f.FacetQuery = &val
	}
}

func WithSearchForFacetsOptionsMaxFacetHits(val int32) SearchForFacetsOptionsOption {
	return func(f *SearchForFacetsOptions) {
		f.MaxFacetHits = &val
	}
}

// NewSearchForFacetsOptions instantiates a new SearchForFacetsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchForFacetsOptions(facet string, indexName string, type_ SearchTypeFacet, opts ...SearchForFacetsOptionsOption) *SearchForFacetsOptions {
	this := &SearchForFacetsOptions{}
	this.Facet = facet
	this.IndexName = indexName
	this.Type = type_
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSearchForFacetsOptionsWithDefaults instantiates a new SearchForFacetsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchForFacetsOptionsWithDefaults() *SearchForFacetsOptions {
	this := &SearchForFacetsOptions{}
	var facetQuery string = ""
	this.FacetQuery = &facetQuery
	var maxFacetHits int32 = 10
	this.MaxFacetHits = &maxFacetHits
	var type_ SearchTypeFacet = SEARCHTYPEFACET_FACET
	this.Type = type_
	return this
}

// GetFacet returns the Facet field value
func (o *SearchForFacetsOptions) GetFacet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Facet
}

// GetFacetOk returns a tuple with the Facet field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetsOptions) GetFacetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Facet, true
}

// SetFacet sets field value
func (o *SearchForFacetsOptions) SetFacet(v string) {
	o.Facet = v
}

// GetIndexName returns the IndexName field value
func (o *SearchForFacetsOptions) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetsOptions) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *SearchForFacetsOptions) SetIndexName(v string) {
	o.IndexName = v
}

// GetFacetQuery returns the FacetQuery field value if set, zero value otherwise.
func (o *SearchForFacetsOptions) GetFacetQuery() string {
	if o == nil || o.FacetQuery == nil {
		var ret string
		return ret
	}
	return *o.FacetQuery
}

// GetFacetQueryOk returns a tuple with the FacetQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacetsOptions) GetFacetQueryOk() (*string, bool) {
	if o == nil || o.FacetQuery == nil {
		return nil, false
	}
	return o.FacetQuery, true
}

// HasFacetQuery returns a boolean if a field has been set.
func (o *SearchForFacetsOptions) HasFacetQuery() bool {
	if o != nil && o.FacetQuery != nil {
		return true
	}

	return false
}

// SetFacetQuery gets a reference to the given string and assigns it to the FacetQuery field.
func (o *SearchForFacetsOptions) SetFacetQuery(v string) {
	o.FacetQuery = &v
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *SearchForFacetsOptions) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacetsOptions) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *SearchForFacetsOptions) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *SearchForFacetsOptions) SetMaxFacetHits(v int32) {
	o.MaxFacetHits = &v
}

// GetType returns the Type field value
func (o *SearchForFacetsOptions) GetType() SearchTypeFacet {
	if o == nil {
		var ret SearchTypeFacet
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetsOptions) GetTypeOk() (*SearchTypeFacet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SearchForFacetsOptions) SetType(v SearchTypeFacet) {
	o.Type = v
}

func (o SearchForFacetsOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["facet"] = o.Facet
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.FacetQuery != nil {
		toSerialize["facetQuery"] = o.FacetQuery
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

func (o SearchForFacetsOptions) String() string {
	out := ""
	out += fmt.Sprintf("  facet=%v\n", o.Facet)
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  facetQuery=%v\n", o.FacetQuery)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	return fmt.Sprintf("SearchForFacetsOptions {\n%s}", out)
}

type NullableSearchForFacetsOptions struct {
	value *SearchForFacetsOptions
	isSet bool
}

func (v NullableSearchForFacetsOptions) Get() *SearchForFacetsOptions {
	return v.value
}

func (v *NullableSearchForFacetsOptions) Set(val *SearchForFacetsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchForFacetsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchForFacetsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchForFacetsOptions(val *SearchForFacetsOptions) *NullableSearchForFacetsOptions {
	return &NullableSearchForFacetsOptions{value: val, isSet: true}
}

func (v NullableSearchForFacetsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchForFacetsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
