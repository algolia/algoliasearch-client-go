// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// SearchResult - struct for SearchResult.
type SearchResult struct {
	SearchForFacetValuesResponse *SearchForFacetValuesResponse
	SearchResponse               *SearchResponse
}

// SearchForFacetValuesResponseAsSearchResult is a convenience function that returns SearchForFacetValuesResponse wrapped in SearchResult.
func SearchForFacetValuesResponseAsSearchResult(v *SearchForFacetValuesResponse) *SearchResult {
	return &SearchResult{
		SearchForFacetValuesResponse: v,
	}
}

// SearchResponseAsSearchResult is a convenience function that returns SearchResponse wrapped in SearchResult.
func SearchResponseAsSearchResult(v *SearchResponse) *SearchResult {
	return &SearchResult{
		SearchResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *SearchResult) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "facetHits") {
		// try to unmarshal data into SearchForFacetValuesResponse
		err = newStrictDecoder(data).Decode(&dst.SearchForFacetValuesResponse)
		if err == nil && validateStruct(dst.SearchForFacetValuesResponse) == nil {
			return nil // found the correct type
		} else {
			dst.SearchForFacetValuesResponse = nil
		}
	}
	// try to unmarshal data into SearchResponse
	err = newStrictDecoder(data).Decode(&dst.SearchResponse)
	if err == nil && validateStruct(dst.SearchResponse) == nil {
		return nil // found the correct type
	} else {
		dst.SearchResponse = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(SearchResult)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src SearchResult) MarshalJSON() ([]byte, error) {
	if src.SearchForFacetValuesResponse != nil {
		serialized, err := json.Marshal(&src.SearchForFacetValuesResponse)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SearchForFacetValuesResponse of SearchResult: %w", err)
		}

		return serialized, nil
	}

	if src.SearchResponse != nil {
		serialized, err := json.Marshal(&src.SearchResponse)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SearchResponse of SearchResult: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj SearchResult) GetActualInstance() any {
	if obj.SearchForFacetValuesResponse != nil {
		return *obj.SearchForFacetValuesResponse
	}

	if obj.SearchResponse != nil {
		return *obj.SearchResponse
	}

	// all schemas are nil
	return nil
}
