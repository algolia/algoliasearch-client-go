// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package search

import (
	"encoding/json"
	"fmt"
)

// WithPrimary struct for WithPrimary.
type WithPrimary struct {
	// Replica indices only: the name of the primary index for this replica.
	Primary *string `json:"primary,omitempty"`
}

type WithPrimaryOption func(f *WithPrimary)

func WithWithPrimaryPrimary(val string) WithPrimaryOption {
	return func(f *WithPrimary) {
		f.Primary = &val
	}
}

// NewWithPrimary instantiates a new WithPrimary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewWithPrimary(opts ...WithPrimaryOption) *WithPrimary {
	this := &WithPrimary{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyWithPrimary return a pointer to an empty WithPrimary object.
func NewEmptyWithPrimary() *WithPrimary {
	return &WithPrimary{}
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *WithPrimary) GetPrimary() string {
	if o == nil || o.Primary == nil {
		var ret string
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithPrimary) GetPrimaryOk() (*string, bool) {
	if o == nil || o.Primary == nil {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *WithPrimary) HasPrimary() bool {
	if o != nil && o.Primary != nil {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given string and assigns it to the Primary field.
func (o *WithPrimary) SetPrimary(v string) *WithPrimary {
	o.Primary = &v
	return o
}

func (o WithPrimary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Primary != nil {
		toSerialize["primary"] = o.Primary
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal WithPrimary: %w", err)
	}

	return serialized, nil
}

func (o WithPrimary) String() string {
	out := ""
	out += fmt.Sprintf("  primary=%v\n", o.Primary)
	return fmt.Sprintf("WithPrimary {\n%s}", out)
}
