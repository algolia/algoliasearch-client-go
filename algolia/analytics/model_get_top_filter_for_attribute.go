// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package analytics

import (
	"encoding/json"
	"fmt"
)

// GetTopFilterForAttribute struct for GetTopFilterForAttribute.
type GetTopFilterForAttribute struct {
	// Attribute name.
	Attribute string `json:"attribute"`
	// Operator.
	Operator string `json:"operator"`
	// Attribute value.
	Value string `json:"value"`
	// Number of occurrences.
	Count int32 `json:"count"`
}

// NewGetTopFilterForAttribute instantiates a new GetTopFilterForAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewGetTopFilterForAttribute(attribute string, operator string, value string, count int32) *GetTopFilterForAttribute {
	this := &GetTopFilterForAttribute{}
	this.Attribute = attribute
	this.Operator = operator
	this.Value = value
	this.Count = count
	return this
}

// NewEmptyGetTopFilterForAttribute return a pointer to an empty GetTopFilterForAttribute object.
func NewEmptyGetTopFilterForAttribute() *GetTopFilterForAttribute {
	return &GetTopFilterForAttribute{}
}

// GetAttribute returns the Attribute field value.
func (o *GetTopFilterForAttribute) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *GetTopFilterForAttribute) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value.
func (o *GetTopFilterForAttribute) SetAttribute(v string) *GetTopFilterForAttribute {
	o.Attribute = v
	return o
}

// GetOperator returns the Operator field value.
func (o *GetTopFilterForAttribute) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *GetTopFilterForAttribute) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value.
func (o *GetTopFilterForAttribute) SetOperator(v string) *GetTopFilterForAttribute {
	o.Operator = v
	return o
}

// GetValue returns the Value field value.
func (o *GetTopFilterForAttribute) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GetTopFilterForAttribute) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value.
func (o *GetTopFilterForAttribute) SetValue(v string) *GetTopFilterForAttribute {
	o.Value = v
	return o
}

// GetCount returns the Count field value.
func (o *GetTopFilterForAttribute) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GetTopFilterForAttribute) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value.
func (o *GetTopFilterForAttribute) SetCount(v int32) *GetTopFilterForAttribute {
	o.Count = v
	return o
}

func (o GetTopFilterForAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["attribute"] = o.Attribute
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["count"] = o.Count
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal GetTopFilterForAttribute: %w", err)
	}

	return serialized, nil
}

func (o GetTopFilterForAttribute) String() string {
	out := ""
	out += fmt.Sprintf("  attribute=%v\n", o.Attribute)
	out += fmt.Sprintf("  operator=%v\n", o.Operator)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	return fmt.Sprintf("GetTopFilterForAttribute {\n%s}", out)
}

type NullableGetTopFilterForAttribute struct {
	value *GetTopFilterForAttribute
	isSet bool
}

func (v NullableGetTopFilterForAttribute) Get() *GetTopFilterForAttribute {
	return v.value
}

func (v *NullableGetTopFilterForAttribute) Set(val *GetTopFilterForAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTopFilterForAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTopFilterForAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTopFilterForAttribute(val *GetTopFilterForAttribute) *NullableGetTopFilterForAttribute {
	return &NullableGetTopFilterForAttribute{value: val, isSet: true}
}

func (v NullableGetTopFilterForAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableGetTopFilterForAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
