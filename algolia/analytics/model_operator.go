// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// Operator Character that characterizes how the filter is applied.  For example, for a facet filter `facet:value`, `:` is the operator. For a numeric filter `count>50`, `>` is the operator.
type Operator string

// List of operator.
const (
	OPERATOR_COLON                    Operator = ":"
	OPERATOR_LESS_THAN                Operator = "<"
	OPERATOR_LESS_THAN_OR_EQUAL_TO    Operator = "<="
	OPERATOR_EQUAL                    Operator = "="
	OPERATOR_NOT_EQUAL                Operator = "!="
	OPERATOR_GREATER_THAN             Operator = ">"
	OPERATOR_GREATER_THAN_OR_EQUAL_TO Operator = ">="
)

// All allowed values of Operator enum.
var AllowedOperatorEnumValues = []Operator{
	":",
	"<",
	"<=",
	"=",
	"!=",
	">",
	">=",
}

func (v *Operator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Operator': %w", string(src), err)
	}
	enumTypeValue := Operator(value)
	for _, existing := range AllowedOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Operator", value)
}

// NewOperatorFromValue returns a pointer to a valid Operator
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewOperatorFromValue(v string) (*Operator, error) {
	ev := Operator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Operator: valid values are %v", v, AllowedOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Operator) IsValid() bool {
	for _, existing := range AllowedOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to operator value.
func (v Operator) Ptr() *Operator {
	return &v
}
