// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// CurrencyCode Currency code.
type CurrencyCode struct {
	// Currency code.
	Currency *string `json:"currency,omitempty"`
	// Revenue associated with this search in this currency.
	Revenue *float32 `json:"revenue,omitempty"`
}

type CurrencyCodeOption func(f *CurrencyCode)

func WithCurrencyCodeCurrency(val string) CurrencyCodeOption {
	return func(f *CurrencyCode) {
		f.Currency = &val
	}
}

func WithCurrencyCodeRevenue(val float32) CurrencyCodeOption {
	return func(f *CurrencyCode) {
		f.Revenue = &val
	}
}

// NewCurrencyCode instantiates a new CurrencyCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCurrencyCode(opts ...CurrencyCodeOption) *CurrencyCode {
	this := &CurrencyCode{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyCurrencyCode return a pointer to an empty CurrencyCode object.
func NewEmptyCurrencyCode() *CurrencyCode {
	return &CurrencyCode{}
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CurrencyCode) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyCode) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CurrencyCode) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CurrencyCode) SetCurrency(v string) *CurrencyCode {
	o.Currency = &v
	return o
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *CurrencyCode) GetRevenue() float32 {
	if o == nil || o.Revenue == nil {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyCode) GetRevenueOk() (*float32, bool) {
	if o == nil || o.Revenue == nil {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *CurrencyCode) HasRevenue() bool {
	if o != nil && o.Revenue != nil {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *CurrencyCode) SetRevenue(v float32) *CurrencyCode {
	o.Revenue = &v
	return o
}

func (o CurrencyCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Revenue != nil {
		toSerialize["revenue"] = o.Revenue
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CurrencyCode: %w", err)
	}

	return serialized, nil
}

func (o CurrencyCode) String() string {
	out := ""
	out += fmt.Sprintf("  currency=%v\n", o.Currency)
	out += fmt.Sprintf("  revenue=%v\n", o.Revenue)
	return fmt.Sprintf("CurrencyCode {\n%s}", out)
}
