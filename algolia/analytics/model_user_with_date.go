// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package analytics

import (
	"encoding/json"
	"fmt"
)

// UserWithDate struct for UserWithDate.
type UserWithDate struct {
	// Date of the event in the format YYYY-MM-DD.
	Date string `json:"date"`
	// Number of occurrences.
	Count int32 `json:"count"`
}

// NewUserWithDate instantiates a new UserWithDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewUserWithDate(date string, count int32) *UserWithDate {
	this := &UserWithDate{}
	this.Date = date
	this.Count = count
	return this
}

// NewEmptyUserWithDate return a pointer to an empty UserWithDate object.
func NewEmptyUserWithDate() *UserWithDate {
	return &UserWithDate{}
}

// GetDate returns the Date field value.
func (o *UserWithDate) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *UserWithDate) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value.
func (o *UserWithDate) SetDate(v string) *UserWithDate {
	o.Date = v
	return o
}

// GetCount returns the Count field value.
func (o *UserWithDate) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UserWithDate) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value.
func (o *UserWithDate) SetCount(v int32) *UserWithDate {
	o.Count = v
	return o
}

func (o UserWithDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["count"] = o.Count
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal UserWithDate: %w", err)
	}

	return serialized, nil
}

func (o UserWithDate) String() string {
	out := ""
	out += fmt.Sprintf("  date=%v\n", o.Date)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	return fmt.Sprintf("UserWithDate {\n%s}", out)
}

type NullableUserWithDate struct {
	value *UserWithDate
	isSet bool
}

func (v NullableUserWithDate) Get() *UserWithDate {
	return v.value
}

func (v *NullableUserWithDate) Set(val *UserWithDate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWithDate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWithDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWithDate(val *UserWithDate) *NullableUserWithDate {
	return &NullableUserWithDate{value: val, isSet: true}
}

func (v NullableUserWithDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableUserWithDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
