// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// TopCountry struct for TopCountry
type TopCountry struct {
	// Country.
	Country string `json:"country" validate:"required"`
	// Number of occurrences.
	Count int32 `json:"count" validate:"required"`
}

// NewTopCountry instantiates a new TopCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopCountry(country string, count int32) *TopCountry {
	this := &TopCountry{}
	this.Country = country
	this.Count = count
	return this
}

// NewTopCountryWithDefaults instantiates a new TopCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopCountryWithDefaults() *TopCountry {
	this := &TopCountry{}
	return this
}

// GetCountry returns the Country field value
func (o *TopCountry) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *TopCountry) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *TopCountry) SetCountry(v string) {
	o.Country = v
}

// GetCount returns the Count field value
func (o *TopCountry) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TopCountry) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TopCountry) SetCount(v int32) {
	o.Count = v
}

func (o TopCountry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

func (o TopCountry) String() string {
	out := ""
	out += fmt.Sprintf("  country=%v\n", o.Country)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	return fmt.Sprintf("TopCountry {\n%s}", out)
}

type NullableTopCountry struct {
	value *TopCountry
	isSet bool
}

func (v NullableTopCountry) Get() *TopCountry {
	return v.value
}

func (v *NullableTopCountry) Set(val *TopCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableTopCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableTopCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopCountry(val *TopCountry) *NullableTopCountry {
	return &NullableTopCountry{value: val, isSet: true}
}

func (v NullableTopCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
