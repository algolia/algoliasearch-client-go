// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package analytics

import (
	"encoding/json"
	"fmt"
)

// NoResultsRateEvent struct for NoResultsRateEvent.
type NoResultsRateEvent struct {
	// Date of the event in the format YYYY-MM-DD.
	Date string `json:"date"`
	// Number of occurrences.
	NoResultCount int32 `json:"noResultCount"`
	// Number of tracked _and_ untracked searches (where the `clickAnalytics` parameter isn't `true`).
	Count int32 `json:"count"`
	// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
	Rate float64 `json:"rate"`
}

// NewNoResultsRateEvent instantiates a new NoResultsRateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewNoResultsRateEvent(date string, noResultCount int32, count int32, rate float64) *NoResultsRateEvent {
	this := &NoResultsRateEvent{}
	this.Date = date
	this.NoResultCount = noResultCount
	this.Count = count
	this.Rate = rate
	return this
}

// NewEmptyNoResultsRateEvent return a pointer to an empty NoResultsRateEvent object.
func NewEmptyNoResultsRateEvent() *NoResultsRateEvent {
	return &NoResultsRateEvent{}
}

// GetDate returns the Date field value.
func (o *NoResultsRateEvent) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *NoResultsRateEvent) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value.
func (o *NoResultsRateEvent) SetDate(v string) *NoResultsRateEvent {
	o.Date = v
	return o
}

// GetNoResultCount returns the NoResultCount field value.
func (o *NoResultsRateEvent) GetNoResultCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NoResultCount
}

// GetNoResultCountOk returns a tuple with the NoResultCount field value
// and a boolean to check if the value has been set.
func (o *NoResultsRateEvent) GetNoResultCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoResultCount, true
}

// SetNoResultCount sets field value.
func (o *NoResultsRateEvent) SetNoResultCount(v int32) *NoResultsRateEvent {
	o.NoResultCount = v
	return o
}

// GetCount returns the Count field value.
func (o *NoResultsRateEvent) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *NoResultsRateEvent) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value.
func (o *NoResultsRateEvent) SetCount(v int32) *NoResultsRateEvent {
	o.Count = v
	return o
}

// GetRate returns the Rate field value.
func (o *NoResultsRateEvent) GetRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *NoResultsRateEvent) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value.
func (o *NoResultsRateEvent) SetRate(v float64) *NoResultsRateEvent {
	o.Rate = v
	return o
}

func (o NoResultsRateEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["noResultCount"] = o.NoResultCount
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["rate"] = o.Rate
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal NoResultsRateEvent: %w", err)
	}

	return serialized, nil
}

func (o NoResultsRateEvent) String() string {
	out := ""
	out += fmt.Sprintf("  date=%v\n", o.Date)
	out += fmt.Sprintf("  noResultCount=%v\n", o.NoResultCount)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	out += fmt.Sprintf("  rate=%v\n", o.Rate)
	return fmt.Sprintf("NoResultsRateEvent {\n%s}", out)
}

type NullableNoResultsRateEvent struct {
	value *NoResultsRateEvent
	isSet bool
}

func (v NullableNoResultsRateEvent) Get() *NoResultsRateEvent {
	return v.value
}

func (v *NullableNoResultsRateEvent) Set(val *NoResultsRateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNoResultsRateEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNoResultsRateEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoResultsRateEvent(val *NoResultsRateEvent) *NullableNoResultsRateEvent {
	return &NullableNoResultsRateEvent{value: val, isSet: true}
}

func (v NullableNoResultsRateEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableNoResultsRateEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
