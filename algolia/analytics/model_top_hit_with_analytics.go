// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// TopHitWithAnalytics struct for TopHitWithAnalytics.
type TopHitWithAnalytics struct {
	// Object ID of a record that's returned as a search result.
	Hit string `json:"hit"`
	// Number of occurrences.
	Count int32 `json:"count"`
	// Click-through rate, calculated as number of tracked searches with at least one click event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.
	ClickThroughRate utils.Nullable[float64] `json:"clickThroughRate"`
	// Conversion rate, calculated as number of tracked searches with at least one conversion event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.
	ConversionRate utils.Nullable[float64] `json:"conversionRate"`
	// Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.
	TrackedHitCount int32 `json:"trackedHitCount"`
	// Number of clicks associated with this search.
	ClickCount int32 `json:"clickCount"`
	// Number of conversions from this search.
	ConversionCount int32 `json:"conversionCount"`
}

// NewTopHitWithAnalytics instantiates a new TopHitWithAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTopHitWithAnalytics(hit string, count int32, clickThroughRate utils.Nullable[float64], conversionRate utils.Nullable[float64], trackedHitCount int32, clickCount int32, conversionCount int32) *TopHitWithAnalytics {
	this := &TopHitWithAnalytics{}
	this.Hit = hit
	this.Count = count
	this.ClickThroughRate = clickThroughRate
	this.ConversionRate = conversionRate
	this.TrackedHitCount = trackedHitCount
	this.ClickCount = clickCount
	this.ConversionCount = conversionCount
	return this
}

// NewEmptyTopHitWithAnalytics return a pointer to an empty TopHitWithAnalytics object.
func NewEmptyTopHitWithAnalytics() *TopHitWithAnalytics {
	return &TopHitWithAnalytics{}
}

// GetHit returns the Hit field value.
func (o *TopHitWithAnalytics) GetHit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hit
}

// GetHitOk returns a tuple with the Hit field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetHitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hit, true
}

// SetHit sets field value.
func (o *TopHitWithAnalytics) SetHit(v string) *TopHitWithAnalytics {
	o.Hit = v
	return o
}

// GetCount returns the Count field value.
func (o *TopHitWithAnalytics) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value.
func (o *TopHitWithAnalytics) SetCount(v int32) *TopHitWithAnalytics {
	o.Count = v
	return o
}

// GetClickThroughRate returns the ClickThroughRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *TopHitWithAnalytics) GetClickThroughRate() float64 {
	if o == nil || o.ClickThroughRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ClickThroughRate.Get()
}

// GetClickThroughRateOk returns a tuple with the ClickThroughRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *TopHitWithAnalytics) GetClickThroughRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClickThroughRate.Get(), o.ClickThroughRate.IsSet()
}

// SetClickThroughRate sets field value.
func (o *TopHitWithAnalytics) SetClickThroughRate(v float64) *TopHitWithAnalytics {
	o.ClickThroughRate.Set(&v)
	return o
}

// GetConversionRate returns the ConversionRate field value.
// If the value is explicit nil, the zero value for float64 will be returned.
func (o *TopHitWithAnalytics) GetConversionRate() float64 {
	if o == nil || o.ConversionRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ConversionRate.Get()
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *TopHitWithAnalytics) GetConversionRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConversionRate.Get(), o.ConversionRate.IsSet()
}

// SetConversionRate sets field value.
func (o *TopHitWithAnalytics) SetConversionRate(v float64) *TopHitWithAnalytics {
	o.ConversionRate.Set(&v)
	return o
}

// GetTrackedHitCount returns the TrackedHitCount field value.
func (o *TopHitWithAnalytics) GetTrackedHitCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrackedHitCount
}

// GetTrackedHitCountOk returns a tuple with the TrackedHitCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetTrackedHitCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedHitCount, true
}

// SetTrackedHitCount sets field value.
func (o *TopHitWithAnalytics) SetTrackedHitCount(v int32) *TopHitWithAnalytics {
	o.TrackedHitCount = v
	return o
}

// GetClickCount returns the ClickCount field value.
func (o *TopHitWithAnalytics) GetClickCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClickCount
}

// GetClickCountOk returns a tuple with the ClickCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetClickCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickCount, true
}

// SetClickCount sets field value.
func (o *TopHitWithAnalytics) SetClickCount(v int32) *TopHitWithAnalytics {
	o.ClickCount = v
	return o
}

// GetConversionCount returns the ConversionCount field value.
func (o *TopHitWithAnalytics) GetConversionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConversionCount
}

// GetConversionCountOk returns a tuple with the ConversionCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetConversionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionCount, true
}

// SetConversionCount sets field value.
func (o *TopHitWithAnalytics) SetConversionCount(v int32) *TopHitWithAnalytics {
	o.ConversionCount = v
	return o
}

func (o TopHitWithAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["hit"] = o.Hit
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["clickThroughRate"] = o.ClickThroughRate.Get()
	}
	if true {
		toSerialize["conversionRate"] = o.ConversionRate.Get()
	}
	if true {
		toSerialize["trackedHitCount"] = o.TrackedHitCount
	}
	if true {
		toSerialize["clickCount"] = o.ClickCount
	}
	if true {
		toSerialize["conversionCount"] = o.ConversionCount
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TopHitWithAnalytics: %w", err)
	}

	return serialized, nil
}

func (o TopHitWithAnalytics) String() string {
	out := ""
	out += fmt.Sprintf("  hit=%v\n", o.Hit)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	out += fmt.Sprintf("  clickThroughRate=%v\n", o.ClickThroughRate)
	out += fmt.Sprintf("  conversionRate=%v\n", o.ConversionRate)
	out += fmt.Sprintf("  trackedHitCount=%v\n", o.TrackedHitCount)
	out += fmt.Sprintf("  clickCount=%v\n", o.ClickCount)
	out += fmt.Sprintf("  conversionCount=%v\n", o.ConversionCount)
	return fmt.Sprintf("TopHitWithAnalytics {\n%s}", out)
}
