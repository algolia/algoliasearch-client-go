// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// TopHitWithAnalytics struct for TopHitWithAnalytics
type TopHitWithAnalytics struct {
	// Hit.
	Hit string `json:"hit" validate:"required"`
	// Number of occurrences.
	Count int32 `json:"count" validate:"required"`
	// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
	ClickThroughRate float64 `json:"clickThroughRate" validate:"required"`
	// [Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
	ConversionRate float64 `json:"conversionRate" validate:"required"`
	// Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.
	TrackedSearchCount int32 `json:"trackedSearchCount" validate:"required"`
	// Number of click events.
	ClickCount int32 `json:"clickCount" validate:"required"`
	// Number of converted clicks.
	ConversionCount int32 `json:"conversionCount" validate:"required"`
}

// NewTopHitWithAnalytics instantiates a new TopHitWithAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopHitWithAnalytics(hit string, count int32, clickThroughRate float64, conversionRate float64, trackedSearchCount int32, clickCount int32, conversionCount int32) *TopHitWithAnalytics {
	this := &TopHitWithAnalytics{}
	this.Hit = hit
	this.Count = count
	this.ClickThroughRate = clickThroughRate
	this.ConversionRate = conversionRate
	this.TrackedSearchCount = trackedSearchCount
	this.ClickCount = clickCount
	this.ConversionCount = conversionCount
	return this
}

// NewTopHitWithAnalyticsWithDefaults instantiates a new TopHitWithAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopHitWithAnalyticsWithDefaults() *TopHitWithAnalytics {
	this := &TopHitWithAnalytics{}
	return this
}

// GetHit returns the Hit field value
func (o *TopHitWithAnalytics) GetHit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hit
}

// GetHitOk returns a tuple with the Hit field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetHitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hit, true
}

// SetHit sets field value
func (o *TopHitWithAnalytics) SetHit(v string) {
	o.Hit = v
}

// GetCount returns the Count field value
func (o *TopHitWithAnalytics) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TopHitWithAnalytics) SetCount(v int32) {
	o.Count = v
}

// GetClickThroughRate returns the ClickThroughRate field value
func (o *TopHitWithAnalytics) GetClickThroughRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ClickThroughRate
}

// GetClickThroughRateOk returns a tuple with the ClickThroughRate field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetClickThroughRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickThroughRate, true
}

// SetClickThroughRate sets field value
func (o *TopHitWithAnalytics) SetClickThroughRate(v float64) {
	o.ClickThroughRate = v
}

// GetConversionRate returns the ConversionRate field value
func (o *TopHitWithAnalytics) GetConversionRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetConversionRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionRate, true
}

// SetConversionRate sets field value
func (o *TopHitWithAnalytics) SetConversionRate(v float64) {
	o.ConversionRate = v
}

// GetTrackedSearchCount returns the TrackedSearchCount field value
func (o *TopHitWithAnalytics) GetTrackedSearchCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrackedSearchCount
}

// GetTrackedSearchCountOk returns a tuple with the TrackedSearchCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetTrackedSearchCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedSearchCount, true
}

// SetTrackedSearchCount sets field value
func (o *TopHitWithAnalytics) SetTrackedSearchCount(v int32) {
	o.TrackedSearchCount = v
}

// GetClickCount returns the ClickCount field value
func (o *TopHitWithAnalytics) GetClickCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClickCount
}

// GetClickCountOk returns a tuple with the ClickCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetClickCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickCount, true
}

// SetClickCount sets field value
func (o *TopHitWithAnalytics) SetClickCount(v int32) {
	o.ClickCount = v
}

// GetConversionCount returns the ConversionCount field value
func (o *TopHitWithAnalytics) GetConversionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConversionCount
}

// GetConversionCountOk returns a tuple with the ConversionCount field value
// and a boolean to check if the value has been set.
func (o *TopHitWithAnalytics) GetConversionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionCount, true
}

// SetConversionCount sets field value
func (o *TopHitWithAnalytics) SetConversionCount(v int32) {
	o.ConversionCount = v
}

func (o TopHitWithAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["hit"] = o.Hit
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["clickThroughRate"] = o.ClickThroughRate
	}
	if true {
		toSerialize["conversionRate"] = o.ConversionRate
	}
	if true {
		toSerialize["trackedSearchCount"] = o.TrackedSearchCount
	}
	if true {
		toSerialize["clickCount"] = o.ClickCount
	}
	if true {
		toSerialize["conversionCount"] = o.ConversionCount
	}
	return json.Marshal(toSerialize)
}

func (o TopHitWithAnalytics) String() string {
	out := ""
	out += fmt.Sprintf("  hit=%v\n", o.Hit)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	out += fmt.Sprintf("  clickThroughRate=%v\n", o.ClickThroughRate)
	out += fmt.Sprintf("  conversionRate=%v\n", o.ConversionRate)
	out += fmt.Sprintf("  trackedSearchCount=%v\n", o.TrackedSearchCount)
	out += fmt.Sprintf("  clickCount=%v\n", o.ClickCount)
	out += fmt.Sprintf("  conversionCount=%v\n", o.ConversionCount)
	return fmt.Sprintf("TopHitWithAnalytics {\n%s}", out)
}

type NullableTopHitWithAnalytics struct {
	value *TopHitWithAnalytics
	isSet bool
}

func (v NullableTopHitWithAnalytics) Get() *TopHitWithAnalytics {
	return v.value
}

func (v *NullableTopHitWithAnalytics) Set(val *TopHitWithAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableTopHitWithAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableTopHitWithAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopHitWithAnalytics(val *TopHitWithAnalytics) *NullableTopHitWithAnalytics {
	return &NullableTopHitWithAnalytics{value: val, isSet: true}
}

func (v NullableTopHitWithAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopHitWithAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
