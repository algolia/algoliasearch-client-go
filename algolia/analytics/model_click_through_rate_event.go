// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package analytics

import (
	"encoding/json"
	"fmt"
)

// ClickThroughRateEvent struct for ClickThroughRateEvent.
type ClickThroughRateEvent struct {
	// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
	Rate float64 `json:"rate"`
	// Number of click events.
	ClickCount int32 `json:"clickCount"`
	// Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.
	TrackedSearchCount int32 `json:"trackedSearchCount"`
	// Date of the event in the format YYYY-MM-DD.
	Date string `json:"date"`
}

// NewClickThroughRateEvent instantiates a new ClickThroughRateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewClickThroughRateEvent(rate float64, clickCount int32, trackedSearchCount int32, date string) *ClickThroughRateEvent {
	this := &ClickThroughRateEvent{}
	this.Rate = rate
	this.ClickCount = clickCount
	this.TrackedSearchCount = trackedSearchCount
	this.Date = date
	return this
}

// NewClickThroughRateEventWithDefaults instantiates a new ClickThroughRateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set.
func NewClickThroughRateEventWithDefaults() *ClickThroughRateEvent {
	this := &ClickThroughRateEvent{}
	return this
}

// GetRate returns the Rate field value.
func (o *ClickThroughRateEvent) GetRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *ClickThroughRateEvent) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value.
func (o *ClickThroughRateEvent) SetRate(v float64) {
	o.Rate = v
}

// GetClickCount returns the ClickCount field value.
func (o *ClickThroughRateEvent) GetClickCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClickCount
}

// GetClickCountOk returns a tuple with the ClickCount field value
// and a boolean to check if the value has been set.
func (o *ClickThroughRateEvent) GetClickCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClickCount, true
}

// SetClickCount sets field value.
func (o *ClickThroughRateEvent) SetClickCount(v int32) {
	o.ClickCount = v
}

// GetTrackedSearchCount returns the TrackedSearchCount field value.
func (o *ClickThroughRateEvent) GetTrackedSearchCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrackedSearchCount
}

// GetTrackedSearchCountOk returns a tuple with the TrackedSearchCount field value
// and a boolean to check if the value has been set.
func (o *ClickThroughRateEvent) GetTrackedSearchCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedSearchCount, true
}

// SetTrackedSearchCount sets field value.
func (o *ClickThroughRateEvent) SetTrackedSearchCount(v int32) {
	o.TrackedSearchCount = v
}

// GetDate returns the Date field value.
func (o *ClickThroughRateEvent) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ClickThroughRateEvent) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value.
func (o *ClickThroughRateEvent) SetDate(v string) {
	o.Date = v
}

func (o ClickThroughRateEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["rate"] = o.Rate
	}
	if true {
		toSerialize["clickCount"] = o.ClickCount
	}
	if true {
		toSerialize["trackedSearchCount"] = o.TrackedSearchCount
	}
	if true {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

func (o ClickThroughRateEvent) String() string {
	out := ""
	out += fmt.Sprintf("  rate=%v\n", o.Rate)
	out += fmt.Sprintf("  clickCount=%v\n", o.ClickCount)
	out += fmt.Sprintf("  trackedSearchCount=%v\n", o.TrackedSearchCount)
	out += fmt.Sprintf("  date=%v\n", o.Date)
	return fmt.Sprintf("ClickThroughRateEvent {\n%s}", out)
}

type NullableClickThroughRateEvent struct {
	value *ClickThroughRateEvent
	isSet bool
}

func (v NullableClickThroughRateEvent) Get() *ClickThroughRateEvent {
	return v.value
}

func (v *NullableClickThroughRateEvent) Set(val *ClickThroughRateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableClickThroughRateEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableClickThroughRateEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClickThroughRateEvent(val *ClickThroughRateEvent) *NullableClickThroughRateEvent {
	return &NullableClickThroughRateEvent{value: val, isSet: true}
}

func (v NullableClickThroughRateEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClickThroughRateEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
