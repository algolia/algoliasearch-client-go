// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// ClickPosition Click position.
type ClickPosition struct {
	// Range of positions in the search results, using the pattern `[start,end]`.  For positions 11 and up, click events are summed over the specified range. `-1` indicates the end of the list of search results.
	Position []int32 `json:"position,omitempty"`
	// Number of times this search has been clicked at that position.
	ClickCount *int32 `json:"clickCount,omitempty"`
}

type ClickPositionOption func(f *ClickPosition)

func WithClickPositionPosition(val []int32) ClickPositionOption {
	return func(f *ClickPosition) {
		f.Position = val
	}
}

func WithClickPositionClickCount(val int32) ClickPositionOption {
	return func(f *ClickPosition) {
		f.ClickCount = &val
	}
}

// NewClickPosition instantiates a new ClickPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewClickPosition(opts ...ClickPositionOption) *ClickPosition {
	this := &ClickPosition{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyClickPosition return a pointer to an empty ClickPosition object.
func NewEmptyClickPosition() *ClickPosition {
	return &ClickPosition{}
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ClickPosition) GetPosition() []int32 {
	if o == nil || o.Position == nil {
		var ret []int32
		return ret
	}
	return o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPosition) GetPositionOk() ([]int32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ClickPosition) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given []int32 and assigns it to the Position field.
func (o *ClickPosition) SetPosition(v []int32) *ClickPosition {
	o.Position = v
	return o
}

// GetClickCount returns the ClickCount field value if set, zero value otherwise.
func (o *ClickPosition) GetClickCount() int32 {
	if o == nil || o.ClickCount == nil {
		var ret int32
		return ret
	}
	return *o.ClickCount
}

// GetClickCountOk returns a tuple with the ClickCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClickPosition) GetClickCountOk() (*int32, bool) {
	if o == nil || o.ClickCount == nil {
		return nil, false
	}
	return o.ClickCount, true
}

// HasClickCount returns a boolean if a field has been set.
func (o *ClickPosition) HasClickCount() bool {
	if o != nil && o.ClickCount != nil {
		return true
	}

	return false
}

// SetClickCount gets a reference to the given int32 and assigns it to the ClickCount field.
func (o *ClickPosition) SetClickCount(v int32) *ClickPosition {
	o.ClickCount = &v
	return o
}

func (o ClickPosition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.ClickCount != nil {
		toSerialize["clickCount"] = o.ClickCount
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ClickPosition: %w", err)
	}

	return serialized, nil
}

func (o ClickPosition) String() string {
	out := ""
	out += fmt.Sprintf("  position=%v\n", o.Position)
	out += fmt.Sprintf("  clickCount=%v\n", o.ClickCount)
	return fmt.Sprintf("ClickPosition {\n%s}", out)
}
