// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// ConversionRateEvent struct for ConversionRateEvent
type ConversionRateEvent struct {
	// The click-through rate.
	Rate float64 `json:"rate" validate:"required"`
	// The number of tracked search click.
	TrackedSearchCount int32 `json:"trackedSearchCount" validate:"required"`
	// The number of converted clicks.
	ConversionCount int32 `json:"conversionCount" validate:"required"`
	// Date of the event.
	Date string `json:"date" validate:"required"`
}

// NewConversionRateEvent instantiates a new ConversionRateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionRateEvent(rate float64, trackedSearchCount int32, conversionCount int32, date string) *ConversionRateEvent {
	this := &ConversionRateEvent{}
	this.Rate = rate
	this.TrackedSearchCount = trackedSearchCount
	this.ConversionCount = conversionCount
	this.Date = date
	return this
}

// NewConversionRateEventWithDefaults instantiates a new ConversionRateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionRateEventWithDefaults() *ConversionRateEvent {
	this := &ConversionRateEvent{}
	return this
}

// GetRate returns the Rate field value
func (o *ConversionRateEvent) GetRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *ConversionRateEvent) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *ConversionRateEvent) SetRate(v float64) {
	o.Rate = v
}

// GetTrackedSearchCount returns the TrackedSearchCount field value
func (o *ConversionRateEvent) GetTrackedSearchCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrackedSearchCount
}

// GetTrackedSearchCountOk returns a tuple with the TrackedSearchCount field value
// and a boolean to check if the value has been set.
func (o *ConversionRateEvent) GetTrackedSearchCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackedSearchCount, true
}

// SetTrackedSearchCount sets field value
func (o *ConversionRateEvent) SetTrackedSearchCount(v int32) {
	o.TrackedSearchCount = v
}

// GetConversionCount returns the ConversionCount field value
func (o *ConversionRateEvent) GetConversionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConversionCount
}

// GetConversionCountOk returns a tuple with the ConversionCount field value
// and a boolean to check if the value has been set.
func (o *ConversionRateEvent) GetConversionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionCount, true
}

// SetConversionCount sets field value
func (o *ConversionRateEvent) SetConversionCount(v int32) {
	o.ConversionCount = v
}

// GetDate returns the Date field value
func (o *ConversionRateEvent) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ConversionRateEvent) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ConversionRateEvent) SetDate(v string) {
	o.Date = v
}

func (o ConversionRateEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["rate"] = o.Rate
	}
	if true {
		toSerialize["trackedSearchCount"] = o.TrackedSearchCount
	}
	if true {
		toSerialize["conversionCount"] = o.ConversionCount
	}
	if true {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

func (o ConversionRateEvent) String() string {
	out := ""
	out += fmt.Sprintf("  rate=%v\n", o.Rate)
	out += fmt.Sprintf("  trackedSearchCount=%v\n", o.TrackedSearchCount)
	out += fmt.Sprintf("  conversionCount=%v\n", o.ConversionCount)
	out += fmt.Sprintf("  date=%v\n", o.Date)
	return fmt.Sprintf("ConversionRateEvent {\n%s}", out)
}

type NullableConversionRateEvent struct {
	value *ConversionRateEvent
	isSet bool
}

func (v NullableConversionRateEvent) Get() *ConversionRateEvent {
	return v.value
}

func (v *NullableConversionRateEvent) Set(val *ConversionRateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionRateEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionRateEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionRateEvent(val *ConversionRateEvent) *NullableConversionRateEvent {
	return &NullableConversionRateEvent{value: val, isSet: true}
}

func (v NullableConversionRateEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionRateEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
