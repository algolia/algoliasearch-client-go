// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package analytics

import (
	"encoding/json"
	"fmt"
)

// DailySearches struct for DailySearches.
type DailySearches struct {
	// Date in the format YYYY-MM-DD.
	Date string `json:"date"`
	// Number of occurrences.
	Count int32 `json:"count"`
}

// NewDailySearches instantiates a new DailySearches object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewDailySearches(date string, count int32) *DailySearches {
	this := &DailySearches{}
	this.Date = date
	this.Count = count
	return this
}

// NewEmptyDailySearches return a pointer to an empty DailySearches object.
func NewEmptyDailySearches() *DailySearches {
	return &DailySearches{}
}

// GetDate returns the Date field value.
func (o *DailySearches) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *DailySearches) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value.
func (o *DailySearches) SetDate(v string) *DailySearches {
	o.Date = v
	return o
}

// GetCount returns the Count field value.
func (o *DailySearches) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *DailySearches) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value.
func (o *DailySearches) SetCount(v int32) *DailySearches {
	o.Count = v
	return o
}

func (o DailySearches) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["count"] = o.Count
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DailySearches: %w", err)
	}

	return serialized, nil
}

func (o DailySearches) String() string {
	out := ""
	out += fmt.Sprintf("  date=%v\n", o.Date)
	out += fmt.Sprintf("  count=%v\n", o.Count)
	return fmt.Sprintf("DailySearches {\n%s}", out)
}
