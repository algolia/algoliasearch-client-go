// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// LogFile struct for LogFile.
type LogFile struct {
	// Date and time of the log entry, in RFC 3339 format.
	Timestamp *string   `json:"timestamp,omitempty"`
	Level     *LogLevel `json:"level,omitempty"`
	// Details about this log entry.
	Message *string `json:"message,omitempty"`
	// Level indicating the position of a suggestion in a hierarchy of records.  For example, a `contextLevel` of 1 indicates that this suggestion belongs to a previous suggestion with `contextLevel` 0.
	ContextLevel *int32 `json:"contextLevel,omitempty"`
}

type LogFileOption func(f *LogFile)

func WithLogFileTimestamp(val string) LogFileOption {
	return func(f *LogFile) {
		f.Timestamp = &val
	}
}

func WithLogFileLevel(val LogLevel) LogFileOption {
	return func(f *LogFile) {
		f.Level = &val
	}
}

func WithLogFileMessage(val string) LogFileOption {
	return func(f *LogFile) {
		f.Message = &val
	}
}

func WithLogFileContextLevel(val int32) LogFileOption {
	return func(f *LogFile) {
		f.ContextLevel = &val
	}
}

// NewLogFile instantiates a new LogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewLogFile(opts ...LogFileOption) *LogFile {
	this := &LogFile{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyLogFile return a pointer to an empty LogFile object.
func NewEmptyLogFile() *LogFile {
	return &LogFile{}
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *LogFile) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *LogFile) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *LogFile) SetTimestamp(v string) *LogFile {
	o.Timestamp = &v
	return o
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *LogFile) GetLevel() LogLevel {
	if o == nil || o.Level == nil {
		var ret LogLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile) GetLevelOk() (*LogLevel, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *LogFile) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given LogLevel and assigns it to the Level field.
func (o *LogFile) SetLevel(v LogLevel) *LogFile {
	o.Level = &v
	return o
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LogFile) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LogFile) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LogFile) SetMessage(v string) *LogFile {
	o.Message = &v
	return o
}

// GetContextLevel returns the ContextLevel field value if set, zero value otherwise.
func (o *LogFile) GetContextLevel() int32 {
	if o == nil || o.ContextLevel == nil {
		var ret int32
		return ret
	}
	return *o.ContextLevel
}

// GetContextLevelOk returns a tuple with the ContextLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFile) GetContextLevelOk() (*int32, bool) {
	if o == nil || o.ContextLevel == nil {
		return nil, false
	}
	return o.ContextLevel, true
}

// HasContextLevel returns a boolean if a field has been set.
func (o *LogFile) HasContextLevel() bool {
	if o != nil && o.ContextLevel != nil {
		return true
	}

	return false
}

// SetContextLevel gets a reference to the given int32 and assigns it to the ContextLevel field.
func (o *LogFile) SetContextLevel(v int32) *LogFile {
	o.ContextLevel = &v
	return o
}

func (o LogFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ContextLevel != nil {
		toSerialize["contextLevel"] = o.ContextLevel
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal LogFile: %w", err)
	}

	return serialized, nil
}

func (o LogFile) String() string {
	out := ""
	out += fmt.Sprintf("  timestamp=%v\n", o.Timestamp)
	out += fmt.Sprintf("  level=%v\n", o.Level)
	out += fmt.Sprintf("  message=%v\n", o.Message)
	out += fmt.Sprintf("  contextLevel=%v\n", o.ContextLevel)
	return fmt.Sprintf("LogFile {\n%s}", out)
}
