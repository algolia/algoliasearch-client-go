// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// LogFile struct for LogFile
type LogFile struct {
	// date and time of creation of the record.
	Timestamp string   `json:"timestamp"`
	Level     LogLevel `json:"level"`
	// detailed description of what happened.
	Message string `json:"message"`
	// indicates the hierarchy of the records. For example, a record with contextLevel=1 belongs to a preceding record with contextLevel=0.
	ContextLevel int32 `json:"contextLevel"`
}

// NewLogFile instantiates a new LogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogFile(timestamp string, level LogLevel, message string, contextLevel int32) *LogFile {
	this := &LogFile{}
	this.Timestamp = timestamp
	this.Level = level
	this.Message = message
	this.ContextLevel = contextLevel
	return this
}

// NewLogFileWithDefaults instantiates a new LogFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogFileWithDefaults() *LogFile {
	this := &LogFile{}
	return this
}

// GetTimestamp returns the Timestamp field value
func (o *LogFile) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LogFile) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LogFile) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetLevel returns the Level field value
func (o *LogFile) GetLevel() LogLevel {
	if o == nil {
		var ret LogLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *LogFile) GetLevelOk() (*LogLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *LogFile) SetLevel(v LogLevel) {
	o.Level = v
}

// GetMessage returns the Message field value
func (o *LogFile) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LogFile) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LogFile) SetMessage(v string) {
	o.Message = v
}

// GetContextLevel returns the ContextLevel field value
func (o *LogFile) GetContextLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContextLevel
}

// GetContextLevelOk returns a tuple with the ContextLevel field value
// and a boolean to check if the value has been set.
func (o *LogFile) GetContextLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextLevel, true
}

// SetContextLevel sets field value
func (o *LogFile) SetContextLevel(v int32) {
	o.ContextLevel = v
}

func (o LogFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["level"] = o.Level
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["contextLevel"] = o.ContextLevel
	}
	return json.Marshal(toSerialize)
}

func (o LogFile) String() string {
	out := ""
	out += fmt.Sprintf("  timestamp=%v\n", o.Timestamp)
	out += fmt.Sprintf("  level=%v\n", o.Level)
	out += fmt.Sprintf("  message=%v\n", o.Message)
	out += fmt.Sprintf("  contextLevel=%v\n", o.ContextLevel)
	return fmt.Sprintf("LogFile {\n%s}", out)
}

type NullableLogFile struct {
	value *LogFile
	isSet bool
}

func (v NullableLogFile) Get() *LogFile {
	return v.value
}

func (v *NullableLogFile) Set(val *LogFile) {
	v.value = val
	v.isSet = true
}

func (v NullableLogFile) IsSet() bool {
	return v.isSet
}

func (v *NullableLogFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogFile(val *LogFile) *NullableLogFile {
	return &NullableLogFile{value: val, isSet: true}
}

func (v NullableLogFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
