// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// QuerySuggestionsConfigurationResponse API response for retrieving Query Suggestions configurations.
type QuerySuggestionsConfigurationResponse struct {
	// Algolia application ID to which this Query Suggestions configuration belongs.
	AppID string `json:"appID"`
	// Name of the Query Suggestions index (case-sensitive).
	IndexName string `json:"indexName"`
	// Algolia indices from which to get the popular searches for query suggestions.
	SourceIndices []SourceIndex `json:"sourceIndices"`
	Languages     Languages     `json:"languages"`
	Exclude       []string      `json:"exclude"`
	// Whether to turn on personalized query suggestions.
	EnablePersonalization bool `json:"enablePersonalization"`
	// Whether to include suggestions with special characters.
	AllowSpecialCharacters bool `json:"allowSpecialCharacters"`
}

// NewQuerySuggestionsConfigurationResponse instantiates a new QuerySuggestionsConfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewQuerySuggestionsConfigurationResponse(appID string, indexName string, sourceIndices []SourceIndex, languages Languages, exclude []string, enablePersonalization bool, allowSpecialCharacters bool) *QuerySuggestionsConfigurationResponse {
	this := &QuerySuggestionsConfigurationResponse{}
	this.AppID = appID
	this.IndexName = indexName
	this.SourceIndices = sourceIndices
	this.Languages = languages
	this.Exclude = exclude
	this.EnablePersonalization = enablePersonalization
	this.AllowSpecialCharacters = allowSpecialCharacters
	return this
}

// NewEmptyQuerySuggestionsConfigurationResponse return a pointer to an empty QuerySuggestionsConfigurationResponse object.
func NewEmptyQuerySuggestionsConfigurationResponse() *QuerySuggestionsConfigurationResponse {
	return &QuerySuggestionsConfigurationResponse{}
}

// GetAppID returns the AppID field value.
func (o *QuerySuggestionsConfigurationResponse) GetAppID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppID
}

// GetAppIDOk returns a tuple with the AppID field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetAppIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppID, true
}

// SetAppID sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetAppID(v string) *QuerySuggestionsConfigurationResponse {
	o.AppID = v
	return o
}

// GetIndexName returns the IndexName field value.
func (o *QuerySuggestionsConfigurationResponse) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetIndexName(v string) *QuerySuggestionsConfigurationResponse {
	o.IndexName = v
	return o
}

// GetSourceIndices returns the SourceIndices field value.
func (o *QuerySuggestionsConfigurationResponse) GetSourceIndices() []SourceIndex {
	if o == nil {
		var ret []SourceIndex
		return ret
	}

	return o.SourceIndices
}

// GetSourceIndicesOk returns a tuple with the SourceIndices field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetSourceIndicesOk() ([]SourceIndex, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceIndices, true
}

// SetSourceIndices sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetSourceIndices(v []SourceIndex) *QuerySuggestionsConfigurationResponse {
	o.SourceIndices = v
	return o
}

// GetLanguages returns the Languages field value.
func (o *QuerySuggestionsConfigurationResponse) GetLanguages() Languages {
	if o == nil {
		var ret Languages
		return ret
	}

	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetLanguagesOk() (*Languages, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Languages, true
}

// SetLanguages sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetLanguages(v *Languages) *QuerySuggestionsConfigurationResponse {
	o.Languages = *v
	return o
}

// GetExclude returns the Exclude field value.
// If the value is explicit nil, the zero value for []string will be returned.
func (o *QuerySuggestionsConfigurationResponse) GetExclude() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *QuerySuggestionsConfigurationResponse) GetExcludeOk() ([]string, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// SetExclude sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetExclude(v []string) *QuerySuggestionsConfigurationResponse {
	o.Exclude = v
	return o
}

// GetEnablePersonalization returns the EnablePersonalization field value.
func (o *QuerySuggestionsConfigurationResponse) GetEnablePersonalization() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePersonalization, true
}

// SetEnablePersonalization sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetEnablePersonalization(v bool) *QuerySuggestionsConfigurationResponse {
	o.EnablePersonalization = v
	return o
}

// GetAllowSpecialCharacters returns the AllowSpecialCharacters field value.
func (o *QuerySuggestionsConfigurationResponse) GetAllowSpecialCharacters() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowSpecialCharacters
}

// GetAllowSpecialCharactersOk returns a tuple with the AllowSpecialCharacters field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsConfigurationResponse) GetAllowSpecialCharactersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowSpecialCharacters, true
}

// SetAllowSpecialCharacters sets field value.
func (o *QuerySuggestionsConfigurationResponse) SetAllowSpecialCharacters(v bool) *QuerySuggestionsConfigurationResponse {
	o.AllowSpecialCharacters = v
	return o
}

func (o QuerySuggestionsConfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["appID"] = o.AppID
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if true {
		toSerialize["sourceIndices"] = o.SourceIndices
	}
	if true {
		toSerialize["languages"] = o.Languages
	}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	if true {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if true {
		toSerialize["allowSpecialCharacters"] = o.AllowSpecialCharacters
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal QuerySuggestionsConfigurationResponse: %w", err)
	}

	return serialized, nil
}

func (o QuerySuggestionsConfigurationResponse) String() string {
	out := ""
	out += fmt.Sprintf("  appID=%v\n", o.AppID)
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  sourceIndices=%v\n", o.SourceIndices)
	out += fmt.Sprintf("  languages=%v\n", o.Languages)
	out += fmt.Sprintf("  exclude=%v\n", o.Exclude)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  allowSpecialCharacters=%v\n", o.AllowSpecialCharacters)
	return fmt.Sprintf("QuerySuggestionsConfigurationResponse {\n%s}", out)
}

type NullableQuerySuggestionsConfigurationResponse struct {
	value *QuerySuggestionsConfigurationResponse
	isSet bool
}

func (v NullableQuerySuggestionsConfigurationResponse) Get() *QuerySuggestionsConfigurationResponse {
	return v.value
}

func (v *NullableQuerySuggestionsConfigurationResponse) Set(val *QuerySuggestionsConfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySuggestionsConfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySuggestionsConfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySuggestionsConfigurationResponse(val *QuerySuggestionsConfigurationResponse) *NullableQuerySuggestionsConfigurationResponse {
	return &NullableQuerySuggestionsConfigurationResponse{value: val, isSet: true}
}

func (v NullableQuerySuggestionsConfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableQuerySuggestionsConfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
