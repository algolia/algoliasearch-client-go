// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

func (r *ApiCreateConfigRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["configurationWithIndex"]; ok {
		err = json.Unmarshal(v, &r.configurationWithIndex)
		if err != nil {
			err = json.Unmarshal(b, &r.configurationWithIndex)
			if err != nil {
				return fmt.Errorf("cannot unmarshal configurationWithIndex: %w", err)
			}
		}
	} else {
		err = json.Unmarshal(b, &r.configurationWithIndex)
		if err != nil {
			return fmt.Errorf("cannot unmarshal body parameter configurationWithIndex: %w", err)
		}
	}

	return nil
}

// ApiCreateConfigRequest represents the request with all the parameters for the API call.
type ApiCreateConfigRequest struct {
	configurationWithIndex *ConfigurationWithIndex
}

// NewApiCreateConfigRequest creates an instance of the ApiCreateConfigRequest to be used for the API call.
func (c *APIClient) NewApiCreateConfigRequest(configurationWithIndex *ConfigurationWithIndex) ApiCreateConfigRequest {
	return ApiCreateConfigRequest{
		configurationWithIndex: configurationWithIndex,
	}
}

/*
CreateConfig calls the API and returns the raw response from it.

	Creates a new Query Suggestions configuration.

You can have up to 100 configurations per Algolia application.

	    Required API Key ACLs:
	    - editSettings

	Request can be constructed by NewApiCreateConfigRequest with parameters below.
	  @param configurationWithIndex ConfigurationWithIndex
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CreateConfigWithHTTPInfo(r ApiCreateConfigRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs"

	if r.configurationWithIndex == nil {
		return nil, nil, reportError("Parameter `configurationWithIndex` is required when calling `CreateConfig`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	postBody = r.configurationWithIndex
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPost, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CreateConfig casts the HTTP response body to a defined struct.

Creates a new Query Suggestions configuration.

You can have up to 100 configurations per Algolia application.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiCreateConfigRequest with parameters below.

	@param configurationWithIndex ConfigurationWithIndex
	@return BaseResponse
*/
func (c *APIClient) CreateConfig(r ApiCreateConfigRequest, opts ...utils.RequestOption) (*BaseResponse, error) {
	var returnValue *BaseResponse

	res, resBody, err := c.CreateConfigWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomDeleteRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomDeleteRequest represents the request with all the parameters for the API call.
type ApiCustomDeleteRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomDeleteRequest creates an instance of the ApiCustomDeleteRequest to be used for the API call.
func (c *APIClient) NewApiCustomDeleteRequest(path string) ApiCustomDeleteRequest {
	return ApiCustomDeleteRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomDeleteRequest and returns the request for chaining.
func (r ApiCustomDeleteRequest) WithParameters(parameters map[string]any) ApiCustomDeleteRequest {
	r.parameters = parameters
	return r
}

/*
CustomDelete calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomDeleteRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomDeleteWithHTTPInfo(r ApiCustomDeleteRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomDelete`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodDelete, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomDelete casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomDeleteRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomDelete(r ApiCustomDeleteRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomDeleteWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomGetRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomGetRequest represents the request with all the parameters for the API call.
type ApiCustomGetRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomGetRequest creates an instance of the ApiCustomGetRequest to be used for the API call.
func (c *APIClient) NewApiCustomGetRequest(path string) ApiCustomGetRequest {
	return ApiCustomGetRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomGetRequest and returns the request for chaining.
func (r ApiCustomGetRequest) WithParameters(parameters map[string]any) ApiCustomGetRequest {
	r.parameters = parameters
	return r
}

/*
CustomGet calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomGetRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomGetWithHTTPInfo(r ApiCustomGetRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomGet`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomGet casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomGetRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomGet(r ApiCustomGetRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomGetWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPostRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPostRequest represents the request with all the parameters for the API call.
type ApiCustomPostRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPostRequest creates an instance of the ApiCustomPostRequest to be used for the API call.
func (c *APIClient) NewApiCustomPostRequest(path string) ApiCustomPostRequest {
	return ApiCustomPostRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithParameters(parameters map[string]any) ApiCustomPostRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithBody(body map[string]any) ApiCustomPostRequest {
	r.body = body
	return r
}

/*
CustomPost calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomPostRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	  @param body map[string]any - Parameters to send with the custom request.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomPostWithHTTPInfo(r ApiCustomPostRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPost`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPost, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPost casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPostRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPost(r ApiCustomPostRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPostWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPutRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPutRequest represents the request with all the parameters for the API call.
type ApiCustomPutRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPutRequest creates an instance of the ApiCustomPutRequest to be used for the API call.
func (c *APIClient) NewApiCustomPutRequest(path string) ApiCustomPutRequest {
	return ApiCustomPutRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithParameters(parameters map[string]any) ApiCustomPutRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithBody(body map[string]any) ApiCustomPutRequest {
	r.body = body
	return r
}

/*
CustomPut calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomPutRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	  @param body map[string]any - Parameters to send with the custom request.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomPutWithHTTPInfo(r ApiCustomPutRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPut`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPut, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPut casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPutRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPut(r ApiCustomPutRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPutWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiDeleteConfigRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}

	return nil
}

// ApiDeleteConfigRequest represents the request with all the parameters for the API call.
type ApiDeleteConfigRequest struct {
	indexName string
}

// NewApiDeleteConfigRequest creates an instance of the ApiDeleteConfigRequest to be used for the API call.
func (c *APIClient) NewApiDeleteConfigRequest(indexName string) ApiDeleteConfigRequest {
	return ApiDeleteConfigRequest{
		indexName: indexName,
	}
}

/*
DeleteConfig calls the API and returns the raw response from it.

	Deletes a Query Suggestions configuration.

Deleting only removes the configuration and stops updates to the Query Suggestions index.
To delete the Query Suggestions index itself, use the Search API and the [Delete an index](/specs/search#tag/Indices/operation/deleteIndex) operation.

	    Required API Key ACLs:
	    - editSettings

	Request can be constructed by NewApiDeleteConfigRequest with parameters below.
	  @param indexName string - Query Suggestions index name.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) DeleteConfigWithHTTPInfo(r ApiDeleteConfigRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs/{indexName}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(utils.ParameterToString(r.indexName)))

	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `DeleteConfig`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodDelete, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
DeleteConfig casts the HTTP response body to a defined struct.

Deletes a Query Suggestions configuration.

Deleting only removes the configuration and stops updates to the Query Suggestions index.
To delete the Query Suggestions index itself, use the Search API and the [Delete an index](/specs/search#tag/Indices/operation/deleteIndex) operation.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiDeleteConfigRequest with parameters below.

	@param indexName string - Query Suggestions index name.
	@return BaseResponse
*/
func (c *APIClient) DeleteConfig(r ApiDeleteConfigRequest, opts ...utils.RequestOption) (*BaseResponse, error) {
	var returnValue *BaseResponse

	res, resBody, err := c.DeleteConfigWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

/*
GetAllConfigs calls the API and returns the raw response from it.

	  Retrieves all Query Suggestions configurations of your Algolia application.

	    Required API Key ACLs:
	    - settings

	Request can be constructed by NewApiGetAllConfigsRequest with parameters below.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetAllConfigsWithHTTPInfo(opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs"

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetAllConfigs casts the HTTP response body to a defined struct.

Retrieves all Query Suggestions configurations of your Algolia application.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetAllConfigsRequest with parameters below.

	@return []ConfigurationResponse
*/
func (c *APIClient) GetAllConfigs(opts ...utils.RequestOption) ([]ConfigurationResponse, error) {
	var returnValue []ConfigurationResponse

	res, resBody, err := c.GetAllConfigsWithHTTPInfo(opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetConfigRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}

	return nil
}

// ApiGetConfigRequest represents the request with all the parameters for the API call.
type ApiGetConfigRequest struct {
	indexName string
}

// NewApiGetConfigRequest creates an instance of the ApiGetConfigRequest to be used for the API call.
func (c *APIClient) NewApiGetConfigRequest(indexName string) ApiGetConfigRequest {
	return ApiGetConfigRequest{
		indexName: indexName,
	}
}

/*
GetConfig calls the API and returns the raw response from it.

	  Retrieves a single Query Suggestions configuration by its index name.

	    Required API Key ACLs:
	    - settings

	Request can be constructed by NewApiGetConfigRequest with parameters below.
	  @param indexName string - Query Suggestions index name.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetConfigWithHTTPInfo(r ApiGetConfigRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs/{indexName}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(utils.ParameterToString(r.indexName)))

	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `GetConfig`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetConfig casts the HTTP response body to a defined struct.

Retrieves a single Query Suggestions configuration by its index name.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetConfigRequest with parameters below.

	@param indexName string - Query Suggestions index name.
	@return ConfigurationResponse
*/
func (c *APIClient) GetConfig(r ApiGetConfigRequest, opts ...utils.RequestOption) (*ConfigurationResponse, error) {
	var returnValue *ConfigurationResponse

	res, resBody, err := c.GetConfigWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetConfigStatusRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}

	return nil
}

// ApiGetConfigStatusRequest represents the request with all the parameters for the API call.
type ApiGetConfigStatusRequest struct {
	indexName string
}

// NewApiGetConfigStatusRequest creates an instance of the ApiGetConfigStatusRequest to be used for the API call.
func (c *APIClient) NewApiGetConfigStatusRequest(indexName string) ApiGetConfigStatusRequest {
	return ApiGetConfigStatusRequest{
		indexName: indexName,
	}
}

/*
GetConfigStatus calls the API and returns the raw response from it.

	  Reports the status of a Query Suggestions index.

	    Required API Key ACLs:
	    - settings

	Request can be constructed by NewApiGetConfigStatusRequest with parameters below.
	  @param indexName string - Query Suggestions index name.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetConfigStatusWithHTTPInfo(r ApiGetConfigStatusRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs/{indexName}/status"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(utils.ParameterToString(r.indexName)))

	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `GetConfigStatus`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetConfigStatus casts the HTTP response body to a defined struct.

Reports the status of a Query Suggestions index.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetConfigStatusRequest with parameters below.

	@param indexName string - Query Suggestions index name.
	@return GetConfigStatus200Response
*/
func (c *APIClient) GetConfigStatus(r ApiGetConfigStatusRequest, opts ...utils.RequestOption) (*GetConfigStatus200Response, error) {
	var returnValue *GetConfigStatus200Response

	res, resBody, err := c.GetConfigStatusWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetLogFileRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}

	return nil
}

// ApiGetLogFileRequest represents the request with all the parameters for the API call.
type ApiGetLogFileRequest struct {
	indexName string
}

// NewApiGetLogFileRequest creates an instance of the ApiGetLogFileRequest to be used for the API call.
func (c *APIClient) NewApiGetLogFileRequest(indexName string) ApiGetLogFileRequest {
	return ApiGetLogFileRequest{
		indexName: indexName,
	}
}

/*
GetLogFile calls the API and returns the raw response from it.

	  Retrieves the logs for a single Query Suggestions index.

	    Required API Key ACLs:
	    - settings

	Request can be constructed by NewApiGetLogFileRequest with parameters below.
	  @param indexName string - Query Suggestions index name.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetLogFileWithHTTPInfo(r ApiGetLogFileRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/logs/{indexName}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(utils.ParameterToString(r.indexName)))

	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `GetLogFile`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetLogFile casts the HTTP response body to a defined struct.

Retrieves the logs for a single Query Suggestions index.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetLogFileRequest with parameters below.

	@param indexName string - Query Suggestions index name.
	@return GetLogFile200Response
*/
func (c *APIClient) GetLogFile(r ApiGetLogFileRequest, opts ...utils.RequestOption) (*GetLogFile200Response, error) {
	var returnValue *GetLogFile200Response

	res, resBody, err := c.GetLogFileWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiUpdateConfigRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}
	if v, ok := req["configuration"]; ok {
		err = json.Unmarshal(v, &r.configuration)
		if err != nil {
			err = json.Unmarshal(b, &r.configuration)
			if err != nil {
				return fmt.Errorf("cannot unmarshal configuration: %w", err)
			}
		}
	} else {
		err = json.Unmarshal(b, &r.configuration)
		if err != nil {
			return fmt.Errorf("cannot unmarshal body parameter configuration: %w", err)
		}
	}

	return nil
}

// ApiUpdateConfigRequest represents the request with all the parameters for the API call.
type ApiUpdateConfigRequest struct {
	indexName     string
	configuration *Configuration
}

// NewApiUpdateConfigRequest creates an instance of the ApiUpdateConfigRequest to be used for the API call.
func (c *APIClient) NewApiUpdateConfigRequest(indexName string, configuration *Configuration) ApiUpdateConfigRequest {
	return ApiUpdateConfigRequest{
		indexName:     indexName,
		configuration: configuration,
	}
}

/*
UpdateConfig calls the API and returns the raw response from it.

	  Updates a QuerySuggestions configuration.

	    Required API Key ACLs:
	    - editSettings

	Request can be constructed by NewApiUpdateConfigRequest with parameters below.
	  @param indexName string - Query Suggestions index name.
	  @param configuration Configuration
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) UpdateConfigWithHTTPInfo(r ApiUpdateConfigRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/configs/{indexName}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(utils.ParameterToString(r.indexName)))

	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `UpdateConfig`.")
	}

	if r.configuration == nil {
		return nil, nil, reportError("Parameter `configuration` is required when calling `UpdateConfig`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	postBody = r.configuration
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPut, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
UpdateConfig casts the HTTP response body to a defined struct.

Updates a QuerySuggestions configuration.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiUpdateConfigRequest with parameters below.

	@param indexName string - Query Suggestions index name.
	@param configuration Configuration
	@return BaseResponse
*/
func (c *APIClient) UpdateConfig(r ApiUpdateConfigRequest, opts ...utils.RequestOption) (*BaseResponse, error) {
	var returnValue *BaseResponse

	res, resBody, err := c.UpdateConfigWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}
