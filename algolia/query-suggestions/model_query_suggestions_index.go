// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// QuerySuggestionsIndex struct for QuerySuggestionsIndex
type QuerySuggestionsIndex struct {
	// Index name to target.
	IndexName string `json:"indexName" validate:"required"`
	// List of source indices used to generate a Query Suggestions index.
	SourceIndices []SourceIndexWithReplicas `json:"sourceIndices" validate:"required"`
	// De-duplicate singular and plural suggestions. For example, let's say your index contains English content, and that two suggestions “shoe” and “shoes” end up in your Query Suggestions index. If the English language is configured, only the most popular of those two suggestions would remain.
	Languages []string `json:"languages" validate:"required"`
	// List of words and patterns to exclude from the Query Suggestions index.
	Exclude []string `json:"exclude" validate:"required"`
}

// NewQuerySuggestionsIndex instantiates a new QuerySuggestionsIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySuggestionsIndex(indexName string, sourceIndices []SourceIndexWithReplicas, languages []string, exclude []string) *QuerySuggestionsIndex {
	this := &QuerySuggestionsIndex{}
	this.IndexName = indexName
	this.SourceIndices = sourceIndices
	this.Languages = languages
	this.Exclude = exclude
	return this
}

// NewQuerySuggestionsIndexWithDefaults instantiates a new QuerySuggestionsIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySuggestionsIndexWithDefaults() *QuerySuggestionsIndex {
	this := &QuerySuggestionsIndex{}
	return this
}

// GetIndexName returns the IndexName field value
func (o *QuerySuggestionsIndex) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndex) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *QuerySuggestionsIndex) SetIndexName(v string) {
	o.IndexName = v
}

// GetSourceIndices returns the SourceIndices field value
func (o *QuerySuggestionsIndex) GetSourceIndices() []SourceIndexWithReplicas {
	if o == nil {
		var ret []SourceIndexWithReplicas
		return ret
	}

	return o.SourceIndices
}

// GetSourceIndicesOk returns a tuple with the SourceIndices field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndex) GetSourceIndicesOk() ([]SourceIndexWithReplicas, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceIndices, true
}

// SetSourceIndices sets field value
func (o *QuerySuggestionsIndex) SetSourceIndices(v []SourceIndexWithReplicas) {
	o.SourceIndices = v
}

// GetLanguages returns the Languages field value
func (o *QuerySuggestionsIndex) GetLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndex) GetLanguagesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Languages, true
}

// SetLanguages sets field value
func (o *QuerySuggestionsIndex) SetLanguages(v []string) {
	o.Languages = v
}

// GetExclude returns the Exclude field value
func (o *QuerySuggestionsIndex) GetExclude() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndex) GetExcludeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exclude, true
}

// SetExclude sets field value
func (o *QuerySuggestionsIndex) SetExclude(v []string) {
	o.Exclude = v
}

func (o QuerySuggestionsIndex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if true {
		toSerialize["sourceIndices"] = o.SourceIndices
	}
	if true {
		toSerialize["languages"] = o.Languages
	}
	if true {
		toSerialize["exclude"] = o.Exclude
	}
	return json.Marshal(toSerialize)
}

func (o QuerySuggestionsIndex) String() string {
	out := ""
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  sourceIndices=%v\n", o.SourceIndices)
	out += fmt.Sprintf("  languages=%v\n", o.Languages)
	out += fmt.Sprintf("  exclude=%v\n", o.Exclude)
	return fmt.Sprintf("QuerySuggestionsIndex {\n%s}", out)
}

type NullableQuerySuggestionsIndex struct {
	value *QuerySuggestionsIndex
	isSet bool
}

func (v NullableQuerySuggestionsIndex) Get() *QuerySuggestionsIndex {
	return v.value
}

func (v *NullableQuerySuggestionsIndex) Set(val *QuerySuggestionsIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySuggestionsIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySuggestionsIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySuggestionsIndex(val *QuerySuggestionsIndex) *NullableQuerySuggestionsIndex {
	return &NullableQuerySuggestionsIndex{value: val, isSet: true}
}

func (v NullableQuerySuggestionsIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySuggestionsIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
