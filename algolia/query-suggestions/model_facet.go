// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// Facet Facet to use as category.
type Facet struct {
	// Facet name.
	Attribute *string `json:"attribute,omitempty"`
	// Number of suggestions.
	Amount *int32 `json:"amount,omitempty"`
}

type FacetOption func(f *Facet)

func WithFacetAttribute(val string) FacetOption {
	return func(f *Facet) {
		f.Attribute = &val
	}
}

func WithFacetAmount(val int32) FacetOption {
	return func(f *Facet) {
		f.Amount = &val
	}
}

// NewFacet instantiates a new Facet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacet(opts ...FacetOption) *Facet {
	this := &Facet{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewFacetWithDefaults instantiates a new Facet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetWithDefaults() *Facet {
	this := &Facet{}
	return this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Facet) GetAttribute() string {
	if o == nil || o.Attribute == nil {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Facet) GetAttributeOk() (*string, bool) {
	if o == nil || o.Attribute == nil {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Facet) HasAttribute() bool {
	if o != nil && o.Attribute != nil {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *Facet) SetAttribute(v string) {
	o.Attribute = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Facet) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Facet) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Facet) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Facet) SetAmount(v int32) {
	o.Amount = &v
}

func (o Facet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Attribute != nil {
		toSerialize["attribute"] = o.Attribute
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

func (o Facet) String() string {
	out := ""
	out += fmt.Sprintf("  attribute=%v\n", o.Attribute)
	out += fmt.Sprintf("  amount=%v\n", o.Amount)
	return fmt.Sprintf("Facet {\n%s}", out)
}

type NullableFacet struct {
	value *Facet
	isSet bool
}

func (v NullableFacet) Get() *Facet {
	return v.value
}

func (v *NullableFacet) Set(val *Facet) {
	v.value = val
	v.isSet = true
}

func (v NullableFacet) IsSet() bool {
	return v.isSet
}

func (v *NullableFacet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacet(val *Facet) *NullableFacet {
	return &NullableFacet{value: val, isSet: true}
}

func (v NullableFacet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
