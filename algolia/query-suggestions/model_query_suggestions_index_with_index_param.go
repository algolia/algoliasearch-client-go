// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package suggestions

import (
	"encoding/json"
	"fmt"
)

// QuerySuggestionsIndexWithIndexParam struct for QuerySuggestionsIndexWithIndexParam
type QuerySuggestionsIndexWithIndexParam struct {
	// List of source indices used to generate a Query Suggestions index.
	SourceIndices []SourceIndex `json:"sourceIndices"`
	// De-duplicate singular and plural suggestions. For example, let's say your index contains English content, and that two suggestions “shoe” and “shoes” end up in your Query Suggestions index. If the English language is configured, only the most popular of those two suggestions would remain.
	Languages []string `json:"languages,omitempty"`
	// List of words and patterns to exclude from the Query Suggestions index.
	Exclude []string `json:"exclude,omitempty"`
	// Index name to target.
	IndexName string `json:"indexName"`
}

type QuerySuggestionsIndexWithIndexParamOption func(f *QuerySuggestionsIndexWithIndexParam)

func WithQuerySuggestionsIndexWithIndexParamLanguages(val []string) QuerySuggestionsIndexWithIndexParamOption {
	return func(f *QuerySuggestionsIndexWithIndexParam) {
		f.Languages = val
	}
}

func WithQuerySuggestionsIndexWithIndexParamExclude(val []string) QuerySuggestionsIndexWithIndexParamOption {
	return func(f *QuerySuggestionsIndexWithIndexParam) {
		f.Exclude = val
	}
}

// NewQuerySuggestionsIndexWithIndexParam instantiates a new QuerySuggestionsIndexWithIndexParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySuggestionsIndexWithIndexParam(sourceIndices []SourceIndex, indexName string, opts ...QuerySuggestionsIndexWithIndexParamOption) *QuerySuggestionsIndexWithIndexParam {
	this := &QuerySuggestionsIndexWithIndexParam{}
	this.SourceIndices = sourceIndices
	this.IndexName = indexName
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewQuerySuggestionsIndexWithIndexParamWithDefaults instantiates a new QuerySuggestionsIndexWithIndexParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySuggestionsIndexWithIndexParamWithDefaults() *QuerySuggestionsIndexWithIndexParam {
	this := &QuerySuggestionsIndexWithIndexParam{}
	return this
}

// GetSourceIndices returns the SourceIndices field value
func (o *QuerySuggestionsIndexWithIndexParam) GetSourceIndices() []SourceIndex {
	if o == nil {
		var ret []SourceIndex
		return ret
	}

	return o.SourceIndices
}

// GetSourceIndicesOk returns a tuple with the SourceIndices field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndexWithIndexParam) GetSourceIndicesOk() ([]SourceIndex, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceIndices, true
}

// SetSourceIndices sets field value
func (o *QuerySuggestionsIndexWithIndexParam) SetSourceIndices(v []SourceIndex) {
	o.SourceIndices = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *QuerySuggestionsIndexWithIndexParam) GetLanguages() []string {
	if o == nil || o.Languages == nil {
		var ret []string
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndexWithIndexParam) GetLanguagesOk() ([]string, bool) {
	if o == nil || o.Languages == nil {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *QuerySuggestionsIndexWithIndexParam) HasLanguages() bool {
	if o != nil && o.Languages != nil {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []string and assigns it to the Languages field.
func (o *QuerySuggestionsIndexWithIndexParam) SetLanguages(v []string) {
	o.Languages = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *QuerySuggestionsIndexWithIndexParam) GetExclude() []string {
	if o == nil || o.Exclude == nil {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndexWithIndexParam) GetExcludeOk() ([]string, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *QuerySuggestionsIndexWithIndexParam) HasExclude() bool {
	if o != nil && o.Exclude != nil {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *QuerySuggestionsIndexWithIndexParam) SetExclude(v []string) {
	o.Exclude = v
}

// GetIndexName returns the IndexName field value
func (o *QuerySuggestionsIndexWithIndexParam) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestionsIndexWithIndexParam) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *QuerySuggestionsIndexWithIndexParam) SetIndexName(v string) {
	o.IndexName = v
}

func (o QuerySuggestionsIndexWithIndexParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["sourceIndices"] = o.SourceIndices
	}
	if o.Languages != nil {
		toSerialize["languages"] = o.Languages
	}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	return json.Marshal(toSerialize)
}

func (o QuerySuggestionsIndexWithIndexParam) String() string {
	out := ""
	out += fmt.Sprintf("  sourceIndices=%v\n", o.SourceIndices)
	out += fmt.Sprintf("  languages=%v\n", o.Languages)
	out += fmt.Sprintf("  exclude=%v\n", o.Exclude)
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	return fmt.Sprintf("QuerySuggestionsIndexWithIndexParam {\n%s}", out)
}

type NullableQuerySuggestionsIndexWithIndexParam struct {
	value *QuerySuggestionsIndexWithIndexParam
	isSet bool
}

func (v NullableQuerySuggestionsIndexWithIndexParam) Get() *QuerySuggestionsIndexWithIndexParam {
	return v.value
}

func (v *NullableQuerySuggestionsIndexWithIndexParam) Set(val *QuerySuggestionsIndexWithIndexParam) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySuggestionsIndexWithIndexParam) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySuggestionsIndexWithIndexParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySuggestionsIndexWithIndexParam(val *QuerySuggestionsIndexWithIndexParam) *NullableQuerySuggestionsIndexWithIndexParam {
	return &NullableQuerySuggestionsIndexWithIndexParam{value: val, isSet: true}
}

func (v NullableQuerySuggestionsIndexWithIndexParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySuggestionsIndexWithIndexParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
