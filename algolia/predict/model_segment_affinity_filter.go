// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentAffinityFilter Filter for affinity model predictions.
type SegmentAffinityFilter struct {
	Operator    SegmentFilterOperatorNumerical `json:"operator" validate:"required"`
	Value       SegmentAffinityFilterValue     `json:"value" validate:"required"`
	Probability *SegmentFilterProbability      `json:"probability,omitempty"`
}

type SegmentAffinityFilterOption func(f *SegmentAffinityFilter)

func WithSegmentAffinityFilterProbability(val SegmentFilterProbability) SegmentAffinityFilterOption {
	return func(f *SegmentAffinityFilter) {
		f.Probability = &val
	}
}

// NewSegmentAffinityFilter instantiates a new SegmentAffinityFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentAffinityFilter(operator SegmentFilterOperatorNumerical, value SegmentAffinityFilterValue, opts ...SegmentAffinityFilterOption) *SegmentAffinityFilter {
	this := &SegmentAffinityFilter{}
	this.Operator = operator
	this.Value = value
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSegmentAffinityFilterWithDefaults instantiates a new SegmentAffinityFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentAffinityFilterWithDefaults() *SegmentAffinityFilter {
	this := &SegmentAffinityFilter{}
	var operator SegmentFilterOperatorNumerical = SEGMENTFILTEROPERATORNUMERICAL_EQ
	this.Operator = operator
	return this
}

// GetOperator returns the Operator field value
func (o *SegmentAffinityFilter) GetOperator() SegmentFilterOperatorNumerical {
	if o == nil {
		var ret SegmentFilterOperatorNumerical
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *SegmentAffinityFilter) GetOperatorOk() (*SegmentFilterOperatorNumerical, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *SegmentAffinityFilter) SetOperator(v SegmentFilterOperatorNumerical) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *SegmentAffinityFilter) GetValue() SegmentAffinityFilterValue {
	if o == nil {
		var ret SegmentAffinityFilterValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SegmentAffinityFilter) GetValueOk() (*SegmentAffinityFilterValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SegmentAffinityFilter) SetValue(v SegmentAffinityFilterValue) {
	o.Value = v
}

// GetProbability returns the Probability field value if set, zero value otherwise.
func (o *SegmentAffinityFilter) GetProbability() SegmentFilterProbability {
	if o == nil || o.Probability == nil {
		var ret SegmentFilterProbability
		return ret
	}
	return *o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentAffinityFilter) GetProbabilityOk() (*SegmentFilterProbability, bool) {
	if o == nil || o.Probability == nil {
		return nil, false
	}
	return o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *SegmentAffinityFilter) HasProbability() bool {
	if o != nil && o.Probability != nil {
		return true
	}

	return false
}

// SetProbability gets a reference to the given SegmentFilterProbability and assigns it to the Probability field.
func (o *SegmentAffinityFilter) SetProbability(v SegmentFilterProbability) {
	o.Probability = &v
}

func (o SegmentAffinityFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.Probability != nil {
		toSerialize["probability"] = o.Probability
	}
	return json.Marshal(toSerialize)
}

func (o SegmentAffinityFilter) String() string {
	out := ""
	out += fmt.Sprintf("  operator=%v\n", o.Operator)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	out += fmt.Sprintf("  probability=%v\n", o.Probability)
	return fmt.Sprintf("SegmentAffinityFilter {\n%s}", out)
}

type NullableSegmentAffinityFilter struct {
	value *SegmentAffinityFilter
	isSet bool
}

func (v NullableSegmentAffinityFilter) Get() *SegmentAffinityFilter {
	return v.value
}

func (v *NullableSegmentAffinityFilter) Set(val *SegmentAffinityFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentAffinityFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentAffinityFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentAffinityFilter(val *SegmentAffinityFilter) *NullableSegmentAffinityFilter {
	return &NullableSegmentAffinityFilter{value: val, isSet: true}
}

func (v NullableSegmentAffinityFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentAffinityFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
