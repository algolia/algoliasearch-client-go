// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// UserProfile struct for UserProfile
type UserProfile struct {
	User        string       `json:"user"`
	Predictions *Predictions `json:"predictions,omitempty"`
	Properties  *Properties  `json:"properties,omitempty"`
	Segments    *Segments    `json:"segments,omitempty"`
}

type UserProfileOption func(f *UserProfile)

func WithUserProfilePredictions(val Predictions) UserProfileOption {
	return func(f *UserProfile) {
		f.Predictions = &val
	}
}

func WithUserProfileProperties(val Properties) UserProfileOption {
	return func(f *UserProfile) {
		f.Properties = &val
	}
}

func WithUserProfileSegments(val Segments) UserProfileOption {
	return func(f *UserProfile) {
		f.Segments = &val
	}
}

// NewUserProfile instantiates a new UserProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserProfile(user string, opts ...UserProfileOption) *UserProfile {
	this := &UserProfile{}
	this.User = user
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewUserProfileWithDefaults instantiates a new UserProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserProfileWithDefaults() *UserProfile {
	this := &UserProfile{}
	return this
}

// GetUser returns the User field value
func (o *UserProfile) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserProfile) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserProfile) SetUser(v string) {
	o.User = v
}

// GetPredictions returns the Predictions field value if set, zero value otherwise.
func (o *UserProfile) GetPredictions() Predictions {
	if o == nil || o.Predictions == nil {
		var ret Predictions
		return ret
	}
	return *o.Predictions
}

// GetPredictionsOk returns a tuple with the Predictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfile) GetPredictionsOk() (*Predictions, bool) {
	if o == nil || o.Predictions == nil {
		return nil, false
	}
	return o.Predictions, true
}

// HasPredictions returns a boolean if a field has been set.
func (o *UserProfile) HasPredictions() bool {
	if o != nil && o.Predictions != nil {
		return true
	}

	return false
}

// SetPredictions gets a reference to the given Predictions and assigns it to the Predictions field.
func (o *UserProfile) SetPredictions(v Predictions) {
	o.Predictions = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *UserProfile) GetProperties() Properties {
	if o == nil || o.Properties == nil {
		var ret Properties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfile) GetPropertiesOk() (*Properties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *UserProfile) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given Properties and assigns it to the Properties field.
func (o *UserProfile) SetProperties(v Properties) {
	o.Properties = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *UserProfile) GetSegments() Segments {
	if o == nil || o.Segments == nil {
		var ret Segments
		return ret
	}
	return *o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfile) GetSegmentsOk() (*Segments, bool) {
	if o == nil || o.Segments == nil {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *UserProfile) HasSegments() bool {
	if o != nil && o.Segments != nil {
		return true
	}

	return false
}

// SetSegments gets a reference to the given Segments and assigns it to the Segments field.
func (o *UserProfile) SetSegments(v Segments) {
	o.Segments = &v
}

func (o UserProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["user"] = o.User
	}
	if o.Predictions != nil {
		toSerialize["predictions"] = o.Predictions
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Segments != nil {
		toSerialize["segments"] = o.Segments
	}
	return json.Marshal(toSerialize)
}

func (o UserProfile) String() string {
	out := "UserProfile {\n"
	out += fmt.Sprintf("  user=%v\n", o.User)
	out += fmt.Sprintf("  predictions=%v\n", o.Predictions)
	out += fmt.Sprintf("  properties=%v\n", o.Properties)
	out += fmt.Sprintf("  segments=%v\n", o.Segments)
	out += "}"
	return out
}

type NullableUserProfile struct {
	value *UserProfile
	isSet bool
}

func (v NullableUserProfile) Get() *UserProfile {
	return v.value
}

func (v *NullableUserProfile) Set(val *UserProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableUserProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableUserProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserProfile(val *UserProfile) *NullableUserProfile {
	return &NullableUserProfile{value: val, isSet: true}
}

func (v NullableUserProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
