// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// Params - struct for Params
type Params struct {
	AllParams             *AllParams
	ModelsToRetrieveParam *ModelsToRetrieveParam
	TypesToRetrieveParam  *TypesToRetrieveParam
}

// AllParamsAsParams is a convenience function that returns AllParams wrapped in Params
func AllParamsAsParams(v *AllParams) Params {
	return Params{
		AllParams: v,
	}
}

// ModelsToRetrieveParamAsParams is a convenience function that returns ModelsToRetrieveParam wrapped in Params
func ModelsToRetrieveParamAsParams(v *ModelsToRetrieveParam) Params {
	return Params{
		ModelsToRetrieveParam: v,
	}
}

// TypesToRetrieveParamAsParams is a convenience function that returns TypesToRetrieveParam wrapped in Params
func TypesToRetrieveParamAsParams(v *TypesToRetrieveParam) Params {
	return Params{
		TypesToRetrieveParam: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Params) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllParams
	err = newStrictDecoder(data).Decode(&dst.AllParams)
	if err == nil {
		jsonAllParams, _ := json.Marshal(dst.AllParams)
		if string(jsonAllParams) == "{}" { // empty struct
			dst.AllParams = nil
		} else {
			match++
		}
	} else {
		dst.AllParams = nil
	}

	// try to unmarshal data into ModelsToRetrieveParam
	err = newStrictDecoder(data).Decode(&dst.ModelsToRetrieveParam)
	if err == nil {
		jsonModelsToRetrieveParam, _ := json.Marshal(dst.ModelsToRetrieveParam)
		if string(jsonModelsToRetrieveParam) == "{}" { // empty struct
			dst.ModelsToRetrieveParam = nil
		} else {
			match++
		}
	} else {
		dst.ModelsToRetrieveParam = nil
	}

	// try to unmarshal data into TypesToRetrieveParam
	err = newStrictDecoder(data).Decode(&dst.TypesToRetrieveParam)
	if err == nil {
		jsonTypesToRetrieveParam, _ := json.Marshal(dst.TypesToRetrieveParam)
		if string(jsonTypesToRetrieveParam) == "{}" { // empty struct
			dst.TypesToRetrieveParam = nil
		} else {
			match++
		}
	} else {
		dst.TypesToRetrieveParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllParams = nil
		dst.ModelsToRetrieveParam = nil
		dst.TypesToRetrieveParam = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Params)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Params)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Params) MarshalJSON() ([]byte, error) {
	if src.AllParams != nil {
		return json.Marshal(&src.AllParams)
	}

	if src.ModelsToRetrieveParam != nil {
		return json.Marshal(&src.ModelsToRetrieveParam)
	}

	if src.TypesToRetrieveParam != nil {
		return json.Marshal(&src.TypesToRetrieveParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Params) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.AllParams != nil {
		return obj.AllParams
	}

	if obj.ModelsToRetrieveParam != nil {
		return obj.ModelsToRetrieveParam
	}

	if obj.TypesToRetrieveParam != nil {
		return obj.TypesToRetrieveParam
	}

	// all schemas are nil
	return nil
}

type NullableParams struct {
	value *Params
	isSet bool
}

func (v NullableParams) Get() *Params {
	return v.value
}

func (v *NullableParams) Set(val *Params) {
	v.value = val
	v.isSet = true
}

func (v NullableParams) IsSet() bool {
	return v.isSet
}

func (v *NullableParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParams(val *Params) *NullableParams {
	return &NullableParams{value: val, isSet: true}
}

func (v NullableParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
