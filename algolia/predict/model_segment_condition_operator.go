// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentConditionOperator Operator used to combine the operands.
type SegmentConditionOperator string

// List of segmentConditionOperator
const (
	SEGMENTCONDITIONOPERATOR_AND SegmentConditionOperator = "AND"
	SEGMENTCONDITIONOPERATOR_OR  SegmentConditionOperator = "OR"
)

// All allowed values of SegmentConditionOperator enum
var AllowedSegmentConditionOperatorEnumValues = []SegmentConditionOperator{
	"AND",
	"OR",
}

func (v *SegmentConditionOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentConditionOperator(value)
	for _, existing := range AllowedSegmentConditionOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentConditionOperator", value)
}

// NewSegmentConditionOperatorFromValue returns a pointer to a valid SegmentConditionOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentConditionOperatorFromValue(v string) (*SegmentConditionOperator, error) {
	ev := SegmentConditionOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentConditionOperator: valid values are %v", v, AllowedSegmentConditionOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentConditionOperator) IsValid() bool {
	for _, existing := range AllowedSegmentConditionOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentConditionOperator value
func (v SegmentConditionOperator) Ptr() *SegmentConditionOperator {
	return &v
}

type NullableSegmentConditionOperator struct {
	value *SegmentConditionOperator
	isSet bool
}

func (v NullableSegmentConditionOperator) Get() *SegmentConditionOperator {
	return v.value
}

func (v *NullableSegmentConditionOperator) Set(val *SegmentConditionOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentConditionOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentConditionOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentConditionOperator(val *SegmentConditionOperator) *NullableSegmentConditionOperator {
	return &NullableSegmentConditionOperator{value: val, isSet: true}
}

func (v NullableSegmentConditionOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentConditionOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
