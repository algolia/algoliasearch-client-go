// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentFilterOperatorBoolean The operator used on the boolean filter value.
type SegmentFilterOperatorBoolean string

// List of segmentFilterOperatorBoolean
const (
	SEGMENTFILTEROPERATORBOOLEAN_EQ  SegmentFilterOperatorBoolean = "EQ"
	SEGMENTFILTEROPERATORBOOLEAN_NEQ SegmentFilterOperatorBoolean = "NEQ"
)

// All allowed values of SegmentFilterOperatorBoolean enum
var AllowedSegmentFilterOperatorBooleanEnumValues = []SegmentFilterOperatorBoolean{
	"EQ",
	"NEQ",
}

func (v *SegmentFilterOperatorBoolean) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentFilterOperatorBoolean(value)
	for _, existing := range AllowedSegmentFilterOperatorBooleanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentFilterOperatorBoolean", value)
}

// NewSegmentFilterOperatorBooleanFromValue returns a pointer to a valid SegmentFilterOperatorBoolean
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentFilterOperatorBooleanFromValue(v string) (*SegmentFilterOperatorBoolean, error) {
	ev := SegmentFilterOperatorBoolean(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentFilterOperatorBoolean: valid values are %v", v, AllowedSegmentFilterOperatorBooleanEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentFilterOperatorBoolean) IsValid() bool {
	for _, existing := range AllowedSegmentFilterOperatorBooleanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentFilterOperatorBoolean value
func (v SegmentFilterOperatorBoolean) Ptr() *SegmentFilterOperatorBoolean {
	return &v
}

type NullableSegmentFilterOperatorBoolean struct {
	value *SegmentFilterOperatorBoolean
	isSet bool
}

func (v NullableSegmentFilterOperatorBoolean) Get() *SegmentFilterOperatorBoolean {
	return v.value
}

func (v *NullableSegmentFilterOperatorBoolean) Set(val *SegmentFilterOperatorBoolean) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentFilterOperatorBoolean) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentFilterOperatorBoolean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentFilterOperatorBoolean(val *SegmentFilterOperatorBoolean) *NullableSegmentFilterOperatorBoolean {
	return &NullableSegmentFilterOperatorBoolean{value: val, isSet: true}
}

func (v NullableSegmentFilterOperatorBoolean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentFilterOperatorBoolean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
