// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentStatus The status of the segment.
type SegmentStatus string

// List of segmentStatus
const (
	SEGMENTSTATUS_ACTIVE  SegmentStatus = "active"
	SEGMENTSTATUS_PENDING SegmentStatus = "pending"
	SEGMENTSTATUS_FAILED  SegmentStatus = "failed"
)

// All allowed values of SegmentStatus enum
var AllowedSegmentStatusEnumValues = []SegmentStatus{
	"active",
	"pending",
	"failed",
}

func (v *SegmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentStatus(value)
	for _, existing := range AllowedSegmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentStatus", value)
}

// NewSegmentStatusFromValue returns a pointer to a valid SegmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentStatusFromValue(v string) (*SegmentStatus, error) {
	ev := SegmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentStatus: valid values are %v", v, AllowedSegmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentStatus) IsValid() bool {
	for _, existing := range AllowedSegmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentStatus value
func (v SegmentStatus) Ptr() *SegmentStatus {
	return &v
}

type NullableSegmentStatus struct {
	value *SegmentStatus
	isSet bool
}

func (v NullableSegmentStatus) Get() *SegmentStatus {
	return v.value
}

func (v *NullableSegmentStatus) Set(val *SegmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentStatus(val *SegmentStatus) *NullableSegmentStatus {
	return &NullableSegmentStatus{value: val, isSet: true}
}

func (v NullableSegmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
