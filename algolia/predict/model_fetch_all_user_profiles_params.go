// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// FetchAllUserProfilesParams - struct for FetchAllUserProfilesParams
type FetchAllUserProfilesParams struct {
	LimitParam             *LimitParam
	ModelsToRetrieveParam  *ModelsToRetrieveParam
	NextPageTokenParam     *NextPageTokenParam
	PreviousPageTokenParam *PreviousPageTokenParam
	TypesToRetrieveParam   *TypesToRetrieveParam
}

// LimitParamAsFetchAllUserProfilesParams is a convenience function that returns LimitParam wrapped in FetchAllUserProfilesParams
func LimitParamAsFetchAllUserProfilesParams(v *LimitParam) FetchAllUserProfilesParams {
	return FetchAllUserProfilesParams{
		LimitParam: v,
	}
}

// ModelsToRetrieveParamAsFetchAllUserProfilesParams is a convenience function that returns ModelsToRetrieveParam wrapped in FetchAllUserProfilesParams
func ModelsToRetrieveParamAsFetchAllUserProfilesParams(v *ModelsToRetrieveParam) FetchAllUserProfilesParams {
	return FetchAllUserProfilesParams{
		ModelsToRetrieveParam: v,
	}
}

// NextPageTokenParamAsFetchAllUserProfilesParams is a convenience function that returns NextPageTokenParam wrapped in FetchAllUserProfilesParams
func NextPageTokenParamAsFetchAllUserProfilesParams(v *NextPageTokenParam) FetchAllUserProfilesParams {
	return FetchAllUserProfilesParams{
		NextPageTokenParam: v,
	}
}

// PreviousPageTokenParamAsFetchAllUserProfilesParams is a convenience function that returns PreviousPageTokenParam wrapped in FetchAllUserProfilesParams
func PreviousPageTokenParamAsFetchAllUserProfilesParams(v *PreviousPageTokenParam) FetchAllUserProfilesParams {
	return FetchAllUserProfilesParams{
		PreviousPageTokenParam: v,
	}
}

// TypesToRetrieveParamAsFetchAllUserProfilesParams is a convenience function that returns TypesToRetrieveParam wrapped in FetchAllUserProfilesParams
func TypesToRetrieveParamAsFetchAllUserProfilesParams(v *TypesToRetrieveParam) FetchAllUserProfilesParams {
	return FetchAllUserProfilesParams{
		TypesToRetrieveParam: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FetchAllUserProfilesParams) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LimitParam
	err = newStrictDecoder(data).Decode(&dst.LimitParam)
	if err == nil {
		jsonLimitParam, _ := json.Marshal(dst.LimitParam)
		if string(jsonLimitParam) == "{}" { // empty struct
			dst.LimitParam = nil
		} else {
			match++
		}
	} else {
		dst.LimitParam = nil
	}

	// try to unmarshal data into ModelsToRetrieveParam
	err = newStrictDecoder(data).Decode(&dst.ModelsToRetrieveParam)
	if err == nil {
		jsonModelsToRetrieveParam, _ := json.Marshal(dst.ModelsToRetrieveParam)
		if string(jsonModelsToRetrieveParam) == "{}" { // empty struct
			dst.ModelsToRetrieveParam = nil
		} else {
			match++
		}
	} else {
		dst.ModelsToRetrieveParam = nil
	}

	// try to unmarshal data into NextPageTokenParam
	err = newStrictDecoder(data).Decode(&dst.NextPageTokenParam)
	if err == nil {
		jsonNextPageTokenParam, _ := json.Marshal(dst.NextPageTokenParam)
		if string(jsonNextPageTokenParam) == "{}" { // empty struct
			dst.NextPageTokenParam = nil
		} else {
			match++
		}
	} else {
		dst.NextPageTokenParam = nil
	}

	// try to unmarshal data into PreviousPageTokenParam
	err = newStrictDecoder(data).Decode(&dst.PreviousPageTokenParam)
	if err == nil {
		jsonPreviousPageTokenParam, _ := json.Marshal(dst.PreviousPageTokenParam)
		if string(jsonPreviousPageTokenParam) == "{}" { // empty struct
			dst.PreviousPageTokenParam = nil
		} else {
			match++
		}
	} else {
		dst.PreviousPageTokenParam = nil
	}

	// try to unmarshal data into TypesToRetrieveParam
	err = newStrictDecoder(data).Decode(&dst.TypesToRetrieveParam)
	if err == nil {
		jsonTypesToRetrieveParam, _ := json.Marshal(dst.TypesToRetrieveParam)
		if string(jsonTypesToRetrieveParam) == "{}" { // empty struct
			dst.TypesToRetrieveParam = nil
		} else {
			match++
		}
	} else {
		dst.TypesToRetrieveParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LimitParam = nil
		dst.ModelsToRetrieveParam = nil
		dst.NextPageTokenParam = nil
		dst.PreviousPageTokenParam = nil
		dst.TypesToRetrieveParam = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FetchAllUserProfilesParams)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FetchAllUserProfilesParams)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FetchAllUserProfilesParams) MarshalJSON() ([]byte, error) {
	if src.LimitParam != nil {
		return json.Marshal(&src.LimitParam)
	}

	if src.ModelsToRetrieveParam != nil {
		return json.Marshal(&src.ModelsToRetrieveParam)
	}

	if src.NextPageTokenParam != nil {
		return json.Marshal(&src.NextPageTokenParam)
	}

	if src.PreviousPageTokenParam != nil {
		return json.Marshal(&src.PreviousPageTokenParam)
	}

	if src.TypesToRetrieveParam != nil {
		return json.Marshal(&src.TypesToRetrieveParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FetchAllUserProfilesParams) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.LimitParam != nil {
		return obj.LimitParam
	}

	if obj.ModelsToRetrieveParam != nil {
		return obj.ModelsToRetrieveParam
	}

	if obj.NextPageTokenParam != nil {
		return obj.NextPageTokenParam
	}

	if obj.PreviousPageTokenParam != nil {
		return obj.PreviousPageTokenParam
	}

	if obj.TypesToRetrieveParam != nil {
		return obj.TypesToRetrieveParam
	}

	// all schemas are nil
	return nil
}

type NullableFetchAllUserProfilesParams struct {
	value *FetchAllUserProfilesParams
	isSet bool
}

func (v NullableFetchAllUserProfilesParams) Get() *FetchAllUserProfilesParams {
	return v.value
}

func (v *NullableFetchAllUserProfilesParams) Set(val *FetchAllUserProfilesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchAllUserProfilesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchAllUserProfilesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchAllUserProfilesParams(val *FetchAllUserProfilesParams) *NullableFetchAllUserProfilesParams {
	return &NullableFetchAllUserProfilesParams{value: val, isSet: true}
}

func (v NullableFetchAllUserProfilesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchAllUserProfilesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
