// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// UpdateSegmentParams - struct for UpdateSegmentParams
type UpdateSegmentParams struct {
	AllUpdateSegmentParams *AllUpdateSegmentParams
	SegmentConditionsParam *SegmentConditionsParam
	SegmentNameParam       *SegmentNameParam
}

// AllUpdateSegmentParamsAsUpdateSegmentParams is a convenience function that returns AllUpdateSegmentParams wrapped in UpdateSegmentParams
func AllUpdateSegmentParamsAsUpdateSegmentParams(v *AllUpdateSegmentParams) UpdateSegmentParams {
	return UpdateSegmentParams{
		AllUpdateSegmentParams: v,
	}
}

// SegmentConditionsParamAsUpdateSegmentParams is a convenience function that returns SegmentConditionsParam wrapped in UpdateSegmentParams
func SegmentConditionsParamAsUpdateSegmentParams(v *SegmentConditionsParam) UpdateSegmentParams {
	return UpdateSegmentParams{
		SegmentConditionsParam: v,
	}
}

// SegmentNameParamAsUpdateSegmentParams is a convenience function that returns SegmentNameParam wrapped in UpdateSegmentParams
func SegmentNameParamAsUpdateSegmentParams(v *SegmentNameParam) UpdateSegmentParams {
	return UpdateSegmentParams{
		SegmentNameParam: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateSegmentParams) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into AllUpdateSegmentParams
	err = newStrictDecoder(data).Decode(&dst.AllUpdateSegmentParams)
	if err == nil && validateStruct(dst.AllUpdateSegmentParams) == nil {
		jsonAllUpdateSegmentParams, _ := json.Marshal(dst.AllUpdateSegmentParams)
		if string(jsonAllUpdateSegmentParams) == "{}" { // empty struct
			dst.AllUpdateSegmentParams = nil
		} else {
			return nil
		}
	} else {
		dst.AllUpdateSegmentParams = nil
	}

	// try to unmarshal data into SegmentConditionsParam
	err = newStrictDecoder(data).Decode(&dst.SegmentConditionsParam)
	if err == nil && validateStruct(dst.SegmentConditionsParam) == nil {
		jsonSegmentConditionsParam, _ := json.Marshal(dst.SegmentConditionsParam)
		if string(jsonSegmentConditionsParam) == "{}" { // empty struct
			dst.SegmentConditionsParam = nil
		} else {
			return nil
		}
	} else {
		dst.SegmentConditionsParam = nil
	}

	// try to unmarshal data into SegmentNameParam
	err = newStrictDecoder(data).Decode(&dst.SegmentNameParam)
	if err == nil && validateStruct(dst.SegmentNameParam) == nil {
		jsonSegmentNameParam, _ := json.Marshal(dst.SegmentNameParam)
		if string(jsonSegmentNameParam) == "{}" { // empty struct
			dst.SegmentNameParam = nil
		} else {
			return nil
		}
	} else {
		dst.SegmentNameParam = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(UpdateSegmentParams)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateSegmentParams) MarshalJSON() ([]byte, error) {
	if src.AllUpdateSegmentParams != nil {
		return json.Marshal(&src.AllUpdateSegmentParams)
	}

	if src.SegmentConditionsParam != nil {
		return json.Marshal(&src.SegmentConditionsParam)
	}

	if src.SegmentNameParam != nil {
		return json.Marshal(&src.SegmentNameParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateSegmentParams) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.AllUpdateSegmentParams != nil {
		return obj.AllUpdateSegmentParams
	}

	if obj.SegmentConditionsParam != nil {
		return obj.SegmentConditionsParam
	}

	if obj.SegmentNameParam != nil {
		return obj.SegmentNameParam
	}

	// all schemas are nil
	return nil
}

type NullableUpdateSegmentParams struct {
	value *UpdateSegmentParams
	isSet bool
}

func (v NullableUpdateSegmentParams) Get() *UpdateSegmentParams {
	return v.value
}

func (v *NullableUpdateSegmentParams) Set(val *UpdateSegmentParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSegmentParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSegmentParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSegmentParams(val *UpdateSegmentParams) *NullableUpdateSegmentParams {
	return &NullableUpdateSegmentParams{value: val, isSet: true}
}

func (v NullableUpdateSegmentParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSegmentParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
