// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentType The type of the segment.
type SegmentType string

// List of segmentType
const (
	SEGMENTTYPE_COMPUTED SegmentType = "computed"
	SEGMENTTYPE_CUSTOM   SegmentType = "custom"
)

// All allowed values of SegmentType enum
var AllowedSegmentTypeEnumValues = []SegmentType{
	"computed",
	"custom",
}

func (v *SegmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentType(value)
	for _, existing := range AllowedSegmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentType", value)
}

// NewSegmentTypeFromValue returns a pointer to a valid SegmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentTypeFromValue(v string) (*SegmentType, error) {
	ev := SegmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentType: valid values are %v", v, AllowedSegmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentType) IsValid() bool {
	for _, existing := range AllowedSegmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentType value
func (v SegmentType) Ptr() *SegmentType {
	return &v
}

type NullableSegmentType struct {
	value *SegmentType
	isSet bool
}

func (v NullableSegmentType) Get() *SegmentType {
	return v.value
}

func (v *NullableSegmentType) Set(val *SegmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentType(val *SegmentType) *NullableSegmentType {
	return &NullableSegmentType{value: val, isSet: true}
}

func (v NullableSegmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
