// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// PredictionsAffinities - struct for PredictionsAffinities
type PredictionsAffinities struct {
	ModelError                   *ModelError
	PredictionsAffinitiesSuccess *PredictionsAffinitiesSuccess
}

// ModelErrorAsPredictionsAffinities is a convenience function that returns ModelError wrapped in PredictionsAffinities
func ModelErrorAsPredictionsAffinities(v *ModelError) PredictionsAffinities {
	return PredictionsAffinities{
		ModelError: v,
	}
}

// PredictionsAffinitiesSuccessAsPredictionsAffinities is a convenience function that returns PredictionsAffinitiesSuccess wrapped in PredictionsAffinities
func PredictionsAffinitiesSuccessAsPredictionsAffinities(v *PredictionsAffinitiesSuccess) PredictionsAffinities {
	return PredictionsAffinities{
		PredictionsAffinitiesSuccess: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PredictionsAffinities) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ModelError
	err = newStrictDecoder(data).Decode(&dst.ModelError)
	if err == nil {
		jsonModelError, _ := json.Marshal(dst.ModelError)
		if string(jsonModelError) == "{}" { // empty struct
			dst.ModelError = nil
		} else {
			match++
		}
	} else {
		dst.ModelError = nil
	}

	// try to unmarshal data into PredictionsAffinitiesSuccess
	err = newStrictDecoder(data).Decode(&dst.PredictionsAffinitiesSuccess)
	if err == nil {
		jsonPredictionsAffinitiesSuccess, _ := json.Marshal(dst.PredictionsAffinitiesSuccess)
		if string(jsonPredictionsAffinitiesSuccess) == "{}" { // empty struct
			dst.PredictionsAffinitiesSuccess = nil
		} else {
			match++
		}
	} else {
		dst.PredictionsAffinitiesSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ModelError = nil
		dst.PredictionsAffinitiesSuccess = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PredictionsAffinities)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PredictionsAffinities)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PredictionsAffinities) MarshalJSON() ([]byte, error) {
	if src.ModelError != nil {
		return json.Marshal(&src.ModelError)
	}

	if src.PredictionsAffinitiesSuccess != nil {
		return json.Marshal(&src.PredictionsAffinitiesSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PredictionsAffinities) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.ModelError != nil {
		return obj.ModelError
	}

	if obj.PredictionsAffinitiesSuccess != nil {
		return obj.PredictionsAffinitiesSuccess
	}

	// all schemas are nil
	return nil
}

type NullablePredictionsAffinities struct {
	value *PredictionsAffinities
	isSet bool
}

func (v NullablePredictionsAffinities) Get() *PredictionsAffinities {
	return v.value
}

func (v *NullablePredictionsAffinities) Set(val *PredictionsAffinities) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictionsAffinities) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictionsAffinities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictionsAffinities(val *PredictionsAffinities) *NullablePredictionsAffinities {
	return &NullablePredictionsAffinities{value: val, isSet: true}
}

func (v NullablePredictionsAffinities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictionsAffinities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
