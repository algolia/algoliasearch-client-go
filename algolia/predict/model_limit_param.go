// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// LimitParam struct for LimitParam
type LimitParam struct {
	Limit *int32 `json:"limit,omitempty"`
}

type LimitParamOption func(f *LimitParam)

func WithLimitParamLimit(val int32) LimitParamOption {
	return func(f *LimitParam) {
		f.Limit = &val
	}
}

// NewLimitParam instantiates a new LimitParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitParam(opts ...LimitParamOption) *LimitParam {
	this := &LimitParam{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewLimitParamWithDefaults instantiates a new LimitParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitParamWithDefaults() *LimitParam {
	this := &LimitParam{}
	return this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *LimitParam) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LimitParam) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *LimitParam) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *LimitParam) SetLimit(v int32) {
	o.Limit = &v
}

func (o LimitParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

func (o LimitParam) String() string {
	out := ""
	out += fmt.Sprintf("  limit=%v\n", o.Limit)
	return fmt.Sprintf("LimitParam {\n%s}", out)
}

type NullableLimitParam struct {
	value *LimitParam
	isSet bool
}

func (v NullableLimitParam) Get() *LimitParam {
	return v.value
}

func (v *NullableLimitParam) Set(val *LimitParam) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitParam) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitParam(val *LimitParam) *NullableLimitParam {
	return &NullableLimitParam{value: val, isSet: true}
}

func (v NullableLimitParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
