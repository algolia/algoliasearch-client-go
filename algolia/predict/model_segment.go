// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// Segment struct for Segment
type Segment struct {
	// The ID of the segment.
	SegmentID string `json:"segmentID"`
	// The name of the segment.
	Name       string                  `json:"name"`
	Conditions SegmentParentConditions `json:"conditions"`
	// The approximate number of users that matched the segment conditions when it was created, last updated, or when model inference last ran.
	Size          float32       `json:"size"`
	SegmentStatus SegmentStatus `json:"segmentStatus"`
	Type          SegmentType   `json:"type"`
	// The date and time at which the segment was last updated (RFC3339).
	LastUpdatedAt string  `json:"lastUpdatedAt"`
	ErrorMessage  *string `json:"errorMessage,omitempty"`
}

type SegmentOption func(f *Segment)

func WithSegmentErrorMessage(val string) SegmentOption {
	return func(f *Segment) {
		f.ErrorMessage = &val
	}
}

// NewSegment instantiates a new Segment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegment(segmentID string, name string, conditions SegmentParentConditions, size float32, segmentStatus SegmentStatus, type_ SegmentType, lastUpdatedAt string, opts ...SegmentOption) *Segment {
	this := &Segment{}
	this.SegmentID = segmentID
	this.Name = name
	this.Conditions = conditions
	this.Size = size
	this.SegmentStatus = segmentStatus
	this.Type = type_
	this.LastUpdatedAt = lastUpdatedAt
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSegmentWithDefaults instantiates a new Segment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentWithDefaults() *Segment {
	this := &Segment{}
	return this
}

// GetSegmentID returns the SegmentID field value
func (o *Segment) GetSegmentID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SegmentID
}

// GetSegmentIDOk returns a tuple with the SegmentID field value
// and a boolean to check if the value has been set.
func (o *Segment) GetSegmentIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentID, true
}

// SetSegmentID sets field value
func (o *Segment) SetSegmentID(v string) {
	o.SegmentID = v
}

// GetName returns the Name field value
func (o *Segment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Segment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Segment) SetName(v string) {
	o.Name = v
}

// GetConditions returns the Conditions field value
func (o *Segment) GetConditions() SegmentParentConditions {
	if o == nil {
		var ret SegmentParentConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *Segment) GetConditionsOk() (*SegmentParentConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *Segment) SetConditions(v SegmentParentConditions) {
	o.Conditions = v
}

// GetSize returns the Size field value
func (o *Segment) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Segment) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Segment) SetSize(v float32) {
	o.Size = v
}

// GetSegmentStatus returns the SegmentStatus field value
func (o *Segment) GetSegmentStatus() SegmentStatus {
	if o == nil {
		var ret SegmentStatus
		return ret
	}

	return o.SegmentStatus
}

// GetSegmentStatusOk returns a tuple with the SegmentStatus field value
// and a boolean to check if the value has been set.
func (o *Segment) GetSegmentStatusOk() (*SegmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentStatus, true
}

// SetSegmentStatus sets field value
func (o *Segment) SetSegmentStatus(v SegmentStatus) {
	o.SegmentStatus = v
}

// GetType returns the Type field value
func (o *Segment) GetType() SegmentType {
	if o == nil {
		var ret SegmentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Segment) GetTypeOk() (*SegmentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Segment) SetType(v SegmentType) {
	o.Type = v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value
func (o *Segment) GetLastUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Segment) GetLastUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAt, true
}

// SetLastUpdatedAt sets field value
func (o *Segment) SetLastUpdatedAt(v string) {
	o.LastUpdatedAt = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *Segment) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Segment) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *Segment) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *Segment) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o Segment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["segmentID"] = o.SegmentID
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["segmentStatus"] = o.SegmentStatus
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["lastUpdatedAt"] = o.LastUpdatedAt
	}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

func (o Segment) String() string {
	out := ""
	out += fmt.Sprintf("  segmentID=%v\n", o.SegmentID)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  conditions=%v\n", o.Conditions)
	out += fmt.Sprintf("  size=%v\n", o.Size)
	out += fmt.Sprintf("  segmentStatus=%v\n", o.SegmentStatus)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	out += fmt.Sprintf("  lastUpdatedAt=%v\n", o.LastUpdatedAt)
	out += fmt.Sprintf("  errorMessage=%v\n", o.ErrorMessage)
	return fmt.Sprintf("Segment {\n%s}", out)
}

type NullableSegment struct {
	value *Segment
	isSet bool
}

func (v NullableSegment) Get() *Segment {
	return v.value
}

func (v *NullableSegment) Set(val *Segment) {
	v.value = val
	v.isSet = true
}

func (v NullableSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegment(val *Segment) *NullableSegment {
	return &NullableSegment{value: val, isSet: true}
}

func (v NullableSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
