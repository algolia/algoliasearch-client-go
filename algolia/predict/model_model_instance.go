// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// ModelInstance struct for ModelInstance
type ModelInstance struct {
	// ID of the model.
	ModelID string `json:"modelID"`
	// Name of model instance.
	Name            string            `json:"name"`
	Type            ModelsToRetrieve  `json:"type"`
	SourceID        string            `json:"sourceID"`
	Index           string            `json:"index"`
	ModelAttributes []ModelAttributes `json:"modelAttributes,omitempty"`
	// The date and time this model instance was last trained.
	LastTrained string `json:"lastTrained"`
	// The date and time this model instance generated its last inference.
	LastInference string                       `json:"lastInference"`
	ErrorMessage  *string                      `json:"errorMessage,omitempty"`
	ModelStatus   GetModelInstanceConfigStatus `json:"modelStatus"`
}

type ModelInstanceOption func(f *ModelInstance)

func WithModelInstanceModelAttributes(val []ModelAttributes) ModelInstanceOption {
	return func(f *ModelInstance) {
		f.ModelAttributes = val
	}
}

func WithModelInstanceErrorMessage(val string) ModelInstanceOption {
	return func(f *ModelInstance) {
		f.ErrorMessage = &val
	}
}

// NewModelInstance instantiates a new ModelInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelInstance(modelID string, name string, type_ ModelsToRetrieve, sourceID string, index string, lastTrained string, lastInference string, modelStatus GetModelInstanceConfigStatus, opts ...ModelInstanceOption) *ModelInstance {
	this := &ModelInstance{}
	this.ModelID = modelID
	this.Name = name
	this.Type = type_
	this.SourceID = sourceID
	this.Index = index
	this.LastTrained = lastTrained
	this.LastInference = lastInference
	this.ModelStatus = modelStatus
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewModelInstanceWithDefaults instantiates a new ModelInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelInstanceWithDefaults() *ModelInstance {
	this := &ModelInstance{}
	return this
}

// GetModelID returns the ModelID field value
func (o *ModelInstance) GetModelID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelID
}

// GetModelIDOk returns a tuple with the ModelID field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetModelIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelID, true
}

// SetModelID sets field value
func (o *ModelInstance) SetModelID(v string) {
	o.ModelID = v
}

// GetName returns the Name field value
func (o *ModelInstance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelInstance) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ModelInstance) GetType() ModelsToRetrieve {
	if o == nil {
		var ret ModelsToRetrieve
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetTypeOk() (*ModelsToRetrieve, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ModelInstance) SetType(v ModelsToRetrieve) {
	o.Type = v
}

// GetSourceID returns the SourceID field value
func (o *ModelInstance) GetSourceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceID
}

// GetSourceIDOk returns a tuple with the SourceID field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetSourceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceID, true
}

// SetSourceID sets field value
func (o *ModelInstance) SetSourceID(v string) {
	o.SourceID = v
}

// GetIndex returns the Index field value
func (o *ModelInstance) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *ModelInstance) SetIndex(v string) {
	o.Index = v
}

// GetModelAttributes returns the ModelAttributes field value if set, zero value otherwise.
func (o *ModelInstance) GetModelAttributes() []ModelAttributes {
	if o == nil || o.ModelAttributes == nil {
		var ret []ModelAttributes
		return ret
	}
	return o.ModelAttributes
}

// GetModelAttributesOk returns a tuple with the ModelAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetModelAttributesOk() ([]ModelAttributes, bool) {
	if o == nil || o.ModelAttributes == nil {
		return nil, false
	}
	return o.ModelAttributes, true
}

// HasModelAttributes returns a boolean if a field has been set.
func (o *ModelInstance) HasModelAttributes() bool {
	if o != nil && o.ModelAttributes != nil {
		return true
	}

	return false
}

// SetModelAttributes gets a reference to the given []ModelAttributes and assigns it to the ModelAttributes field.
func (o *ModelInstance) SetModelAttributes(v []ModelAttributes) {
	o.ModelAttributes = v
}

// GetLastTrained returns the LastTrained field value
func (o *ModelInstance) GetLastTrained() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastTrained
}

// GetLastTrainedOk returns a tuple with the LastTrained field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetLastTrainedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastTrained, true
}

// SetLastTrained sets field value
func (o *ModelInstance) SetLastTrained(v string) {
	o.LastTrained = v
}

// GetLastInference returns the LastInference field value
func (o *ModelInstance) GetLastInference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastInference
}

// GetLastInferenceOk returns a tuple with the LastInference field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetLastInferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastInference, true
}

// SetLastInference sets field value
func (o *ModelInstance) SetLastInference(v string) {
	o.LastInference = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ModelInstance) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ModelInstance) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ModelInstance) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetModelStatus returns the ModelStatus field value
func (o *ModelInstance) GetModelStatus() GetModelInstanceConfigStatus {
	if o == nil {
		var ret GetModelInstanceConfigStatus
		return ret
	}

	return o.ModelStatus
}

// GetModelStatusOk returns a tuple with the ModelStatus field value
// and a boolean to check if the value has been set.
func (o *ModelInstance) GetModelStatusOk() (*GetModelInstanceConfigStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelStatus, true
}

// SetModelStatus sets field value
func (o *ModelInstance) SetModelStatus(v GetModelInstanceConfigStatus) {
	o.ModelStatus = v
}

func (o ModelInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["modelID"] = o.ModelID
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["sourceID"] = o.SourceID
	}
	if true {
		toSerialize["index"] = o.Index
	}
	if o.ModelAttributes != nil {
		toSerialize["modelAttributes"] = o.ModelAttributes
	}
	if true {
		toSerialize["lastTrained"] = o.LastTrained
	}
	if true {
		toSerialize["lastInference"] = o.LastInference
	}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if true {
		toSerialize["modelStatus"] = o.ModelStatus
	}
	return json.Marshal(toSerialize)
}

func (o ModelInstance) String() string {
	out := ""
	out += fmt.Sprintf("  modelID=%v\n", o.ModelID)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	out += fmt.Sprintf("  sourceID=%v\n", o.SourceID)
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  modelAttributes=%v\n", o.ModelAttributes)
	out += fmt.Sprintf("  lastTrained=%v\n", o.LastTrained)
	out += fmt.Sprintf("  lastInference=%v\n", o.LastInference)
	out += fmt.Sprintf("  errorMessage=%v\n", o.ErrorMessage)
	out += fmt.Sprintf("  modelStatus=%v\n", o.ModelStatus)
	return fmt.Sprintf("ModelInstance {\n%s}", out)
}

type NullableModelInstance struct {
	value *ModelInstance
	isSet bool
}

func (v NullableModelInstance) Get() *ModelInstance {
	return v.value
}

func (v *NullableModelInstance) Set(val *ModelInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableModelInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableModelInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelInstance(val *ModelInstance) *NullableModelInstance {
	return &NullableModelInstance{value: val, isSet: true}
}

func (v NullableModelInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
