// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// ModelsToRetrieve the model 'ModelsToRetrieve'
type ModelsToRetrieve string

// List of modelsToRetrieve
const (
	MODELSTORETRIEVE_FUNNEL_STAGE ModelsToRetrieve = "funnel_stage"
	MODELSTORETRIEVE_ORDER_VALUE  ModelsToRetrieve = "order_value"
	MODELSTORETRIEVE_AFFINITIES   ModelsToRetrieve = "affinities"
)

// All allowed values of ModelsToRetrieve enum
var AllowedModelsToRetrieveEnumValues = []ModelsToRetrieve{
	"funnel_stage",
	"order_value",
	"affinities",
}

func (v *ModelsToRetrieve) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsToRetrieve(value)
	for _, existing := range AllowedModelsToRetrieveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsToRetrieve", value)
}

// NewModelsToRetrieveFromValue returns a pointer to a valid ModelsToRetrieve
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsToRetrieveFromValue(v string) (*ModelsToRetrieve, error) {
	ev := ModelsToRetrieve(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsToRetrieve: valid values are %v", v, AllowedModelsToRetrieveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsToRetrieve) IsValid() bool {
	for _, existing := range AllowedModelsToRetrieveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to modelsToRetrieve value
func (v ModelsToRetrieve) Ptr() *ModelsToRetrieve {
	return &v
}

type NullableModelsToRetrieve struct {
	value *ModelsToRetrieve
	isSet bool
}

func (v NullableModelsToRetrieve) Get() *ModelsToRetrieve {
	return v.value
}

func (v *NullableModelsToRetrieve) Set(val *ModelsToRetrieve) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsToRetrieve) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsToRetrieve) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsToRetrieve(val *ModelsToRetrieve) *NullableModelsToRetrieve {
	return &NullableModelsToRetrieve{value: val, isSet: true}
}

func (v NullableModelsToRetrieve) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsToRetrieve) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
