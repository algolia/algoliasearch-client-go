// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// TypesToRetrieve the model 'TypesToRetrieve'
type TypesToRetrieve string

// List of typesToRetrieve
const (
	TYPESTORETRIEVE_PROPERTIES TypesToRetrieve = "properties"
	TYPESTORETRIEVE_SEGMENTS   TypesToRetrieve = "segments"
)

// All allowed values of TypesToRetrieve enum
var AllowedTypesToRetrieveEnumValues = []TypesToRetrieve{
	"properties",
	"segments",
}

func (v *TypesToRetrieve) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesToRetrieve(value)
	for _, existing := range AllowedTypesToRetrieveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesToRetrieve", value)
}

// NewTypesToRetrieveFromValue returns a pointer to a valid TypesToRetrieve
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesToRetrieveFromValue(v string) (*TypesToRetrieve, error) {
	ev := TypesToRetrieve(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesToRetrieve: valid values are %v", v, AllowedTypesToRetrieveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesToRetrieve) IsValid() bool {
	for _, existing := range AllowedTypesToRetrieveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to typesToRetrieve value
func (v TypesToRetrieve) Ptr() *TypesToRetrieve {
	return &v
}

type NullableTypesToRetrieve struct {
	value *TypesToRetrieve
	isSet bool
}

func (v NullableTypesToRetrieve) Get() *TypesToRetrieve {
	return v.value
}

func (v *NullableTypesToRetrieve) Set(val *TypesToRetrieve) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesToRetrieve) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesToRetrieve) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesToRetrieve(val *TypesToRetrieve) *NullableTypesToRetrieve {
	return &NullableTypesToRetrieve{value: val, isSet: true}
}

func (v NullableTypesToRetrieve) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesToRetrieve) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
