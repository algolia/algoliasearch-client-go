// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// ModelStatus `active` - model is running and generating predictions. The active value is allowed only if the current status of the model is `inactive`. \\ `inactive` - model training and inference have been paused. The inactive value is allowed only if the current status of the model is `active`.
type ModelStatus string

// List of modelStatus
const (
	MODELSTATUS_ACTIVE   ModelStatus = "active"
	MODELSTATUS_INACTIVE ModelStatus = "inactive"
)

// All allowed values of ModelStatus enum
var AllowedModelStatusEnumValues = []ModelStatus{
	"active",
	"inactive",
}

func (v *ModelStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelStatus(value)
	for _, existing := range AllowedModelStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelStatus", value)
}

// NewModelStatusFromValue returns a pointer to a valid ModelStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelStatusFromValue(v string) (*ModelStatus, error) {
	ev := ModelStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelStatus: valid values are %v", v, AllowedModelStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelStatus) IsValid() bool {
	for _, existing := range AllowedModelStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to modelStatus value
func (v ModelStatus) Ptr() *ModelStatus {
	return &v
}

type NullableModelStatus struct {
	value *ModelStatus
	isSet bool
}

func (v NullableModelStatus) Get() *ModelStatus {
	return v.value
}

func (v *NullableModelStatus) Set(val *ModelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelStatus(val *ModelStatus) *NullableModelStatus {
	return &NullableModelStatus{value: val, isSet: true}
}

func (v NullableModelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
