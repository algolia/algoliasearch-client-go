// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// PredictionsOrderValue - struct for PredictionsOrderValue
type PredictionsOrderValue struct {
	ModelError                   *ModelError
	PredictionsOrderValueSuccess *PredictionsOrderValueSuccess
}

// ModelErrorAsPredictionsOrderValue is a convenience function that returns ModelError wrapped in PredictionsOrderValue
func ModelErrorAsPredictionsOrderValue(v *ModelError) PredictionsOrderValue {
	return PredictionsOrderValue{
		ModelError: v,
	}
}

// PredictionsOrderValueSuccessAsPredictionsOrderValue is a convenience function that returns PredictionsOrderValueSuccess wrapped in PredictionsOrderValue
func PredictionsOrderValueSuccessAsPredictionsOrderValue(v *PredictionsOrderValueSuccess) PredictionsOrderValue {
	return PredictionsOrderValue{
		PredictionsOrderValueSuccess: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PredictionsOrderValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ModelError
	err = newStrictDecoder(data).Decode(&dst.ModelError)
	if err == nil {
		jsonModelError, _ := json.Marshal(dst.ModelError)
		if string(jsonModelError) == "{}" { // empty struct
			dst.ModelError = nil
		} else {
			match++
		}
	} else {
		dst.ModelError = nil
	}

	// try to unmarshal data into PredictionsOrderValueSuccess
	err = newStrictDecoder(data).Decode(&dst.PredictionsOrderValueSuccess)
	if err == nil {
		jsonPredictionsOrderValueSuccess, _ := json.Marshal(dst.PredictionsOrderValueSuccess)
		if string(jsonPredictionsOrderValueSuccess) == "{}" { // empty struct
			dst.PredictionsOrderValueSuccess = nil
		} else {
			match++
		}
	} else {
		dst.PredictionsOrderValueSuccess = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ModelError = nil
		dst.PredictionsOrderValueSuccess = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PredictionsOrderValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PredictionsOrderValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PredictionsOrderValue) MarshalJSON() ([]byte, error) {
	if src.ModelError != nil {
		return json.Marshal(&src.ModelError)
	}

	if src.PredictionsOrderValueSuccess != nil {
		return json.Marshal(&src.PredictionsOrderValueSuccess)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PredictionsOrderValue) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.ModelError != nil {
		return obj.ModelError
	}

	if obj.PredictionsOrderValueSuccess != nil {
		return obj.PredictionsOrderValueSuccess
	}

	// all schemas are nil
	return nil
}

type NullablePredictionsOrderValue struct {
	value *PredictionsOrderValue
	isSet bool
}

func (v NullablePredictionsOrderValue) Get() *PredictionsOrderValue {
	return v.value
}

func (v *NullablePredictionsOrderValue) Set(val *PredictionsOrderValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictionsOrderValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictionsOrderValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictionsOrderValue(val *PredictionsOrderValue) *NullablePredictionsOrderValue {
	return &NullablePredictionsOrderValue{value: val, isSet: true}
}

func (v NullablePredictionsOrderValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictionsOrderValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
