// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// AllParams struct for AllParams
type AllParams struct {
	ModelsToRetrieve []ModelsToRetrieve `json:"modelsToRetrieve,omitempty"`
	TypesToRetrieve  []TypesToRetrieve  `json:"typesToRetrieve,omitempty"`
}

type AllParamsOption func(f *AllParams)

func WithAllParamsModelsToRetrieve(val []ModelsToRetrieve) AllParamsOption {
	return func(f *AllParams) {
		f.ModelsToRetrieve = val
	}
}

func WithAllParamsTypesToRetrieve(val []TypesToRetrieve) AllParamsOption {
	return func(f *AllParams) {
		f.TypesToRetrieve = val
	}
}

// NewAllParams instantiates a new AllParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllParams(opts ...AllParamsOption) *AllParams {
	this := &AllParams{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewAllParamsWithDefaults instantiates a new AllParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllParamsWithDefaults() *AllParams {
	this := &AllParams{}
	return this
}

// GetModelsToRetrieve returns the ModelsToRetrieve field value if set, zero value otherwise.
func (o *AllParams) GetModelsToRetrieve() []ModelsToRetrieve {
	if o == nil || o.ModelsToRetrieve == nil {
		var ret []ModelsToRetrieve
		return ret
	}
	return o.ModelsToRetrieve
}

// GetModelsToRetrieveOk returns a tuple with the ModelsToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllParams) GetModelsToRetrieveOk() ([]ModelsToRetrieve, bool) {
	if o == nil || o.ModelsToRetrieve == nil {
		return nil, false
	}
	return o.ModelsToRetrieve, true
}

// HasModelsToRetrieve returns a boolean if a field has been set.
func (o *AllParams) HasModelsToRetrieve() bool {
	if o != nil && o.ModelsToRetrieve != nil {
		return true
	}

	return false
}

// SetModelsToRetrieve gets a reference to the given []ModelsToRetrieve and assigns it to the ModelsToRetrieve field.
func (o *AllParams) SetModelsToRetrieve(v []ModelsToRetrieve) {
	o.ModelsToRetrieve = v
}

// GetTypesToRetrieve returns the TypesToRetrieve field value if set, zero value otherwise.
func (o *AllParams) GetTypesToRetrieve() []TypesToRetrieve {
	if o == nil || o.TypesToRetrieve == nil {
		var ret []TypesToRetrieve
		return ret
	}
	return o.TypesToRetrieve
}

// GetTypesToRetrieveOk returns a tuple with the TypesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllParams) GetTypesToRetrieveOk() ([]TypesToRetrieve, bool) {
	if o == nil || o.TypesToRetrieve == nil {
		return nil, false
	}
	return o.TypesToRetrieve, true
}

// HasTypesToRetrieve returns a boolean if a field has been set.
func (o *AllParams) HasTypesToRetrieve() bool {
	if o != nil && o.TypesToRetrieve != nil {
		return true
	}

	return false
}

// SetTypesToRetrieve gets a reference to the given []TypesToRetrieve and assigns it to the TypesToRetrieve field.
func (o *AllParams) SetTypesToRetrieve(v []TypesToRetrieve) {
	o.TypesToRetrieve = v
}

func (o AllParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.ModelsToRetrieve != nil {
		toSerialize["modelsToRetrieve"] = o.ModelsToRetrieve
	}
	if o.TypesToRetrieve != nil {
		toSerialize["typesToRetrieve"] = o.TypesToRetrieve
	}
	return json.Marshal(toSerialize)
}

func (o AllParams) String() string {
	out := "AllParams {\n"
	out += fmt.Sprintf("  modelsToRetrieve=%v\n", o.ModelsToRetrieve)
	out += fmt.Sprintf("  typesToRetrieve=%v\n", o.TypesToRetrieve)
	out += "}"
	return out
}

type NullableAllParams struct {
	value *AllParams
	isSet bool
}

func (v NullableAllParams) Get() *AllParams {
	return v.value
}

func (v *NullableAllParams) Set(val *AllParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAllParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAllParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllParams(val *AllParams) *NullableAllParams {
	return &NullableAllParams{value: val, isSet: true}
}

func (v NullableAllParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
