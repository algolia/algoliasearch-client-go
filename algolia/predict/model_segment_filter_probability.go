// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentFilterProbability Probability of the filter.
type SegmentFilterProbability struct {
	LT  *float32 `json:"LT,omitempty"`
	LTE *float32 `json:"LTE,omitempty"`
	GT  *float32 `json:"GT,omitempty"`
	GTE *float32 `json:"GTE,omitempty"`
}

type SegmentFilterProbabilityOption func(f *SegmentFilterProbability)

func WithSegmentFilterProbabilityLT(val float32) SegmentFilterProbabilityOption {
	return func(f *SegmentFilterProbability) {
		f.LT = &val
	}
}

func WithSegmentFilterProbabilityLTE(val float32) SegmentFilterProbabilityOption {
	return func(f *SegmentFilterProbability) {
		f.LTE = &val
	}
}

func WithSegmentFilterProbabilityGT(val float32) SegmentFilterProbabilityOption {
	return func(f *SegmentFilterProbability) {
		f.GT = &val
	}
}

func WithSegmentFilterProbabilityGTE(val float32) SegmentFilterProbabilityOption {
	return func(f *SegmentFilterProbability) {
		f.GTE = &val
	}
}

// NewSegmentFilterProbability instantiates a new SegmentFilterProbability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentFilterProbability(opts ...SegmentFilterProbabilityOption) *SegmentFilterProbability {
	this := &SegmentFilterProbability{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewSegmentFilterProbabilityWithDefaults instantiates a new SegmentFilterProbability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentFilterProbabilityWithDefaults() *SegmentFilterProbability {
	this := &SegmentFilterProbability{}
	return this
}

// GetLT returns the LT field value if set, zero value otherwise.
func (o *SegmentFilterProbability) GetLT() float32 {
	if o == nil || o.LT == nil {
		var ret float32
		return ret
	}
	return *o.LT
}

// GetLTOk returns a tuple with the LT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentFilterProbability) GetLTOk() (*float32, bool) {
	if o == nil || o.LT == nil {
		return nil, false
	}
	return o.LT, true
}

// HasLT returns a boolean if a field has been set.
func (o *SegmentFilterProbability) HasLT() bool {
	if o != nil && o.LT != nil {
		return true
	}

	return false
}

// SetLT gets a reference to the given float32 and assigns it to the LT field.
func (o *SegmentFilterProbability) SetLT(v float32) {
	o.LT = &v
}

// GetLTE returns the LTE field value if set, zero value otherwise.
func (o *SegmentFilterProbability) GetLTE() float32 {
	if o == nil || o.LTE == nil {
		var ret float32
		return ret
	}
	return *o.LTE
}

// GetLTEOk returns a tuple with the LTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentFilterProbability) GetLTEOk() (*float32, bool) {
	if o == nil || o.LTE == nil {
		return nil, false
	}
	return o.LTE, true
}

// HasLTE returns a boolean if a field has been set.
func (o *SegmentFilterProbability) HasLTE() bool {
	if o != nil && o.LTE != nil {
		return true
	}

	return false
}

// SetLTE gets a reference to the given float32 and assigns it to the LTE field.
func (o *SegmentFilterProbability) SetLTE(v float32) {
	o.LTE = &v
}

// GetGT returns the GT field value if set, zero value otherwise.
func (o *SegmentFilterProbability) GetGT() float32 {
	if o == nil || o.GT == nil {
		var ret float32
		return ret
	}
	return *o.GT
}

// GetGTOk returns a tuple with the GT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentFilterProbability) GetGTOk() (*float32, bool) {
	if o == nil || o.GT == nil {
		return nil, false
	}
	return o.GT, true
}

// HasGT returns a boolean if a field has been set.
func (o *SegmentFilterProbability) HasGT() bool {
	if o != nil && o.GT != nil {
		return true
	}

	return false
}

// SetGT gets a reference to the given float32 and assigns it to the GT field.
func (o *SegmentFilterProbability) SetGT(v float32) {
	o.GT = &v
}

// GetGTE returns the GTE field value if set, zero value otherwise.
func (o *SegmentFilterProbability) GetGTE() float32 {
	if o == nil || o.GTE == nil {
		var ret float32
		return ret
	}
	return *o.GTE
}

// GetGTEOk returns a tuple with the GTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentFilterProbability) GetGTEOk() (*float32, bool) {
	if o == nil || o.GTE == nil {
		return nil, false
	}
	return o.GTE, true
}

// HasGTE returns a boolean if a field has been set.
func (o *SegmentFilterProbability) HasGTE() bool {
	if o != nil && o.GTE != nil {
		return true
	}

	return false
}

// SetGTE gets a reference to the given float32 and assigns it to the GTE field.
func (o *SegmentFilterProbability) SetGTE(v float32) {
	o.GTE = &v
}

func (o SegmentFilterProbability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.LT != nil {
		toSerialize["LT"] = o.LT
	}
	if o.LTE != nil {
		toSerialize["LTE"] = o.LTE
	}
	if o.GT != nil {
		toSerialize["GT"] = o.GT
	}
	if o.GTE != nil {
		toSerialize["GTE"] = o.GTE
	}
	return json.Marshal(toSerialize)
}

func (o SegmentFilterProbability) String() string {
	out := "SegmentFilterProbability {\n"
	out += fmt.Sprintf("  LT=%v\n", o.LT)
	out += fmt.Sprintf("  LTE=%v\n", o.LTE)
	out += fmt.Sprintf("  GT=%v\n", o.GT)
	out += fmt.Sprintf("  GTE=%v\n", o.GTE)
	out += "}"
	return out
}

type NullableSegmentFilterProbability struct {
	value *SegmentFilterProbability
	isSet bool
}

func (v NullableSegmentFilterProbability) Get() *SegmentFilterProbability {
	return v.value
}

func (v *NullableSegmentFilterProbability) Set(val *SegmentFilterProbability) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentFilterProbability) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentFilterProbability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentFilterProbability(val *SegmentFilterProbability) *NullableSegmentFilterProbability {
	return &NullableSegmentFilterProbability{value: val, isSet: true}
}

func (v NullableSegmentFilterProbability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentFilterProbability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
