// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// CompatibleSources the model 'CompatibleSources'
type CompatibleSources string

// List of compatibleSources
const (
	COMPATIBLESOURCES_BIGQUERY CompatibleSources = "bigquery"
)

// All allowed values of CompatibleSources enum
var AllowedCompatibleSourcesEnumValues = []CompatibleSources{
	"bigquery",
}

func (v *CompatibleSources) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompatibleSources(value)
	for _, existing := range AllowedCompatibleSourcesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompatibleSources", value)
}

// NewCompatibleSourcesFromValue returns a pointer to a valid CompatibleSources
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompatibleSourcesFromValue(v string) (*CompatibleSources, error) {
	ev := CompatibleSources(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompatibleSources: valid values are %v", v, AllowedCompatibleSourcesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompatibleSources) IsValid() bool {
	for _, existing := range AllowedCompatibleSourcesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to compatibleSources value
func (v CompatibleSources) Ptr() *CompatibleSources {
	return &v
}

type NullableCompatibleSources struct {
	value *CompatibleSources
	isSet bool
}

func (v NullableCompatibleSources) Get() *CompatibleSources {
	return v.value
}

func (v *NullableCompatibleSources) Set(val *CompatibleSources) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibleSources) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibleSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibleSources(val *CompatibleSources) *NullableCompatibleSources {
	return &NullableCompatibleSources{value: val, isSet: true}
}

func (v NullableCompatibleSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibleSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
