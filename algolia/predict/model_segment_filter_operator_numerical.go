// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// SegmentFilterOperatorNumerical The operator used on the numerical filter value.
type SegmentFilterOperatorNumerical string

// List of segmentFilterOperatorNumerical
const (
	SEGMENTFILTEROPERATORNUMERICAL_EQ  SegmentFilterOperatorNumerical = "EQ"
	SEGMENTFILTEROPERATORNUMERICAL_NEQ SegmentFilterOperatorNumerical = "NEQ"
	SEGMENTFILTEROPERATORNUMERICAL_GT  SegmentFilterOperatorNumerical = "GT"
	SEGMENTFILTEROPERATORNUMERICAL_GTE SegmentFilterOperatorNumerical = "GTE"
	SEGMENTFILTEROPERATORNUMERICAL_LT  SegmentFilterOperatorNumerical = "LT"
	SEGMENTFILTEROPERATORNUMERICAL_LTE SegmentFilterOperatorNumerical = "LTE"
)

// All allowed values of SegmentFilterOperatorNumerical enum
var AllowedSegmentFilterOperatorNumericalEnumValues = []SegmentFilterOperatorNumerical{
	"EQ",
	"NEQ",
	"GT",
	"GTE",
	"LT",
	"LTE",
}

func (v *SegmentFilterOperatorNumerical) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentFilterOperatorNumerical(value)
	for _, existing := range AllowedSegmentFilterOperatorNumericalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentFilterOperatorNumerical", value)
}

// NewSegmentFilterOperatorNumericalFromValue returns a pointer to a valid SegmentFilterOperatorNumerical
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentFilterOperatorNumericalFromValue(v string) (*SegmentFilterOperatorNumerical, error) {
	ev := SegmentFilterOperatorNumerical(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentFilterOperatorNumerical: valid values are %v", v, AllowedSegmentFilterOperatorNumericalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentFilterOperatorNumerical) IsValid() bool {
	for _, existing := range AllowedSegmentFilterOperatorNumericalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentFilterOperatorNumerical value
func (v SegmentFilterOperatorNumerical) Ptr() *SegmentFilterOperatorNumerical {
	return &v
}

type NullableSegmentFilterOperatorNumerical struct {
	value *SegmentFilterOperatorNumerical
	isSet bool
}

func (v NullableSegmentFilterOperatorNumerical) Get() *SegmentFilterOperatorNumerical {
	return v.value
}

func (v *NullableSegmentFilterOperatorNumerical) Set(val *SegmentFilterOperatorNumerical) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentFilterOperatorNumerical) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentFilterOperatorNumerical) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentFilterOperatorNumerical(val *SegmentFilterOperatorNumerical) *NullableSegmentFilterOperatorNumerical {
	return &NullableSegmentFilterOperatorNumerical{value: val, isSet: true}
}

func (v NullableSegmentFilterOperatorNumerical) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentFilterOperatorNumerical) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
