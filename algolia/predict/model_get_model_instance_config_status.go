// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package predict

import (
	"encoding/json"
	"fmt"
)

// GetModelInstanceConfigStatus `pending` - model has just been created and the pipelines are being set up for the first train & inference. \\ `active` - model is running and generating predictions. \\ `invalid` - model has failed training (ex. canâ€™t retrieve data from source). An additional `errorMessage` field will be set for this status. \\ `inactive` - model has been deactivated from the dashboard. Pipelines still exist but they are not currently running.
type GetModelInstanceConfigStatus string

// List of getModelInstanceConfigStatus
const (
	GETMODELINSTANCECONFIGSTATUS_PENDING  GetModelInstanceConfigStatus = "pending"
	GETMODELINSTANCECONFIGSTATUS_ACTIVE   GetModelInstanceConfigStatus = "active"
	GETMODELINSTANCECONFIGSTATUS_INVALID  GetModelInstanceConfigStatus = "invalid"
	GETMODELINSTANCECONFIGSTATUS_INACTIVE GetModelInstanceConfigStatus = "inactive"
)

// All allowed values of GetModelInstanceConfigStatus enum
var AllowedGetModelInstanceConfigStatusEnumValues = []GetModelInstanceConfigStatus{
	"pending",
	"active",
	"invalid",
	"inactive",
}

func (v *GetModelInstanceConfigStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetModelInstanceConfigStatus(value)
	for _, existing := range AllowedGetModelInstanceConfigStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetModelInstanceConfigStatus", value)
}

// NewGetModelInstanceConfigStatusFromValue returns a pointer to a valid GetModelInstanceConfigStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetModelInstanceConfigStatusFromValue(v string) (*GetModelInstanceConfigStatus, error) {
	ev := GetModelInstanceConfigStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetModelInstanceConfigStatus: valid values are %v", v, AllowedGetModelInstanceConfigStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetModelInstanceConfigStatus) IsValid() bool {
	for _, existing := range AllowedGetModelInstanceConfigStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to getModelInstanceConfigStatus value
func (v GetModelInstanceConfigStatus) Ptr() *GetModelInstanceConfigStatus {
	return &v
}

type NullableGetModelInstanceConfigStatus struct {
	value *GetModelInstanceConfigStatus
	isSet bool
}

func (v NullableGetModelInstanceConfigStatus) Get() *GetModelInstanceConfigStatus {
	return v.value
}

func (v *NullableGetModelInstanceConfigStatus) Set(val *GetModelInstanceConfigStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGetModelInstanceConfigStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGetModelInstanceConfigStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetModelInstanceConfigStatus(val *GetModelInstanceConfigStatus) *NullableGetModelInstanceConfigStatus {
	return &NullableGetModelInstanceConfigStatus{value: val, isSet: true}
}

func (v NullableGetModelInstanceConfigStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetModelInstanceConfigStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
