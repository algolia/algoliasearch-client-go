// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package insights

import (
	"encoding/json"
	"fmt"
)

// PurchasedObjectIDs Use this event to track when users make a purchase unrelated to a previous Algolia request. For example, if you don't use Algolia to build your category pages, use this event.  To track purchase events related to Algolia requests, use the \"Purchased object IDs after search\" event.
type PurchasedObjectIDs struct {
	// Event name, up to 64 ASCII characters.  Consider naming events consistentlyâ€”for example, by adopting Segment's [object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework) framework.
	EventName    string          `json:"eventName"`
	EventType    ConversionEvent `json:"eventType"`
	EventSubtype PurchaseEvent   `json:"eventSubtype"`
	// Index name to which the event's items belong.
	Index string `json:"index"`
	// Object IDs of the records that are part of the event.
	ObjectIDs []string `json:"objectIDs"`
	// Anonymous or pseudonymous user identifier.  Don't use personally identifiable information in user tokens. For more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
	UserToken string `json:"userToken"`
	// Identifier for authenticated users.  When the user signs in, you can get an identifier from your system and send it as `authenticatedUserToken`. This lets you keep using the `userToken` from before the user signed in, while providing a reliable way to identify users across sessions. Don't use personally identifiable information in user tokens. For more information, see [User token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
	AuthenticatedUserToken *string `json:"authenticatedUserToken,omitempty"`
	// Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).
	Currency *string `json:"currency,omitempty"`
	// Extra information about the records involved in a purchase or add-to-cart event.  If specified, it must have the same length as `objectIDs`.
	ObjectData []ObjectData `json:"objectData,omitempty"`
	// Timestamp of the event in milliseconds in [Unix epoch time](https://wikipedia.org/wiki/Unix_time). By default, the Insights API uses the time it receives an event as its timestamp.
	Timestamp *int64 `json:"timestamp,omitempty"`
	Value     *Value `json:"value,omitempty"`
}

type PurchasedObjectIDsOption func(f *PurchasedObjectIDs)

func WithPurchasedObjectIDsAuthenticatedUserToken(val string) PurchasedObjectIDsOption {
	return func(f *PurchasedObjectIDs) {
		f.AuthenticatedUserToken = &val
	}
}

func WithPurchasedObjectIDsCurrency(val string) PurchasedObjectIDsOption {
	return func(f *PurchasedObjectIDs) {
		f.Currency = &val
	}
}

func WithPurchasedObjectIDsObjectData(val []ObjectData) PurchasedObjectIDsOption {
	return func(f *PurchasedObjectIDs) {
		f.ObjectData = val
	}
}

func WithPurchasedObjectIDsTimestamp(val int64) PurchasedObjectIDsOption {
	return func(f *PurchasedObjectIDs) {
		f.Timestamp = &val
	}
}

func WithPurchasedObjectIDsValue(val Value) PurchasedObjectIDsOption {
	return func(f *PurchasedObjectIDs) {
		f.Value = &val
	}
}

// NewPurchasedObjectIDs instantiates a new PurchasedObjectIDs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewPurchasedObjectIDs(eventName string, eventType ConversionEvent, eventSubtype PurchaseEvent, index string, objectIDs []string, userToken string, opts ...PurchasedObjectIDsOption) *PurchasedObjectIDs {
	this := &PurchasedObjectIDs{}
	this.EventName = eventName
	this.EventType = eventType
	this.EventSubtype = eventSubtype
	this.Index = index
	this.ObjectIDs = objectIDs
	this.UserToken = userToken
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyPurchasedObjectIDs return a pointer to an empty PurchasedObjectIDs object.
func NewEmptyPurchasedObjectIDs() *PurchasedObjectIDs {
	return &PurchasedObjectIDs{}
}

// GetEventName returns the EventName field value.
func (o *PurchasedObjectIDs) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value.
func (o *PurchasedObjectIDs) SetEventName(v string) *PurchasedObjectIDs {
	o.EventName = v
	return o
}

// GetEventType returns the EventType field value.
func (o *PurchasedObjectIDs) GetEventType() ConversionEvent {
	if o == nil {
		var ret ConversionEvent
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetEventTypeOk() (*ConversionEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value.
func (o *PurchasedObjectIDs) SetEventType(v ConversionEvent) *PurchasedObjectIDs {
	o.EventType = v
	return o
}

// GetEventSubtype returns the EventSubtype field value.
func (o *PurchasedObjectIDs) GetEventSubtype() PurchaseEvent {
	if o == nil {
		var ret PurchaseEvent
		return ret
	}

	return o.EventSubtype
}

// GetEventSubtypeOk returns a tuple with the EventSubtype field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetEventSubtypeOk() (*PurchaseEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSubtype, true
}

// SetEventSubtype sets field value.
func (o *PurchasedObjectIDs) SetEventSubtype(v PurchaseEvent) *PurchasedObjectIDs {
	o.EventSubtype = v
	return o
}

// GetIndex returns the Index field value.
func (o *PurchasedObjectIDs) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *PurchasedObjectIDs) SetIndex(v string) *PurchasedObjectIDs {
	o.Index = v
	return o
}

// GetObjectIDs returns the ObjectIDs field value.
func (o *PurchasedObjectIDs) GetObjectIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ObjectIDs
}

// GetObjectIDsOk returns a tuple with the ObjectIDs field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetObjectIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectIDs, true
}

// SetObjectIDs sets field value.
func (o *PurchasedObjectIDs) SetObjectIDs(v []string) *PurchasedObjectIDs {
	o.ObjectIDs = v
	return o
}

// GetUserToken returns the UserToken field value.
func (o *PurchasedObjectIDs) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value.
func (o *PurchasedObjectIDs) SetUserToken(v string) *PurchasedObjectIDs {
	o.UserToken = v
	return o
}

// GetAuthenticatedUserToken returns the AuthenticatedUserToken field value if set, zero value otherwise.
func (o *PurchasedObjectIDs) GetAuthenticatedUserToken() string {
	if o == nil || o.AuthenticatedUserToken == nil {
		var ret string
		return ret
	}
	return *o.AuthenticatedUserToken
}

// GetAuthenticatedUserTokenOk returns a tuple with the AuthenticatedUserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetAuthenticatedUserTokenOk() (*string, bool) {
	if o == nil || o.AuthenticatedUserToken == nil {
		return nil, false
	}
	return o.AuthenticatedUserToken, true
}

// HasAuthenticatedUserToken returns a boolean if a field has been set.
func (o *PurchasedObjectIDs) HasAuthenticatedUserToken() bool {
	if o != nil && o.AuthenticatedUserToken != nil {
		return true
	}

	return false
}

// SetAuthenticatedUserToken gets a reference to the given string and assigns it to the AuthenticatedUserToken field.
func (o *PurchasedObjectIDs) SetAuthenticatedUserToken(v string) *PurchasedObjectIDs {
	o.AuthenticatedUserToken = &v
	return o
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PurchasedObjectIDs) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PurchasedObjectIDs) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PurchasedObjectIDs) SetCurrency(v string) *PurchasedObjectIDs {
	o.Currency = &v
	return o
}

// GetObjectData returns the ObjectData field value if set, zero value otherwise.
func (o *PurchasedObjectIDs) GetObjectData() []ObjectData {
	if o == nil || o.ObjectData == nil {
		var ret []ObjectData
		return ret
	}
	return o.ObjectData
}

// GetObjectDataOk returns a tuple with the ObjectData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetObjectDataOk() ([]ObjectData, bool) {
	if o == nil || o.ObjectData == nil {
		return nil, false
	}
	return o.ObjectData, true
}

// HasObjectData returns a boolean if a field has been set.
func (o *PurchasedObjectIDs) HasObjectData() bool {
	if o != nil && o.ObjectData != nil {
		return true
	}

	return false
}

// SetObjectData gets a reference to the given []ObjectData and assigns it to the ObjectData field.
func (o *PurchasedObjectIDs) SetObjectData(v []ObjectData) *PurchasedObjectIDs {
	o.ObjectData = v
	return o
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *PurchasedObjectIDs) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PurchasedObjectIDs) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *PurchasedObjectIDs) SetTimestamp(v int64) *PurchasedObjectIDs {
	o.Timestamp = &v
	return o
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PurchasedObjectIDs) GetValue() Value {
	if o == nil || o.Value == nil {
		var ret Value
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasedObjectIDs) GetValueOk() (*Value, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PurchasedObjectIDs) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given Value and assigns it to the Value field.
func (o *PurchasedObjectIDs) SetValue(v *Value) *PurchasedObjectIDs {
	o.Value = v
	return o
}

func (o PurchasedObjectIDs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["eventName"] = o.EventName
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventSubtype"] = o.EventSubtype
	}
	if true {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["objectIDs"] = o.ObjectIDs
	}
	if true {
		toSerialize["userToken"] = o.UserToken
	}
	if o.AuthenticatedUserToken != nil {
		toSerialize["authenticatedUserToken"] = o.AuthenticatedUserToken
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.ObjectData != nil {
		toSerialize["objectData"] = o.ObjectData
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal PurchasedObjectIDs: %w", err)
	}

	return serialized, nil
}

func (o PurchasedObjectIDs) String() string {
	out := ""
	out += fmt.Sprintf("  eventName=%v\n", o.EventName)
	out += fmt.Sprintf("  eventType=%v\n", o.EventType)
	out += fmt.Sprintf("  eventSubtype=%v\n", o.EventSubtype)
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  objectIDs=%v\n", o.ObjectIDs)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  authenticatedUserToken=%v\n", o.AuthenticatedUserToken)
	out += fmt.Sprintf("  currency=%v\n", o.Currency)
	out += fmt.Sprintf("  objectData=%v\n", o.ObjectData)
	out += fmt.Sprintf("  timestamp=%v\n", o.Timestamp)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	return fmt.Sprintf("PurchasedObjectIDs {\n%s}", out)
}

type NullablePurchasedObjectIDs struct {
	value *PurchasedObjectIDs
	isSet bool
}

func (v NullablePurchasedObjectIDs) Get() *PurchasedObjectIDs {
	return v.value
}

func (v *NullablePurchasedObjectIDs) Set(val *PurchasedObjectIDs) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasedObjectIDs) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasedObjectIDs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasedObjectIDs(val *PurchasedObjectIDs) *NullablePurchasedObjectIDs {
	return &NullablePurchasedObjectIDs{value: val, isSet: true}
}

func (v NullablePurchasedObjectIDs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullablePurchasedObjectIDs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
