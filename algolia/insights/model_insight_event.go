// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package insights

import (
	"encoding/json"
	"fmt"
)

// InsightEvent Insights event.
type InsightEvent struct {
	EventType EventType `json:"eventType" validate:"required"`
	// A user-defined string used to categorize events.
	EventName string `json:"eventName" validate:"required"`
	// Name of the targeted index.
	Index string `json:"index" validate:"required"`
	// A user identifier. Depending if the user is logged-in or not, several strategies can be used from a sessionId to a technical identifier. You should always send pseudonymous or anonymous userTokens.
	UserToken string `json:"userToken" validate:"required"`
	// Time of the event expressed in milliseconds since the Unix epoch.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Algolia queryID. This is required when an event is tied to a search.
	QueryID *string `json:"queryID,omitempty"`
	// An array of index objectID. Limited to 20 objects. An event can’t have both objectIDs and filters at the same time.
	ObjectIDs []string `json:"objectIDs,omitempty"`
	// An array of filters. Limited to 10 filters. An event can’t have both objectIDs and filters at the same time.
	Filters []string `json:"filters,omitempty"`
	// Position of the click in the list of Algolia search results. This field is required if a queryID is provided. One position must be provided for each objectID.
	Positions []int32 `json:"positions,omitempty"`
}

type InsightEventOption func(f *InsightEvent)

func WithInsightEventTimestamp(val int64) InsightEventOption {
	return func(f *InsightEvent) {
		f.Timestamp = &val
	}
}

func WithInsightEventQueryID(val string) InsightEventOption {
	return func(f *InsightEvent) {
		f.QueryID = &val
	}
}

func WithInsightEventObjectIDs(val []string) InsightEventOption {
	return func(f *InsightEvent) {
		f.ObjectIDs = val
	}
}

func WithInsightEventFilters(val []string) InsightEventOption {
	return func(f *InsightEvent) {
		f.Filters = val
	}
}

func WithInsightEventPositions(val []int32) InsightEventOption {
	return func(f *InsightEvent) {
		f.Positions = val
	}
}

// NewInsightEvent instantiates a new InsightEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsightEvent(eventType EventType, eventName string, index string, userToken string, opts ...InsightEventOption) *InsightEvent {
	this := &InsightEvent{}
	this.EventType = eventType
	this.EventName = eventName
	this.Index = index
	this.UserToken = userToken
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewInsightEventWithDefaults instantiates a new InsightEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsightEventWithDefaults() *InsightEvent {
	this := &InsightEvent{}
	return this
}

// GetEventType returns the EventType field value
func (o *InsightEvent) GetEventType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetEventTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *InsightEvent) SetEventType(v EventType) {
	o.EventType = v
}

// GetEventName returns the EventName field value
func (o *InsightEvent) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *InsightEvent) SetEventName(v string) {
	o.EventName = v
}

// GetIndex returns the Index field value
func (o *InsightEvent) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *InsightEvent) SetIndex(v string) {
	o.Index = v
}

// GetUserToken returns the UserToken field value
func (o *InsightEvent) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value
func (o *InsightEvent) SetUserToken(v string) {
	o.UserToken = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InsightEvent) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InsightEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *InsightEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetQueryID returns the QueryID field value if set, zero value otherwise.
func (o *InsightEvent) GetQueryID() string {
	if o == nil || o.QueryID == nil {
		var ret string
		return ret
	}
	return *o.QueryID
}

// GetQueryIDOk returns a tuple with the QueryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetQueryIDOk() (*string, bool) {
	if o == nil || o.QueryID == nil {
		return nil, false
	}
	return o.QueryID, true
}

// HasQueryID returns a boolean if a field has been set.
func (o *InsightEvent) HasQueryID() bool {
	if o != nil && o.QueryID != nil {
		return true
	}

	return false
}

// SetQueryID gets a reference to the given string and assigns it to the QueryID field.
func (o *InsightEvent) SetQueryID(v string) {
	o.QueryID = &v
}

// GetObjectIDs returns the ObjectIDs field value if set, zero value otherwise.
func (o *InsightEvent) GetObjectIDs() []string {
	if o == nil || o.ObjectIDs == nil {
		var ret []string
		return ret
	}
	return o.ObjectIDs
}

// GetObjectIDsOk returns a tuple with the ObjectIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetObjectIDsOk() ([]string, bool) {
	if o == nil || o.ObjectIDs == nil {
		return nil, false
	}
	return o.ObjectIDs, true
}

// HasObjectIDs returns a boolean if a field has been set.
func (o *InsightEvent) HasObjectIDs() bool {
	if o != nil && o.ObjectIDs != nil {
		return true
	}

	return false
}

// SetObjectIDs gets a reference to the given []string and assigns it to the ObjectIDs field.
func (o *InsightEvent) SetObjectIDs(v []string) {
	o.ObjectIDs = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *InsightEvent) GetFilters() []string {
	if o == nil || o.Filters == nil {
		var ret []string
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetFiltersOk() ([]string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *InsightEvent) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []string and assigns it to the Filters field.
func (o *InsightEvent) SetFilters(v []string) {
	o.Filters = v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *InsightEvent) GetPositions() []int32 {
	if o == nil || o.Positions == nil {
		var ret []int32
		return ret
	}
	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightEvent) GetPositionsOk() ([]int32, bool) {
	if o == nil || o.Positions == nil {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *InsightEvent) HasPositions() bool {
	if o != nil && o.Positions != nil {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []int32 and assigns it to the Positions field.
func (o *InsightEvent) SetPositions(v []int32) {
	o.Positions = v
}

func (o InsightEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventName"] = o.EventName
	}
	if true {
		toSerialize["index"] = o.Index
	}
	if true {
		toSerialize["userToken"] = o.UserToken
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.QueryID != nil {
		toSerialize["queryID"] = o.QueryID
	}
	if o.ObjectIDs != nil {
		toSerialize["objectIDs"] = o.ObjectIDs
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.Positions != nil {
		toSerialize["positions"] = o.Positions
	}
	return json.Marshal(toSerialize)
}

func (o InsightEvent) String() string {
	out := ""
	out += fmt.Sprintf("  eventType=%v\n", o.EventType)
	out += fmt.Sprintf("  eventName=%v\n", o.EventName)
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  timestamp=%v\n", o.Timestamp)
	out += fmt.Sprintf("  queryID=%v\n", o.QueryID)
	out += fmt.Sprintf("  objectIDs=%v\n", o.ObjectIDs)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  positions=%v\n", o.Positions)
	return fmt.Sprintf("InsightEvent {\n%s}", out)
}

type NullableInsightEvent struct {
	value *InsightEvent
	isSet bool
}

func (v NullableInsightEvent) Get() *InsightEvent {
	return v.value
}

func (v *NullableInsightEvent) Set(val *InsightEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightEvent(val *InsightEvent) *NullableInsightEvent {
	return &NullableInsightEvent{value: val, isSet: true}
}

func (v NullableInsightEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
