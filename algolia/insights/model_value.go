// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package insights

import (
	"encoding/json"
	"fmt"
)

// Value - Total monetary value of this event in units of `currency`.
type Value struct {
	Float64 *float64
	String  *string
}

// float64AsValue is a convenience function that returns float64 wrapped in Value.
func Float64AsValue(v float64) *Value {
	return &Value{
		Float64: &v,
	}
}

// stringAsValue is a convenience function that returns string wrapped in Value.
func StringAsValue(v string) *Value {
	return &Value{
		String: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *Value) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Float64
	err = newStrictDecoder(data).Decode(&dst.Float64)
	if err == nil && validateStruct(dst.Float64) == nil {
		jsonFloat64, _ := json.Marshal(dst.Float64)
		if string(jsonFloat64) == "{}" { // empty struct
			dst.Float64 = nil
		} else {
			return nil
		}
	} else {
		dst.Float64 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil && validateStruct(dst.String) == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(Value)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src Value) MarshalJSON() ([]byte, error) {
	if src.Float64 != nil {
		serialized, err := json.Marshal(&src.Float64)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Float64 of Value: %w", err)
		}

		return serialized, nil
	}

	if src.String != nil {
		serialized, err := json.Marshal(&src.String)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of String of Value: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj Value) GetActualInstance() any {
	if obj.Float64 != nil {
		return *obj.Float64
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}
