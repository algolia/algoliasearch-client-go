// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package insights

import (
	"encoding/json"
	"fmt"
)

// Identify The identify event is a signal for Insights to process all events coming from 'userToken' as if they were from 'authenticatedUserToken'.
type Identify struct {
	EventType IdentifyEvent `json:"eventType" validate:"required"`
	// Anonymous or pseudonymous user identifier.   > **Note**: Never include personally identifiable information in user tokens.
	UserToken string `json:"userToken" validate:"required"`
	// User token for authenticated users.
	AuthenticatedUserToken string `json:"authenticatedUserToken" validate:"required"`
}

// NewIdentify instantiates a new Identify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentify(eventType IdentifyEvent, userToken string, authenticatedUserToken string) *Identify {
	this := &Identify{}
	this.EventType = eventType
	this.UserToken = userToken
	this.AuthenticatedUserToken = authenticatedUserToken
	return this
}

// NewIdentifyWithDefaults instantiates a new Identify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifyWithDefaults() *Identify {
	this := &Identify{}
	return this
}

// GetEventType returns the EventType field value
func (o *Identify) GetEventType() IdentifyEvent {
	if o == nil {
		var ret IdentifyEvent
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *Identify) GetEventTypeOk() (*IdentifyEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *Identify) SetEventType(v IdentifyEvent) {
	o.EventType = v
}

// GetUserToken returns the UserToken field value
func (o *Identify) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *Identify) GetUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value
func (o *Identify) SetUserToken(v string) {
	o.UserToken = v
}

// GetAuthenticatedUserToken returns the AuthenticatedUserToken field value
func (o *Identify) GetAuthenticatedUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticatedUserToken
}

// GetAuthenticatedUserTokenOk returns a tuple with the AuthenticatedUserToken field value
// and a boolean to check if the value has been set.
func (o *Identify) GetAuthenticatedUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticatedUserToken, true
}

// SetAuthenticatedUserToken sets field value
func (o *Identify) SetAuthenticatedUserToken(v string) {
	o.AuthenticatedUserToken = v
}

func (o Identify) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["userToken"] = o.UserToken
	}
	if true {
		toSerialize["authenticatedUserToken"] = o.AuthenticatedUserToken
	}
	return json.Marshal(toSerialize)
}

func (o Identify) String() string {
	out := ""
	out += fmt.Sprintf("  eventType=%v\n", o.EventType)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  authenticatedUserToken=%v\n", o.AuthenticatedUserToken)
	return fmt.Sprintf("Identify {\n%s}", out)
}

type NullableIdentify struct {
	value *Identify
	isSet bool
}

func (v NullableIdentify) Get() *Identify {
	return v.value
}

func (v *NullableIdentify) Set(val *Identify) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentify) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentify(val *Identify) *NullableIdentify {
	return &NullableIdentify{value: val, isSet: true}
}

func (v NullableIdentify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
