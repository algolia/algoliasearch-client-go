// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package insights

import (
	"encoding/json"
	"fmt"
)

// InsightEvents Object containing the events sent.
type InsightEvents struct {
	// Array of events sent.
	Events []InsightEvent `json:"events"`
}

// NewInsightEvents instantiates a new InsightEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsightEvents(events []InsightEvent) *InsightEvents {
	this := &InsightEvents{}
	this.Events = events
	return this
}

// NewInsightEventsWithDefaults instantiates a new InsightEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsightEventsWithDefaults() *InsightEvents {
	this := &InsightEvents{}
	return this
}

// GetEvents returns the Events field value
func (o *InsightEvents) GetEvents() []InsightEvent {
	if o == nil {
		var ret []InsightEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *InsightEvents) GetEventsOk() ([]InsightEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *InsightEvents) SetEvents(v []InsightEvent) {
	o.Events = v
}

func (o InsightEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

func (o InsightEvents) String() string {
	out := ""
	out += fmt.Sprintf("  events=%v\n", o.Events)
	return fmt.Sprintf("InsightEvents {\n%s}", out)
}

type NullableInsightEvents struct {
	value *InsightEvents
	isSet bool
}

func (v NullableInsightEvents) Get() *InsightEvents {
	return v.value
}

func (v *NullableInsightEvents) Set(val *InsightEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightEvents(val *InsightEvents) *NullableInsightEvents {
	return &NullableInsightEvents{value: val, isSet: true}
}

func (v NullableInsightEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
