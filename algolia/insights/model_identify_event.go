// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package insights

import (
	"encoding/json"
	"fmt"
)

// IdentifyEvent the model 'IdentifyEvent'
type IdentifyEvent string

// List of IdentifyEvent
const (
	IDENTIFYEVENT_IDENTIFY IdentifyEvent = "identify"
)

// All allowed values of IdentifyEvent enum
var AllowedIdentifyEventEnumValues = []IdentifyEvent{
	"identify",
}

func (v *IdentifyEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentifyEvent(value)
	for _, existing := range AllowedIdentifyEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentifyEvent", value)
}

// NewIdentifyEventFromValue returns a pointer to a valid IdentifyEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentifyEventFromValue(v string) (*IdentifyEvent, error) {
	ev := IdentifyEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentifyEvent: valid values are %v", v, AllowedIdentifyEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentifyEvent) IsValid() bool {
	for _, existing := range AllowedIdentifyEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentifyEvent value
func (v IdentifyEvent) Ptr() *IdentifyEvent {
	return &v
}

type NullableIdentifyEvent struct {
	value *IdentifyEvent
	isSet bool
}

func (v NullableIdentifyEvent) Get() *IdentifyEvent {
	return v.value
}

func (v *NullableIdentifyEvent) Set(val *IdentifyEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifyEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifyEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifyEvent(val *IdentifyEvent) *NullableIdentifyEvent {
	return &NullableIdentifyEvent{value: val, isSet: true}
}

func (v NullableIdentifyEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifyEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
