// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package insights

import (
	"encoding/json"
	"fmt"
)

// Price - The total price of a product, including any discounts, in units of `currency`.
type Price struct {
	Float64 *float64
	String  *string
}

// float64AsPrice is a convenience function that returns float64 wrapped in Price.
func Float64AsPrice(v float64) *Price {
	return &Price{
		Float64: &v,
	}
}

// stringAsPrice is a convenience function that returns string wrapped in Price.
func StringAsPrice(v string) *Price {
	return &Price{
		String: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *Price) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Float64
	err = newStrictDecoder(data).Decode(&dst.Float64)
	if err == nil && validateStruct(dst.Float64) == nil {
		jsonFloat64, _ := json.Marshal(dst.Float64)
		if string(jsonFloat64) == "{}" { // empty struct
			dst.Float64 = nil
		} else {
			return nil
		}
	} else {
		dst.Float64 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil && validateStruct(dst.String) == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(Price)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src Price) MarshalJSON() ([]byte, error) {
	if src.Float64 != nil {
		serialized, err := json.Marshal(&src.Float64)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Float64 of Price: %w", err)
		}

		return serialized, nil
	}

	if src.String != nil {
		serialized, err := json.Marshal(&src.String)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of String of Price: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj Price) GetActualInstance() any {
	if obj.Float64 != nil {
		return *obj.Float64
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePrice struct {
	value *Price
	isSet bool
}

func (v NullablePrice) Get() *Price {
	return v.value
}

func (v *NullablePrice) Set(val *Price) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice(val *Price) *NullablePrice {
	return &NullablePrice{value: val, isSet: true}
}

func (v NullablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
