// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package insights

import (
	"encoding/json"
	"fmt"
)

// PurchaseEvent the model 'PurchaseEvent'.
type PurchaseEvent string

// List of PurchaseEvent.
const (
	PURCHASEEVENT_PURCHASE PurchaseEvent = "purchase"
)

// All allowed values of PurchaseEvent enum.
var AllowedPurchaseEventEnumValues = []PurchaseEvent{
	"purchase",
}

func (v *PurchaseEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseEvent(value)
	for _, existing := range AllowedPurchaseEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseEvent", value)
}

// NewPurchaseEventFromValue returns a pointer to a valid PurchaseEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewPurchaseEventFromValue(v string) (*PurchaseEvent, error) {
	ev := PurchaseEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseEvent: valid values are %v", v, AllowedPurchaseEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v PurchaseEvent) IsValid() bool {
	for _, existing := range AllowedPurchaseEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseEvent value.
func (v PurchaseEvent) Ptr() *PurchaseEvent {
	return &v
}

type NullablePurchaseEvent struct {
	value *PurchaseEvent
	isSet bool
}

func (v NullablePurchaseEvent) Get() *PurchaseEvent {
	return v.value
}

func (v *NullablePurchaseEvent) Set(val *PurchaseEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseEvent(val *PurchaseEvent) *NullablePurchaseEvent {
	return &NullablePurchaseEvent{value: val, isSet: true}
}

func (v NullablePurchaseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
