// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// EstimateConfiguration A/B test configuration for estimating the sample size and duration using minimum detectable effect.
type EstimateConfiguration struct {
	// List of metric filters applied to the test population.
	Filters                 []MetricsFilter         `json:"filters,omitempty"`
	MinimumDetectableEffect MinimumDetectableEffect `json:"minimumDetectableEffect"`
}

type EstimateConfigurationOption func(f *EstimateConfiguration)

func WithEstimateConfigurationFilters(val []MetricsFilter) EstimateConfigurationOption {
	return func(f *EstimateConfiguration) {
		f.Filters = val
	}
}

// NewEstimateConfiguration instantiates a new EstimateConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewEstimateConfiguration(minimumDetectableEffect MinimumDetectableEffect, opts ...EstimateConfigurationOption) *EstimateConfiguration {
	this := &EstimateConfiguration{}
	this.MinimumDetectableEffect = minimumDetectableEffect
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyEstimateConfiguration return a pointer to an empty EstimateConfiguration object.
func NewEmptyEstimateConfiguration() *EstimateConfiguration {
	return &EstimateConfiguration{}
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *EstimateConfiguration) GetFilters() []MetricsFilter {
	if o == nil || o.Filters == nil {
		var ret []MetricsFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimateConfiguration) GetFiltersOk() ([]MetricsFilter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *EstimateConfiguration) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MetricsFilter and assigns it to the Filters field.
func (o *EstimateConfiguration) SetFilters(v []MetricsFilter) *EstimateConfiguration {
	o.Filters = v
	return o
}

// GetMinimumDetectableEffect returns the MinimumDetectableEffect field value.
func (o *EstimateConfiguration) GetMinimumDetectableEffect() MinimumDetectableEffect {
	if o == nil {
		var ret MinimumDetectableEffect
		return ret
	}

	return o.MinimumDetectableEffect
}

// GetMinimumDetectableEffectOk returns a tuple with the MinimumDetectableEffect field value
// and a boolean to check if the value has been set.
func (o *EstimateConfiguration) GetMinimumDetectableEffectOk() (*MinimumDetectableEffect, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumDetectableEffect, true
}

// SetMinimumDetectableEffect sets field value.
func (o *EstimateConfiguration) SetMinimumDetectableEffect(v *MinimumDetectableEffect) *EstimateConfiguration {
	o.MinimumDetectableEffect = *v
	return o
}

func (o EstimateConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	toSerialize["minimumDetectableEffect"] = o.MinimumDetectableEffect
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal EstimateConfiguration: %w", err)
	}

	return serialized, nil
}

func (o EstimateConfiguration) String() string {
	out := ""
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  minimumDetectableEffect=%v\n", o.MinimumDetectableEffect)
	return fmt.Sprintf("EstimateConfiguration {\n%s}", out)
}
