// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// ErrorCorrectionType Multiple-testing correction method applied when evaluating metric significance.
type ErrorCorrectionType string

// List of ErrorCorrectionType.
const (
	ERROR_CORRECTION_TYPE_BONFERRONI         ErrorCorrectionType = "bonferroni"
	ERROR_CORRECTION_TYPE_BENJAMINI_HOCHBERG ErrorCorrectionType = "benjamini-hochberg"
)

// All allowed values of ErrorCorrectionType enum.
var AllowedErrorCorrectionTypeEnumValues = []ErrorCorrectionType{
	"bonferroni",
	"benjamini-hochberg",
}

// NewErrorCorrectionTypeFromValue returns a pointer to a valid ErrorCorrectionType.
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewErrorCorrectionTypeFromValue(v string) (*ErrorCorrectionType, error) {
	ev := ErrorCorrectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorCorrectionType: valid values are %v", v, AllowedErrorCorrectionTypeEnumValues)
	}
}

func (v *ErrorCorrectionType) UnmarshalJSON(src []byte) error {
	var value string

	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'ErrorCorrectionType': %w", string(src), err)
	}

	enumTypeValue := ErrorCorrectionType(value)
	for _, existing := range AllowedErrorCorrectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue

			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorCorrectionType", value)
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v ErrorCorrectionType) IsValid() bool {
	for _, existing := range AllowedErrorCorrectionTypeEnumValues {
		if existing == v {
			return true
		}
	}

	return false
}

// Ptr returns reference to ErrorCorrectionType value.
func (v ErrorCorrectionType) Ptr() *ErrorCorrectionType {
	return &v
}
