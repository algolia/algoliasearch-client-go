// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// MetricMetadata Metric specific metadata.
type MetricMetadata struct {
	// Only present in case the metric is 'revenue'. It is the amount exceeding the 95th percentile of global revenue transactions involved in the AB Test. This amount is not considered when calculating statistical significance. It is tied to a per revenue-currency pair contrary to other global filter effects (such as outliers and empty search count).
	WinsorizedValue *float64 `json:"winsorizedValue,omitempty"`
	// Mean value for this metric.
	Mean *float64 `json:"mean,omitempty"`
}

type MetricMetadataOption func(f *MetricMetadata)

func WithMetricMetadataWinsorizedValue(val float64) MetricMetadataOption {
	return func(f *MetricMetadata) {
		f.WinsorizedValue = &val
	}
}

func WithMetricMetadataMean(val float64) MetricMetadataOption {
	return func(f *MetricMetadata) {
		f.Mean = &val
	}
}

// NewMetricMetadata instantiates a new MetricMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMetricMetadata(opts ...MetricMetadataOption) *MetricMetadata {
	this := &MetricMetadata{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyMetricMetadata return a pointer to an empty MetricMetadata object.
func NewEmptyMetricMetadata() *MetricMetadata {
	return &MetricMetadata{}
}

// GetWinsorizedValue returns the WinsorizedValue field value if set, zero value otherwise.
func (o *MetricMetadata) GetWinsorizedValue() float64 {
	if o == nil || o.WinsorizedValue == nil {
		var ret float64
		return ret
	}
	return *o.WinsorizedValue
}

// GetWinsorizedValueOk returns a tuple with the WinsorizedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricMetadata) GetWinsorizedValueOk() (*float64, bool) {
	if o == nil || o.WinsorizedValue == nil {
		return nil, false
	}
	return o.WinsorizedValue, true
}

// HasWinsorizedValue returns a boolean if a field has been set.
func (o *MetricMetadata) HasWinsorizedValue() bool {
	if o != nil && o.WinsorizedValue != nil {
		return true
	}

	return false
}

// SetWinsorizedValue gets a reference to the given float64 and assigns it to the WinsorizedValue field.
func (o *MetricMetadata) SetWinsorizedValue(v float64) *MetricMetadata {
	o.WinsorizedValue = &v
	return o
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *MetricMetadata) GetMean() float64 {
	if o == nil || o.Mean == nil {
		var ret float64
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricMetadata) GetMeanOk() (*float64, bool) {
	if o == nil || o.Mean == nil {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *MetricMetadata) HasMean() bool {
	if o != nil && o.Mean != nil {
		return true
	}

	return false
}

// SetMean gets a reference to the given float64 and assigns it to the Mean field.
func (o *MetricMetadata) SetMean(v float64) *MetricMetadata {
	o.Mean = &v
	return o
}

func (o MetricMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.WinsorizedValue != nil {
		toSerialize["winsorizedValue"] = o.WinsorizedValue
	}
	if o.Mean != nil {
		toSerialize["mean"] = o.Mean
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MetricMetadata: %w", err)
	}

	return serialized, nil
}

func (o MetricMetadata) String() string {
	out := ""
	out += fmt.Sprintf("  winsorizedValue=%v\n", o.WinsorizedValue)
	out += fmt.Sprintf("  mean=%v\n", o.Mean)
	return fmt.Sprintf("MetricMetadata {\n%s}", out)
}
