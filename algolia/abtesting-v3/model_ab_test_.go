// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// ABTest struct for ABTest.
type ABTest struct {
	// Unique A/B test identifier.
	AbTestID int32 `json:"abTestID"`
	// Date and time when the A/B test was last updated, in RFC 3339 format.
	UpdatedAt string `json:"updatedAt"`
	// Date and time when the A/B test was created, in RFC 3339 format.
	CreatedAt string `json:"createdAt"`
	// End date and time of the A/B test, in RFC 3339 format.
	EndAt string `json:"endAt"`
	// Date and time when the A/B test was stopped, in RFC 3339 format.
	StoppedAt utils.Nullable[string] `json:"stoppedAt,omitempty"`
	// A/B test name.
	Name   string `json:"name"`
	Status Status `json:"status"`
	// A/B test variants.  The first variant is your _control_ index, typically your production index. All of the additional variants are indexes with changed settings that you want to test against the control.
	Variants      []Variant            `json:"variants"`
	Configuration *ABTestConfiguration `json:"configuration,omitempty"`
	// Unique migrated A/B test identifier.
	MigratedAbTestID *int32 `json:"migratedAbTestID,omitempty"`
}

type ABTestOption func(f *ABTest)

func WithABTestStoppedAt(val utils.Nullable[string]) ABTestOption {
	return func(f *ABTest) {
		f.StoppedAt = val
	}
}

func WithABTestConfiguration(val ABTestConfiguration) ABTestOption {
	return func(f *ABTest) {
		f.Configuration = &val
	}
}

func WithABTestMigratedAbTestID(val int32) ABTestOption {
	return func(f *ABTest) {
		f.MigratedAbTestID = &val
	}
}

// NewABTest instantiates a new ABTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewABTest(abTestID int32, updatedAt string, createdAt string, endAt string, name string, status Status, variants []Variant, opts ...ABTestOption) *ABTest {
	this := &ABTest{}
	this.AbTestID = abTestID
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.EndAt = endAt
	this.Name = name
	this.Status = status
	this.Variants = variants
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyABTest return a pointer to an empty ABTest object.
func NewEmptyABTest() *ABTest {
	return &ABTest{}
}

// GetAbTestID returns the AbTestID field value.
func (o *ABTest) GetAbTestID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AbTestID
}

// GetAbTestIDOk returns a tuple with the AbTestID field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetAbTestIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbTestID, true
}

// SetAbTestID sets field value.
func (o *ABTest) SetAbTestID(v int32) *ABTest {
	o.AbTestID = v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value.
func (o *ABTest) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value.
func (o *ABTest) SetUpdatedAt(v string) *ABTest {
	o.UpdatedAt = v
	return o
}

// GetCreatedAt returns the CreatedAt field value.
func (o *ABTest) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value.
func (o *ABTest) SetCreatedAt(v string) *ABTest {
	o.CreatedAt = v
	return o
}

// GetEndAt returns the EndAt field value.
func (o *ABTest) GetEndAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndAt
}

// GetEndAtOk returns a tuple with the EndAt field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetEndAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndAt, true
}

// SetEndAt sets field value.
func (o *ABTest) SetEndAt(v string) *ABTest {
	o.EndAt = v
	return o
}

// GetStoppedAt returns the StoppedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ABTest) GetStoppedAt() string {
	if o == nil || o.StoppedAt.Get() == nil {
		var ret string
		return ret
	}
	return *o.StoppedAt.Get()
}

// GetStoppedAtOk returns a tuple with the StoppedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *ABTest) GetStoppedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoppedAt.Get(), o.StoppedAt.IsSet()
}

// HasStoppedAt returns a boolean if a field has been set.
func (o *ABTest) HasStoppedAt() bool {
	if o != nil && o.StoppedAt.IsSet() {
		return true
	}

	return false
}

// SetStoppedAt gets a reference to the given utils.Nullable[string] and assigns it to the StoppedAt field.
func (o *ABTest) SetStoppedAt(v string) *ABTest {
	o.StoppedAt.Set(&v)
	return o
}

// SetStoppedAtNil sets the value for StoppedAt to be an explicit nil.
func (o *ABTest) SetStoppedAtNil() {
	o.StoppedAt.Set(nil)
}

// UnsetStoppedAt ensures that no value is present for StoppedAt, not even an explicit nil.
func (o *ABTest) UnsetStoppedAt() {
	o.StoppedAt.Unset()
}

// GetName returns the Name field value.
func (o *ABTest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *ABTest) SetName(v string) *ABTest {
	o.Name = v
	return o
}

// GetStatus returns the Status field value.
func (o *ABTest) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value.
func (o *ABTest) SetStatus(v Status) *ABTest {
	o.Status = v
	return o
}

// GetVariants returns the Variants field value.
func (o *ABTest) GetVariants() []Variant {
	if o == nil {
		var ret []Variant
		return ret
	}

	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value
// and a boolean to check if the value has been set.
func (o *ABTest) GetVariantsOk() ([]Variant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variants, true
}

// SetVariants sets field value.
func (o *ABTest) SetVariants(v []Variant) *ABTest {
	o.Variants = v
	return o
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ABTest) GetConfiguration() ABTestConfiguration {
	if o == nil || o.Configuration == nil {
		var ret ABTestConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTest) GetConfigurationOk() (*ABTestConfiguration, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ABTest) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given ABTestConfiguration and assigns it to the Configuration field.
func (o *ABTest) SetConfiguration(v *ABTestConfiguration) *ABTest {
	o.Configuration = v
	return o
}

// GetMigratedAbTestID returns the MigratedAbTestID field value if set, zero value otherwise.
func (o *ABTest) GetMigratedAbTestID() int32 {
	if o == nil || o.MigratedAbTestID == nil {
		var ret int32
		return ret
	}
	return *o.MigratedAbTestID
}

// GetMigratedAbTestIDOk returns a tuple with the MigratedAbTestID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTest) GetMigratedAbTestIDOk() (*int32, bool) {
	if o == nil || o.MigratedAbTestID == nil {
		return nil, false
	}
	return o.MigratedAbTestID, true
}

// HasMigratedAbTestID returns a boolean if a field has been set.
func (o *ABTest) HasMigratedAbTestID() bool {
	if o != nil && o.MigratedAbTestID != nil {
		return true
	}

	return false
}

// SetMigratedAbTestID gets a reference to the given int32 and assigns it to the MigratedAbTestID field.
func (o *ABTest) SetMigratedAbTestID(v int32) *ABTest {
	o.MigratedAbTestID = &v
	return o
}

func (o ABTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["abTestID"] = o.AbTestID
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["endAt"] = o.EndAt
	if o.StoppedAt.IsSet() {
		toSerialize["stoppedAt"] = o.StoppedAt.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["variants"] = o.Variants
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.MigratedAbTestID != nil {
		toSerialize["migratedAbTestID"] = o.MigratedAbTestID
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ABTest: %w", err)
	}

	return serialized, nil
}

func (o ABTest) String() string {
	out := ""
	out += fmt.Sprintf("  abTestID=%v\n", o.AbTestID)
	out += fmt.Sprintf("  updatedAt=%v\n", o.UpdatedAt)
	out += fmt.Sprintf("  createdAt=%v\n", o.CreatedAt)
	out += fmt.Sprintf("  endAt=%v\n", o.EndAt)
	out += fmt.Sprintf("  stoppedAt=%v\n", o.StoppedAt)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  status=%v\n", o.Status)
	out += fmt.Sprintf("  variants=%v\n", o.Variants)
	out += fmt.Sprintf("  configuration=%v\n", o.Configuration)
	out += fmt.Sprintf("  migratedAbTestID=%v\n", o.MigratedAbTestID)
	return fmt.Sprintf("ABTest {\n%s}", out)
}
