// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// MetricsFilter Boolean filter applied to the A/B test population. Each filter targets a boolean metric and decides whether to include (true) or exclude (false) matching records.
type MetricsFilter struct {
	// Metric domain (for example `abtesting`, `personalization`).
	Domain string `json:"domain"`
	// Public metric name.
	Name string `json:"name"`
	// Whether the experiment should record the effects of this filter.
	TrackEffects *bool `json:"trackEffects,omitempty"`
	// If true, keep items that match the filter; if false, exclude them.
	Includes *bool `json:"includes,omitempty"`
}

type MetricsFilterOption func(f *MetricsFilter)

func WithMetricsFilterTrackEffects(val bool) MetricsFilterOption {
	return func(f *MetricsFilter) {
		f.TrackEffects = &val
	}
}

func WithMetricsFilterIncludes(val bool) MetricsFilterOption {
	return func(f *MetricsFilter) {
		f.Includes = &val
	}
}

// NewMetricsFilter instantiates a new MetricsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMetricsFilter(domain string, name string, opts ...MetricsFilterOption) *MetricsFilter {
	this := &MetricsFilter{}
	this.Domain = domain
	this.Name = name
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyMetricsFilter return a pointer to an empty MetricsFilter object.
func NewEmptyMetricsFilter() *MetricsFilter {
	return &MetricsFilter{}
}

// GetDomain returns the Domain field value.
func (o *MetricsFilter) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value.
func (o *MetricsFilter) SetDomain(v string) *MetricsFilter {
	o.Domain = v
	return o
}

// GetName returns the Name field value.
func (o *MetricsFilter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *MetricsFilter) SetName(v string) *MetricsFilter {
	o.Name = v
	return o
}

// GetTrackEffects returns the TrackEffects field value if set, zero value otherwise.
func (o *MetricsFilter) GetTrackEffects() bool {
	if o == nil || o.TrackEffects == nil {
		var ret bool
		return ret
	}
	return *o.TrackEffects
}

// GetTrackEffectsOk returns a tuple with the TrackEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetTrackEffectsOk() (*bool, bool) {
	if o == nil || o.TrackEffects == nil {
		return nil, false
	}
	return o.TrackEffects, true
}

// HasTrackEffects returns a boolean if a field has been set.
func (o *MetricsFilter) HasTrackEffects() bool {
	if o != nil && o.TrackEffects != nil {
		return true
	}

	return false
}

// SetTrackEffects gets a reference to the given bool and assigns it to the TrackEffects field.
func (o *MetricsFilter) SetTrackEffects(v bool) *MetricsFilter {
	o.TrackEffects = &v
	return o
}

// GetIncludes returns the Includes field value if set, zero value otherwise.
func (o *MetricsFilter) GetIncludes() bool {
	if o == nil || o.Includes == nil {
		var ret bool
		return ret
	}
	return *o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetIncludesOk() (*bool, bool) {
	if o == nil || o.Includes == nil {
		return nil, false
	}
	return o.Includes, true
}

// HasIncludes returns a boolean if a field has been set.
func (o *MetricsFilter) HasIncludes() bool {
	if o != nil && o.Includes != nil {
		return true
	}

	return false
}

// SetIncludes gets a reference to the given bool and assigns it to the Includes field.
func (o *MetricsFilter) SetIncludes(v bool) *MetricsFilter {
	o.Includes = &v
	return o
}

func (o MetricsFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["domain"] = o.Domain
	toSerialize["name"] = o.Name
	if o.TrackEffects != nil {
		toSerialize["trackEffects"] = o.TrackEffects
	}
	if o.Includes != nil {
		toSerialize["includes"] = o.Includes
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MetricsFilter: %w", err)
	}

	return serialized, nil
}

func (o MetricsFilter) String() string {
	out := ""
	out += fmt.Sprintf("  domain=%v\n", o.Domain)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  trackEffects=%v\n", o.TrackEffects)
	out += fmt.Sprintf("  includes=%v\n", o.Includes)
	return fmt.Sprintf("MetricsFilter {\n%s}", out)
}
