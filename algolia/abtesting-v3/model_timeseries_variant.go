// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// TimeseriesVariant struct for TimeseriesVariant.
type TimeseriesVariant struct {
	Dates []MetricDate `json:"dates,omitempty"`
}

type TimeseriesVariantOption func(f *TimeseriesVariant)

func WithTimeseriesVariantDates(val []MetricDate) TimeseriesVariantOption {
	return func(f *TimeseriesVariant) {
		f.Dates = val
	}
}

// NewTimeseriesVariant instantiates a new TimeseriesVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTimeseriesVariant(opts ...TimeseriesVariantOption) *TimeseriesVariant {
	this := &TimeseriesVariant{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyTimeseriesVariant return a pointer to an empty TimeseriesVariant object.
func NewEmptyTimeseriesVariant() *TimeseriesVariant {
	return &TimeseriesVariant{}
}

// GetDates returns the Dates field value if set, zero value otherwise.
func (o *TimeseriesVariant) GetDates() []MetricDate {
	if o == nil || o.Dates == nil {
		var ret []MetricDate
		return ret
	}
	return o.Dates
}

// GetDatesOk returns a tuple with the Dates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesVariant) GetDatesOk() ([]MetricDate, bool) {
	if o == nil || o.Dates == nil {
		return nil, false
	}
	return o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *TimeseriesVariant) HasDates() bool {
	if o != nil && o.Dates != nil {
		return true
	}

	return false
}

// SetDates gets a reference to the given []MetricDate and assigns it to the Dates field.
func (o *TimeseriesVariant) SetDates(v []MetricDate) *TimeseriesVariant {
	o.Dates = v
	return o
}

func (o TimeseriesVariant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Dates != nil {
		toSerialize["dates"] = o.Dates
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TimeseriesVariant: %w", err)
	}

	return serialized, nil
}

func (o TimeseriesVariant) String() string {
	out := ""
	out += fmt.Sprintf("  dates=%v\n", o.Dates)
	return fmt.Sprintf("TimeseriesVariant {\n%s}", out)
}
