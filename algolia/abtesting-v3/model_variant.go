// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// Variant struct for Variant.
type Variant struct {
	// Description for this variant.
	Description string `json:"description"`
	// Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `minimumDetectableEffect` setting for this number to be included in the response.
	EstimatedSampleSize *int32 `json:"estimatedSampleSize,omitempty"`
	// Index name of the A/B test variant (case-sensitive).
	Index string `json:"index"`
	// Percentage of search requests each variant receives.
	TrafficPercentage int32 `json:"trafficPercentage"`
	// All ABTest metrics that were defined during test creation.
	Metrics  []MetricResult   `json:"metrics"`
	Metadata *VariantMetadata `json:"metadata,omitempty"`
	// Search parameters applied to this variant when the same index is used for multiple variants. Only present if custom search parameters were provided during test creation.
	CustomSearchParameters map[string]any `json:"customSearchParameters,omitempty"`
}

type VariantOption func(f *Variant)

func WithVariantEstimatedSampleSize(val int32) VariantOption {
	return func(f *Variant) {
		f.EstimatedSampleSize = &val
	}
}

func WithVariantMetadata(val VariantMetadata) VariantOption {
	return func(f *Variant) {
		f.Metadata = &val
	}
}

func WithVariantCustomSearchParameters(val map[string]any) VariantOption {
	return func(f *Variant) {
		f.CustomSearchParameters = val
	}
}

// NewVariant instantiates a new Variant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewVariant(description string, index string, trafficPercentage int32, metrics []MetricResult, opts ...VariantOption) *Variant {
	this := &Variant{}
	this.Description = description
	this.Index = index
	this.TrafficPercentage = trafficPercentage

	this.Metrics = metrics
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyVariant return a pointer to an empty Variant object.
func NewEmptyVariant() *Variant {
	return &Variant{}
}

// GetDescription returns the Description field value.
func (o *Variant) GetDescription() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Variant) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Description, true
}

// SetDescription sets field value.
func (o *Variant) SetDescription(v string) *Variant {
	o.Description = v

	return o
}

// GetEstimatedSampleSize returns the EstimatedSampleSize field value if set, zero value otherwise.
func (o *Variant) GetEstimatedSampleSize() int32 {
	if o == nil || o.EstimatedSampleSize == nil {
		var ret int32

		return ret
	}

	return *o.EstimatedSampleSize
}

// GetEstimatedSampleSizeOk returns a tuple with the EstimatedSampleSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetEstimatedSampleSizeOk() (*int32, bool) {
	if o == nil || o.EstimatedSampleSize == nil {
		return nil, false
	}

	return o.EstimatedSampleSize, true
}

// HasEstimatedSampleSize returns a boolean if a field has been set.
func (o *Variant) HasEstimatedSampleSize() bool {
	if o != nil && o.EstimatedSampleSize != nil {
		return true
	}

	return false
}

// SetEstimatedSampleSize gets a reference to the given int32 and assigns it to the EstimatedSampleSize field.
func (o *Variant) SetEstimatedSampleSize(v int32) *Variant {
	o.EstimatedSampleSize = &v

	return o
}

// GetIndex returns the Index field value.
func (o *Variant) GetIndex() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *Variant) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Index, true
}

// SetIndex sets field value.
func (o *Variant) SetIndex(v string) *Variant {
	o.Index = v

	return o
}

// GetTrafficPercentage returns the TrafficPercentage field value.
func (o *Variant) GetTrafficPercentage() int32 {
	if o == nil {
		var ret int32

		return ret
	}

	return o.TrafficPercentage
}

// GetTrafficPercentageOk returns a tuple with the TrafficPercentage field value
// and a boolean to check if the value has been set.
func (o *Variant) GetTrafficPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return &o.TrafficPercentage, true
}

// SetTrafficPercentage sets field value.
func (o *Variant) SetTrafficPercentage(v int32) *Variant {
	o.TrafficPercentage = v

	return o
}

// GetMetrics returns the Metrics field value.
func (o *Variant) GetMetrics() []MetricResult {
	if o == nil {
		var ret []MetricResult

		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *Variant) GetMetricsOk() ([]MetricResult, bool) {
	if o == nil {
		return nil, false
	}

	return o.Metrics, true
}

// SetMetrics sets field value.
func (o *Variant) SetMetrics(v []MetricResult) *Variant {
	o.Metrics = v

	return o
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Variant) GetMetadata() VariantMetadata {
	if o == nil || o.Metadata == nil {
		var ret VariantMetadata

		return ret
	}

	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetMetadataOk() (*VariantMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}

	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Variant) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given VariantMetadata and assigns it to the Metadata field.
func (o *Variant) SetMetadata(v *VariantMetadata) *Variant {
	o.Metadata = v

	return o
}

// GetCustomSearchParameters returns the CustomSearchParameters field value if set, zero value otherwise.
func (o *Variant) GetCustomSearchParameters() map[string]any {
	if o == nil || o.CustomSearchParameters == nil {
		var ret map[string]any

		return ret
	}

	return o.CustomSearchParameters
}

// GetCustomSearchParametersOk returns a tuple with the CustomSearchParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetCustomSearchParametersOk() (map[string]any, bool) {
	if o == nil || o.CustomSearchParameters == nil {
		return nil, false
	}

	return o.CustomSearchParameters, true
}

// HasCustomSearchParameters returns a boolean if a field has been set.
func (o *Variant) HasCustomSearchParameters() bool {
	if o != nil && o.CustomSearchParameters != nil {
		return true
	}

	return false
}

// SetCustomSearchParameters gets a reference to the given map[string]any and assigns it to the CustomSearchParameters field.
func (o *Variant) SetCustomSearchParameters(v map[string]any) *Variant {
	o.CustomSearchParameters = v

	return o
}

func (o Variant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}

	toSerialize["description"] = o.Description
	if o.EstimatedSampleSize != nil {
		toSerialize["estimatedSampleSize"] = o.EstimatedSampleSize
	}

	toSerialize["index"] = o.Index
	toSerialize["trafficPercentage"] = o.TrafficPercentage

	toSerialize["metrics"] = o.Metrics
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	if o.CustomSearchParameters != nil {
		toSerialize["customSearchParameters"] = o.CustomSearchParameters
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Variant: %w", err)
	}

	return serialized, nil
}

func (o Variant) String() string {
	out := ""
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  estimatedSampleSize=%v\n", o.EstimatedSampleSize)
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  trafficPercentage=%v\n", o.TrafficPercentage)
	out += fmt.Sprintf("  metrics=%v\n", o.Metrics)
	out += fmt.Sprintf("  metadata=%v\n", o.Metadata)
	out += fmt.Sprintf("  customSearchParameters=%v\n", o.CustomSearchParameters)

	return fmt.Sprintf("Variant {\n%s}", out)
}
