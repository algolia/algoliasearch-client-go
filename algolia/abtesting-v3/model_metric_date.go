// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// MetricDate struct for MetricDate.
type MetricDate struct {
	// Date where the metric was updated, in RFC 3339 format.
	Date *string `json:"date,omitempty"`
	// All ABTest metrics that were defined during test creation.
	Metrics []MetricResult `json:"metrics,omitempty"`
}

type MetricDateOption func(f *MetricDate)

func WithMetricDateDate(val string) MetricDateOption {
	return func(f *MetricDate) {
		f.Date = &val
	}
}

func WithMetricDateMetrics(val []MetricResult) MetricDateOption {
	return func(f *MetricDate) {
		f.Metrics = val
	}
}

// NewMetricDate instantiates a new MetricDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMetricDate(opts ...MetricDateOption) *MetricDate {
	this := &MetricDate{}
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyMetricDate return a pointer to an empty MetricDate object.
func NewEmptyMetricDate() *MetricDate {
	return &MetricDate{}
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *MetricDate) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string

		return ret
	}

	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDate) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}

	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *MetricDate) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *MetricDate) SetDate(v string) *MetricDate {
	o.Date = &v

	return o
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *MetricDate) GetMetrics() []MetricResult {
	if o == nil || o.Metrics == nil {
		var ret []MetricResult

		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDate) GetMetricsOk() ([]MetricResult, bool) {
	if o == nil || o.Metrics == nil {
		return nil, false
	}

	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *MetricDate) HasMetrics() bool {
	if o != nil && o.Metrics != nil {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricResult and assigns it to the Metrics field.
func (o *MetricDate) SetMetrics(v []MetricResult) *MetricDate {
	o.Metrics = v

	return o
}

func (o MetricDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}

	if o.Metrics != nil {
		toSerialize["metrics"] = o.Metrics
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MetricDate: %w", err)
	}

	return serialized, nil
}

func (o MetricDate) String() string {
	out := ""
	out += fmt.Sprintf("  date=%v\n", o.Date)
	out += fmt.Sprintf("  metrics=%v\n", o.Metrics)

	return fmt.Sprintf("MetricDate {\n%s}", out)
}
