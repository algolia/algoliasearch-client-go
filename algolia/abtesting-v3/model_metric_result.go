// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// MetricResult struct for MetricResult.
type MetricResult struct {
	Name string `json:"name"`
	// Date and time when the metric was last updated, in RFC 3339 format.
	UpdatedAt string  `json:"updatedAt"`
	Value     float64 `json:"value"`
	// The upper bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
	ValueCIHigh *float64 `json:"valueCIHigh,omitempty"`
	// The lower bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
	ValueCILow *float64 `json:"valueCILow,omitempty"`
	// PValue for the first variant (control) will always be 0. For the other variants, pValue is calculated for the current variant based on the control.
	PValue float64 `json:"pValue"`
	// Dimension defined during test creation.
	Dimension *string         `json:"dimension,omitempty"`
	Metadata  *MetricMetadata `json:"metadata,omitempty"`
	// The value that was computed during error correction. It is used to determine significance of the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg corrections, based on the given configuration during the A/B test creation.
	CriticalValue *float64 `json:"criticalValue,omitempty"`
	// Whether the pValue is significant or not based on the critical value and the error correction algorithm used.
	Significant *bool `json:"significant,omitempty"`
}

type MetricResultOption func(f *MetricResult)

func WithMetricResultValueCIHigh(val float64) MetricResultOption {
	return func(f *MetricResult) {
		f.ValueCIHigh = &val
	}
}

func WithMetricResultValueCILow(val float64) MetricResultOption {
	return func(f *MetricResult) {
		f.ValueCILow = &val
	}
}

func WithMetricResultDimension(val string) MetricResultOption {
	return func(f *MetricResult) {
		f.Dimension = &val
	}
}

func WithMetricResultMetadata(val MetricMetadata) MetricResultOption {
	return func(f *MetricResult) {
		f.Metadata = &val
	}
}

func WithMetricResultCriticalValue(val float64) MetricResultOption {
	return func(f *MetricResult) {
		f.CriticalValue = &val
	}
}

func WithMetricResultSignificant(val bool) MetricResultOption {
	return func(f *MetricResult) {
		f.Significant = &val
	}
}

// NewMetricResult instantiates a new MetricResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMetricResult(name string, updatedAt string, value float64, pValue float64, opts ...MetricResultOption) *MetricResult {
	this := &MetricResult{}
	this.Name = name
	this.UpdatedAt = updatedAt
	this.Value = value
	this.PValue = pValue
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyMetricResult return a pointer to an empty MetricResult object.
func NewEmptyMetricResult() *MetricResult {
	return &MetricResult{}
}

// GetName returns the Name field value.
func (o *MetricResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *MetricResult) SetName(v string) *MetricResult {
	o.Name = v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value.
func (o *MetricResult) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MetricResult) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value.
func (o *MetricResult) SetUpdatedAt(v string) *MetricResult {
	o.UpdatedAt = v
	return o
}

// GetValue returns the Value field value.
func (o *MetricResult) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetricResult) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value.
func (o *MetricResult) SetValue(v float64) *MetricResult {
	o.Value = v
	return o
}

// GetValueCIHigh returns the ValueCIHigh field value if set, zero value otherwise.
func (o *MetricResult) GetValueCIHigh() float64 {
	if o == nil || o.ValueCIHigh == nil {
		var ret float64
		return ret
	}
	return *o.ValueCIHigh
}

// GetValueCIHighOk returns a tuple with the ValueCIHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetValueCIHighOk() (*float64, bool) {
	if o == nil || o.ValueCIHigh == nil {
		return nil, false
	}
	return o.ValueCIHigh, true
}

// HasValueCIHigh returns a boolean if a field has been set.
func (o *MetricResult) HasValueCIHigh() bool {
	if o != nil && o.ValueCIHigh != nil {
		return true
	}

	return false
}

// SetValueCIHigh gets a reference to the given float64 and assigns it to the ValueCIHigh field.
func (o *MetricResult) SetValueCIHigh(v float64) *MetricResult {
	o.ValueCIHigh = &v
	return o
}

// GetValueCILow returns the ValueCILow field value if set, zero value otherwise.
func (o *MetricResult) GetValueCILow() float64 {
	if o == nil || o.ValueCILow == nil {
		var ret float64
		return ret
	}
	return *o.ValueCILow
}

// GetValueCILowOk returns a tuple with the ValueCILow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetValueCILowOk() (*float64, bool) {
	if o == nil || o.ValueCILow == nil {
		return nil, false
	}
	return o.ValueCILow, true
}

// HasValueCILow returns a boolean if a field has been set.
func (o *MetricResult) HasValueCILow() bool {
	if o != nil && o.ValueCILow != nil {
		return true
	}

	return false
}

// SetValueCILow gets a reference to the given float64 and assigns it to the ValueCILow field.
func (o *MetricResult) SetValueCILow(v float64) *MetricResult {
	o.ValueCILow = &v
	return o
}

// GetPValue returns the PValue field value.
func (o *MetricResult) GetPValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PValue
}

// GetPValueOk returns a tuple with the PValue field value
// and a boolean to check if the value has been set.
func (o *MetricResult) GetPValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PValue, true
}

// SetPValue sets field value.
func (o *MetricResult) SetPValue(v float64) *MetricResult {
	o.PValue = v
	return o
}

// GetDimension returns the Dimension field value if set, zero value otherwise.
func (o *MetricResult) GetDimension() string {
	if o == nil || o.Dimension == nil {
		var ret string
		return ret
	}
	return *o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetDimensionOk() (*string, bool) {
	if o == nil || o.Dimension == nil {
		return nil, false
	}
	return o.Dimension, true
}

// HasDimension returns a boolean if a field has been set.
func (o *MetricResult) HasDimension() bool {
	if o != nil && o.Dimension != nil {
		return true
	}

	return false
}

// SetDimension gets a reference to the given string and assigns it to the Dimension field.
func (o *MetricResult) SetDimension(v string) *MetricResult {
	o.Dimension = &v
	return o
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *MetricResult) GetMetadata() MetricMetadata {
	if o == nil || o.Metadata == nil {
		var ret MetricMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetMetadataOk() (*MetricMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *MetricResult) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given MetricMetadata and assigns it to the Metadata field.
func (o *MetricResult) SetMetadata(v *MetricMetadata) *MetricResult {
	o.Metadata = v
	return o
}

// GetCriticalValue returns the CriticalValue field value if set, zero value otherwise.
func (o *MetricResult) GetCriticalValue() float64 {
	if o == nil || o.CriticalValue == nil {
		var ret float64
		return ret
	}
	return *o.CriticalValue
}

// GetCriticalValueOk returns a tuple with the CriticalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetCriticalValueOk() (*float64, bool) {
	if o == nil || o.CriticalValue == nil {
		return nil, false
	}
	return o.CriticalValue, true
}

// HasCriticalValue returns a boolean if a field has been set.
func (o *MetricResult) HasCriticalValue() bool {
	if o != nil && o.CriticalValue != nil {
		return true
	}

	return false
}

// SetCriticalValue gets a reference to the given float64 and assigns it to the CriticalValue field.
func (o *MetricResult) SetCriticalValue(v float64) *MetricResult {
	o.CriticalValue = &v
	return o
}

// GetSignificant returns the Significant field value if set, zero value otherwise.
func (o *MetricResult) GetSignificant() bool {
	if o == nil || o.Significant == nil {
		var ret bool
		return ret
	}
	return *o.Significant
}

// GetSignificantOk returns a tuple with the Significant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricResult) GetSignificantOk() (*bool, bool) {
	if o == nil || o.Significant == nil {
		return nil, false
	}
	return o.Significant, true
}

// HasSignificant returns a boolean if a field has been set.
func (o *MetricResult) HasSignificant() bool {
	if o != nil && o.Significant != nil {
		return true
	}

	return false
}

// SetSignificant gets a reference to the given bool and assigns it to the Significant field.
func (o *MetricResult) SetSignificant(v bool) *MetricResult {
	o.Significant = &v
	return o
}

func (o MetricResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["name"] = o.Name
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["value"] = o.Value
	if o.ValueCIHigh != nil {
		toSerialize["valueCIHigh"] = o.ValueCIHigh
	}
	if o.ValueCILow != nil {
		toSerialize["valueCILow"] = o.ValueCILow
	}
	toSerialize["pValue"] = o.PValue
	if o.Dimension != nil {
		toSerialize["dimension"] = o.Dimension
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.CriticalValue != nil {
		toSerialize["criticalValue"] = o.CriticalValue
	}
	if o.Significant != nil {
		toSerialize["significant"] = o.Significant
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MetricResult: %w", err)
	}

	return serialized, nil
}

func (o MetricResult) String() string {
	out := ""
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  updatedAt=%v\n", o.UpdatedAt)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	out += fmt.Sprintf("  valueCIHigh=%v\n", o.ValueCIHigh)
	out += fmt.Sprintf("  valueCILow=%v\n", o.ValueCILow)
	out += fmt.Sprintf("  pValue=%v\n", o.PValue)
	out += fmt.Sprintf("  dimension=%v\n", o.Dimension)
	out += fmt.Sprintf("  metadata=%v\n", o.Metadata)
	out += fmt.Sprintf("  criticalValue=%v\n", o.CriticalValue)
	out += fmt.Sprintf("  significant=%v\n", o.Significant)
	return fmt.Sprintf("MetricResult {\n%s}", out)
}
