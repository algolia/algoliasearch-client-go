// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// CreateMetric Defines a metric to be retrieved during an A/B test.
type CreateMetric struct {
	// Name of the metric.
	Name string `json:"name"`
	// Dimension of the metric, for example, in case of a revenue metric it could be USD, EUR...
	Dimension *string `json:"dimension,omitempty"`
}

type CreateMetricOption func(f *CreateMetric)

func WithCreateMetricDimension(val string) CreateMetricOption {
	return func(f *CreateMetric) {
		f.Dimension = &val
	}
}

// NewCreateMetric instantiates a new CreateMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCreateMetric(name string, opts ...CreateMetricOption) *CreateMetric {
	this := &CreateMetric{}

	this.Name = name
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyCreateMetric return a pointer to an empty CreateMetric object.
func NewEmptyCreateMetric() *CreateMetric {
	return &CreateMetric{}
}

// GetName returns the Name field value.
func (o *CreateMetric) GetName() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMetric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Name, true
}

// SetName sets field value.
func (o *CreateMetric) SetName(v string) *CreateMetric {
	o.Name = v

	return o
}

// GetDimension returns the Dimension field value if set, zero value otherwise.
func (o *CreateMetric) GetDimension() string {
	if o == nil || o.Dimension == nil {
		var ret string

		return ret
	}

	return *o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMetric) GetDimensionOk() (*string, bool) {
	if o == nil || o.Dimension == nil {
		return nil, false
	}

	return o.Dimension, true
}

// HasDimension returns a boolean if a field has been set.
func (o *CreateMetric) HasDimension() bool {
	if o != nil && o.Dimension != nil {
		return true
	}

	return false
}

// SetDimension gets a reference to the given string and assigns it to the Dimension field.
func (o *CreateMetric) SetDimension(v string) *CreateMetric {
	o.Dimension = &v

	return o
}

func (o CreateMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}

	toSerialize["name"] = o.Name
	if o.Dimension != nil {
		toSerialize["dimension"] = o.Dimension
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CreateMetric: %w", err)
	}

	return serialized, nil
}

func (o CreateMetric) String() string {
	out := ""
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  dimension=%v\n", o.Dimension)

	return fmt.Sprintf("CreateMetric {\n%s}", out)
}
