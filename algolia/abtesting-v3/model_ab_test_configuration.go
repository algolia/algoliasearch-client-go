// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// ABTestConfiguration A/B test configuration.
type ABTestConfiguration struct {
	MinimumDetectableEffect *MinimumDetectableEffect `json:"minimumDetectableEffect,omitempty"`
	// List of metric filters applied to the test population.
	Filters         []MetricsFilter      `json:"filters,omitempty"`
	ErrorCorrection *ErrorCorrectionType `json:"errorCorrection,omitempty"`
}

type ABTestConfigurationOption func(f *ABTestConfiguration)

func WithABTestConfigurationMinimumDetectableEffect(val MinimumDetectableEffect) ABTestConfigurationOption {
	return func(f *ABTestConfiguration) {
		f.MinimumDetectableEffect = &val
	}
}

func WithABTestConfigurationFilters(val []MetricsFilter) ABTestConfigurationOption {
	return func(f *ABTestConfiguration) {
		f.Filters = val
	}
}

func WithABTestConfigurationErrorCorrection(val ErrorCorrectionType) ABTestConfigurationOption {
	return func(f *ABTestConfiguration) {
		f.ErrorCorrection = &val
	}
}

// NewABTestConfiguration instantiates a new ABTestConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewABTestConfiguration(opts ...ABTestConfigurationOption) *ABTestConfiguration {
	this := &ABTestConfiguration{}
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyABTestConfiguration return a pointer to an empty ABTestConfiguration object.
func NewEmptyABTestConfiguration() *ABTestConfiguration {
	return &ABTestConfiguration{}
}

// GetMinimumDetectableEffect returns the MinimumDetectableEffect field value if set, zero value otherwise.
func (o *ABTestConfiguration) GetMinimumDetectableEffect() MinimumDetectableEffect {
	if o == nil || o.MinimumDetectableEffect == nil {
		var ret MinimumDetectableEffect

		return ret
	}

	return *o.MinimumDetectableEffect
}

// GetMinimumDetectableEffectOk returns a tuple with the MinimumDetectableEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestConfiguration) GetMinimumDetectableEffectOk() (*MinimumDetectableEffect, bool) {
	if o == nil || o.MinimumDetectableEffect == nil {
		return nil, false
	}

	return o.MinimumDetectableEffect, true
}

// HasMinimumDetectableEffect returns a boolean if a field has been set.
func (o *ABTestConfiguration) HasMinimumDetectableEffect() bool {
	if o != nil && o.MinimumDetectableEffect != nil {
		return true
	}

	return false
}

// SetMinimumDetectableEffect gets a reference to the given MinimumDetectableEffect and assigns it to the MinimumDetectableEffect field.
func (o *ABTestConfiguration) SetMinimumDetectableEffect(v *MinimumDetectableEffect) *ABTestConfiguration {
	o.MinimumDetectableEffect = v

	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ABTestConfiguration) GetFilters() []MetricsFilter {
	if o == nil || o.Filters == nil {
		var ret []MetricsFilter

		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestConfiguration) GetFiltersOk() ([]MetricsFilter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}

	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ABTestConfiguration) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []MetricsFilter and assigns it to the Filters field.
func (o *ABTestConfiguration) SetFilters(v []MetricsFilter) *ABTestConfiguration {
	o.Filters = v

	return o
}

// GetErrorCorrection returns the ErrorCorrection field value if set, zero value otherwise.
func (o *ABTestConfiguration) GetErrorCorrection() ErrorCorrectionType {
	if o == nil || o.ErrorCorrection == nil {
		var ret ErrorCorrectionType

		return ret
	}

	return *o.ErrorCorrection
}

// GetErrorCorrectionOk returns a tuple with the ErrorCorrection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ABTestConfiguration) GetErrorCorrectionOk() (*ErrorCorrectionType, bool) {
	if o == nil || o.ErrorCorrection == nil {
		return nil, false
	}

	return o.ErrorCorrection, true
}

// HasErrorCorrection returns a boolean if a field has been set.
func (o *ABTestConfiguration) HasErrorCorrection() bool {
	if o != nil && o.ErrorCorrection != nil {
		return true
	}

	return false
}

// SetErrorCorrection gets a reference to the given ErrorCorrectionType and assigns it to the ErrorCorrection field.
func (o *ABTestConfiguration) SetErrorCorrection(v ErrorCorrectionType) *ABTestConfiguration {
	o.ErrorCorrection = &v

	return o
}

func (o ABTestConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.MinimumDetectableEffect != nil {
		toSerialize["minimumDetectableEffect"] = o.MinimumDetectableEffect
	}

	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}

	if o.ErrorCorrection != nil {
		toSerialize["errorCorrection"] = o.ErrorCorrection
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ABTestConfiguration: %w", err)
	}

	return serialized, nil
}

func (o ABTestConfiguration) String() string {
	out := ""
	out += fmt.Sprintf("  minimumDetectableEffect=%v\n", o.MinimumDetectableEffect)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  errorCorrection=%v\n", o.ErrorCorrection)

	return fmt.Sprintf("ABTestConfiguration {\n%s}", out)
}
