// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package abtestingV3

import (
	"encoding/json"
	"fmt"
)

// VariantMetadata Variant specific metadata.
type VariantMetadata struct {
	FilterEffects *FilterEffects `json:"filterEffects,omitempty"`
}

type VariantMetadataOption func(f *VariantMetadata)

func WithVariantMetadataFilterEffects(val FilterEffects) VariantMetadataOption {
	return func(f *VariantMetadata) {
		f.FilterEffects = &val
	}
}

// NewVariantMetadata instantiates a new VariantMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewVariantMetadata(opts ...VariantMetadataOption) *VariantMetadata {
	this := &VariantMetadata{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyVariantMetadata return a pointer to an empty VariantMetadata object.
func NewEmptyVariantMetadata() *VariantMetadata {
	return &VariantMetadata{}
}

// GetFilterEffects returns the FilterEffects field value if set, zero value otherwise.
func (o *VariantMetadata) GetFilterEffects() FilterEffects {
	if o == nil || o.FilterEffects == nil {
		var ret FilterEffects
		return ret
	}
	return *o.FilterEffects
}

// GetFilterEffectsOk returns a tuple with the FilterEffects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantMetadata) GetFilterEffectsOk() (*FilterEffects, bool) {
	if o == nil || o.FilterEffects == nil {
		return nil, false
	}
	return o.FilterEffects, true
}

// HasFilterEffects returns a boolean if a field has been set.
func (o *VariantMetadata) HasFilterEffects() bool {
	if o != nil && o.FilterEffects != nil {
		return true
	}

	return false
}

// SetFilterEffects gets a reference to the given FilterEffects and assigns it to the FilterEffects field.
func (o *VariantMetadata) SetFilterEffects(v *FilterEffects) *VariantMetadata {
	o.FilterEffects = v
	return o
}

func (o VariantMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.FilterEffects != nil {
		toSerialize["filterEffects"] = o.FilterEffects
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal VariantMetadata: %w", err)
	}

	return serialized, nil
}

func (o VariantMetadata) String() string {
	out := ""
	out += fmt.Sprintf("  filterEffects=%v\n", o.FilterEffects)
	return fmt.Sprintf("VariantMetadata {\n%s}", out)
}
