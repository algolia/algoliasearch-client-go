// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// Consequence Effect of the rule.
type Consequence struct {
	// Exclude items from recommendations.
	Hide []HideConsequenceObject `json:"hide,omitempty"`
	// Place items at specific positions in the list of recommendations.
	Promote []PromoteConsequenceObject `json:"promote,omitempty"`
	Params  *ParamsConsequence         `json:"params,omitempty"`
}

type ConsequenceOption func(f *Consequence)

func WithConsequenceHide(val []HideConsequenceObject) ConsequenceOption {
	return func(f *Consequence) {
		f.Hide = val
	}
}

func WithConsequencePromote(val []PromoteConsequenceObject) ConsequenceOption {
	return func(f *Consequence) {
		f.Promote = val
	}
}

func WithConsequenceParams(val ParamsConsequence) ConsequenceOption {
	return func(f *Consequence) {
		f.Params = &val
	}
}

// NewConsequence instantiates a new Consequence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewConsequence(opts ...ConsequenceOption) *Consequence {
	this := &Consequence{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyConsequence return a pointer to an empty Consequence object.
func NewEmptyConsequence() *Consequence {
	return &Consequence{}
}

// GetHide returns the Hide field value if set, zero value otherwise.
func (o *Consequence) GetHide() []HideConsequenceObject {
	if o == nil || o.Hide == nil {
		var ret []HideConsequenceObject
		return ret
	}
	return o.Hide
}

// GetHideOk returns a tuple with the Hide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consequence) GetHideOk() ([]HideConsequenceObject, bool) {
	if o == nil || o.Hide == nil {
		return nil, false
	}
	return o.Hide, true
}

// HasHide returns a boolean if a field has been set.
func (o *Consequence) HasHide() bool {
	if o != nil && o.Hide != nil {
		return true
	}

	return false
}

// SetHide gets a reference to the given []HideConsequenceObject and assigns it to the Hide field.
func (o *Consequence) SetHide(v []HideConsequenceObject) *Consequence {
	o.Hide = v
	return o
}

// GetPromote returns the Promote field value if set, zero value otherwise.
func (o *Consequence) GetPromote() []PromoteConsequenceObject {
	if o == nil || o.Promote == nil {
		var ret []PromoteConsequenceObject
		return ret
	}
	return o.Promote
}

// GetPromoteOk returns a tuple with the Promote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consequence) GetPromoteOk() ([]PromoteConsequenceObject, bool) {
	if o == nil || o.Promote == nil {
		return nil, false
	}
	return o.Promote, true
}

// HasPromote returns a boolean if a field has been set.
func (o *Consequence) HasPromote() bool {
	if o != nil && o.Promote != nil {
		return true
	}

	return false
}

// SetPromote gets a reference to the given []PromoteConsequenceObject and assigns it to the Promote field.
func (o *Consequence) SetPromote(v []PromoteConsequenceObject) *Consequence {
	o.Promote = v
	return o
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *Consequence) GetParams() ParamsConsequence {
	if o == nil || o.Params == nil {
		var ret ParamsConsequence
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consequence) GetParamsOk() (*ParamsConsequence, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *Consequence) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given ParamsConsequence and assigns it to the Params field.
func (o *Consequence) SetParams(v *ParamsConsequence) *Consequence {
	o.Params = v
	return o
}

func (o Consequence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Hide != nil {
		toSerialize["hide"] = o.Hide
	}
	if o.Promote != nil {
		toSerialize["promote"] = o.Promote
	}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Consequence: %w", err)
	}

	return serialized, nil
}

func (o Consequence) String() string {
	out := ""
	out += fmt.Sprintf("  hide=%v\n", o.Hide)
	out += fmt.Sprintf("  promote=%v\n", o.Promote)
	out += fmt.Sprintf("  params=%v\n", o.Params)
	return fmt.Sprintf("Consequence {\n%s}", out)
}
