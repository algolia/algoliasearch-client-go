// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// RecommendModels the model 'RecommendModels'.
type RecommendModels string

// List of recommendModels.
const (
	RECOMMEND_MODELS_RELATED_PRODUCTS RecommendModels = "related-products"
	RECOMMEND_MODELS_BOUGHT_TOGETHER  RecommendModels = "bought-together"
	RECOMMEND_MODELS_TRENDING_FACETS  RecommendModels = "trending-facets"
	RECOMMEND_MODELS_TRENDING_ITEMS   RecommendModels = "trending-items"
)

// All allowed values of RecommendModels enum.
var AllowedRecommendModelsEnumValues = []RecommendModels{
	"related-products",
	"bought-together",
	"trending-facets",
	"trending-items",
}

func (v *RecommendModels) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RecommendModels': %w", string(src), err)
	}
	enumTypeValue := RecommendModels(value)
	for _, existing := range AllowedRecommendModelsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecommendModels", value)
}

// NewRecommendModelsFromValue returns a pointer to a valid RecommendModels
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRecommendModelsFromValue(v string) (*RecommendModels, error) {
	ev := RecommendModels(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecommendModels: valid values are %v", v, AllowedRecommendModelsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RecommendModels) IsValid() bool {
	for _, existing := range AllowedRecommendModelsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to recommendModels value.
func (v RecommendModels) Ptr() *RecommendModels {
	return &v
}

type NullableRecommendModels struct {
	value *RecommendModels
	isSet bool
}

func (v NullableRecommendModels) Get() *RecommendModels {
	return v.value
}

func (v *NullableRecommendModels) Set(val *RecommendModels) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendModels) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendModels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendModels(val *RecommendModels) *NullableRecommendModels {
	return &NullableRecommendModels{value: val, isSet: true}
}

func (v NullableRecommendModels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRecommendModels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
