// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package recommend

import (
	"encoding/json"
	"fmt"
)

// Facets Order of facet names.
type Facets struct {
	// Explicit order of facets or facet values.  This setting lets you always show specific facets or facet values at the top of the list.
	Order []string `json:"order,omitempty"`
}

type FacetsOption func(f *Facets)

func WithFacetsOrder(val []string) FacetsOption {
	return func(f *Facets) {
		f.Order = val
	}
}

// NewFacets instantiates a new Facets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewFacets(opts ...FacetsOption) *Facets {
	this := &Facets{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyFacets return a pointer to an empty Facets object.
func NewEmptyFacets() *Facets {
	return &Facets{}
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Facets) GetOrder() []string {
	if o == nil || o.Order == nil {
		var ret []string
		return ret
	}
	return o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Facets) GetOrderOk() ([]string, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Facets) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given []string and assigns it to the Order field.
func (o *Facets) SetOrder(v []string) *Facets {
	o.Order = v
	return o
}

func (o Facets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Facets: %w", err)
	}

	return serialized, nil
}

func (o Facets) String() string {
	out := ""
	out += fmt.Sprintf("  order=%v\n", o.Order)
	return fmt.Sprintf("Facets {\n%s}", out)
}

type NullableFacets struct {
	value *Facets
	isSet bool
}

func (v NullableFacets) Get() *Facets {
	return v.value
}

func (v *NullableFacets) Set(val *Facets) {
	v.value = val
	v.isSet = true
}

func (v NullableFacets) IsSet() bool {
	return v.isSet
}

func (v *NullableFacets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacets(val *Facets) *NullableFacets {
	return &NullableFacets{value: val, isSet: true}
}

func (v NullableFacets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableFacets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
