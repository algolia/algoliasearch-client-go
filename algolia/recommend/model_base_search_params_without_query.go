// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// BaseSearchParamsWithoutQuery struct for BaseSearchParamsWithoutQuery
type BaseSearchParamsWithoutQuery struct {
	// Overrides the query parameter and performs a more generic search that can be used to find \"similar\" results.
	SimilarQuery *string `json:"similarQuery,omitempty"`
	// Filter the query with numeric, facet and/or tag filters.
	Filters         *string          `json:"filters,omitempty"`
	FacetFilters    *FacetFilters    `json:"facetFilters,omitempty"`
	OptionalFilters *OptionalFilters `json:"optionalFilters,omitempty"`
	NumericFilters  *NumericFilters  `json:"numericFilters,omitempty"`
	TagFilters      *TagFilters      `json:"tagFilters,omitempty"`
	// Determines how to calculate the total score for filtering.
	SumOrFiltersScores *bool `json:"sumOrFiltersScores,omitempty"`
	// Retrieve facets and their facet values.
	Facets []string `json:"facets,omitempty"`
	// Maximum number of facet values to return for each facet during a regular search.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Force faceting to be applied after de-duplication (via the Distinct setting).
	FacetingAfterDistinct *bool `json:"facetingAfterDistinct,omitempty"`
	// Controls how facet values are fetched.
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// Specify the page to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Specify the offset of the first hit to return.
	Offset *int32 `json:"offset,omitempty"`
	// Set the number of hits to retrieve (used only with offset).
	Length *int32 `json:"length,omitempty"`
	// Search for entries around a central geolocation, enabling a geo search within a circular area.
	AroundLatLng *string `json:"aroundLatLng,omitempty"`
	// Search for entries around a given location automatically computed from the requester's IP address.
	AroundLatLngViaIP *bool         `json:"aroundLatLngViaIP,omitempty"`
	AroundRadius      *AroundRadius `json:"aroundRadius,omitempty"`
	// Precision of geo search (in meters), to add grouping by geo location to the ranking formula.
	AroundPrecision *int32 `json:"aroundPrecision,omitempty"`
	// Minimum radius (in meters) used for a geo search when aroundRadius is not set.
	MinimumAroundRadius *int32 `json:"minimumAroundRadius,omitempty"`
	// Search inside a rectangular area (in geo coordinates).
	InsideBoundingBox []float64 `json:"insideBoundingBox,omitempty"`
	// Search inside a polygon (in geo coordinates).
	InsidePolygon []float64 `json:"insidePolygon,omitempty"`
	// This parameter changes the default values of certain parameters and settings that work best for a natural language query, such as ignorePlurals, removeStopWords, removeWordsIfNoResults, analyticsTags and ruleContexts. These parameters and settings work well together when the query is formatted in natural language instead of keywords, for example when your user performs a voice search.
	NaturalLanguages []string `json:"naturalLanguages,omitempty"`
	// Enables contextual rules.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// Define the impact of the Personalization feature.
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Associates a certain user token with the current search.
	UserToken *string `json:"userToken,omitempty"`
	// Retrieve detailed ranking information.
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// Enable the Click Analytics feature.
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Whether the current query will be taken into account in the Analytics.
	Analytics *bool `json:"analytics,omitempty"`
	// List of tags to apply to the query for analytics purposes.
	AnalyticsTags []string `json:"analyticsTags,omitempty"`
	// Whether to include or exclude a query from the processing-time percentile computation.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Whether this search should participate in running AB tests.
	EnableABTest *bool `json:"enableABTest,omitempty"`
	// Whether this search should use AI Re-Ranking.
	EnableReRanking      *bool                        `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter NullableReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
}

type BaseSearchParamsWithoutQueryOption func(f *BaseSearchParamsWithoutQuery)

func WithBaseSearchParamsWithoutQuerySimilarQuery(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.SimilarQuery = &val
	}
}

func WithBaseSearchParamsWithoutQueryFilters(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Filters = &val
	}
}

func WithBaseSearchParamsWithoutQueryFacetFilters(val FacetFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.FacetFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryOptionalFilters(val OptionalFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.OptionalFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryNumericFilters(val NumericFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.NumericFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryTagFilters(val TagFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.TagFilters = &val
	}
}

func WithBaseSearchParamsWithoutQuerySumOrFiltersScores(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.SumOrFiltersScores = &val
	}
}

func WithBaseSearchParamsWithoutQueryFacets(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Facets = val
	}
}

func WithBaseSearchParamsWithoutQueryMaxValuesPerFacet(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.MaxValuesPerFacet = &val
	}
}

func WithBaseSearchParamsWithoutQueryFacetingAfterDistinct(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.FacetingAfterDistinct = &val
	}
}

func WithBaseSearchParamsWithoutQuerySortFacetValuesBy(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.SortFacetValuesBy = &val
	}
}

func WithBaseSearchParamsWithoutQueryPage(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Page = &val
	}
}

func WithBaseSearchParamsWithoutQueryOffset(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Offset = &val
	}
}

func WithBaseSearchParamsWithoutQueryLength(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Length = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundLatLng(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundLatLng = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundLatLngViaIP(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundLatLngViaIP = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundRadius(val AroundRadius) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundRadius = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundPrecision(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundPrecision = &val
	}
}

func WithBaseSearchParamsWithoutQueryMinimumAroundRadius(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.MinimumAroundRadius = &val
	}
}

func WithBaseSearchParamsWithoutQueryInsideBoundingBox(val []float64) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.InsideBoundingBox = val
	}
}

func WithBaseSearchParamsWithoutQueryInsidePolygon(val []float64) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.InsidePolygon = val
	}
}

func WithBaseSearchParamsWithoutQueryNaturalLanguages(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.NaturalLanguages = val
	}
}

func WithBaseSearchParamsWithoutQueryRuleContexts(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.RuleContexts = val
	}
}

func WithBaseSearchParamsWithoutQueryPersonalizationImpact(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.PersonalizationImpact = &val
	}
}

func WithBaseSearchParamsWithoutQueryUserToken(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.UserToken = &val
	}
}

func WithBaseSearchParamsWithoutQueryGetRankingInfo(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.GetRankingInfo = &val
	}
}

func WithBaseSearchParamsWithoutQueryClickAnalytics(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.ClickAnalytics = &val
	}
}

func WithBaseSearchParamsWithoutQueryAnalytics(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Analytics = &val
	}
}

func WithBaseSearchParamsWithoutQueryAnalyticsTags(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AnalyticsTags = val
	}
}

func WithBaseSearchParamsWithoutQueryPercentileComputation(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.PercentileComputation = &val
	}
}

func WithBaseSearchParamsWithoutQueryEnableABTest(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.EnableABTest = &val
	}
}

func WithBaseSearchParamsWithoutQueryEnableReRanking(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.EnableReRanking = &val
	}
}

func WithBaseSearchParamsWithoutQueryReRankingApplyFilter(val NullableReRankingApplyFilter) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.ReRankingApplyFilter = val
	}
}

// NewBaseSearchParamsWithoutQuery instantiates a new BaseSearchParamsWithoutQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseSearchParamsWithoutQuery(opts ...BaseSearchParamsWithoutQueryOption) *BaseSearchParamsWithoutQuery {
	this := &BaseSearchParamsWithoutQuery{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewBaseSearchParamsWithoutQueryWithDefaults instantiates a new BaseSearchParamsWithoutQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseSearchParamsWithoutQueryWithDefaults() *BaseSearchParamsWithoutQuery {
	this := &BaseSearchParamsWithoutQuery{}
	var similarQuery string = ""
	this.SimilarQuery = &similarQuery
	var filters string = ""
	this.Filters = &filters
	var sumOrFiltersScores bool = false
	this.SumOrFiltersScores = &sumOrFiltersScores
	var maxValuesPerFacet int32 = 100
	this.MaxValuesPerFacet = &maxValuesPerFacet
	var facetingAfterDistinct bool = false
	this.FacetingAfterDistinct = &facetingAfterDistinct
	var sortFacetValuesBy string = "count"
	this.SortFacetValuesBy = &sortFacetValuesBy
	var page int32 = 0
	this.Page = &page
	var aroundLatLng string = ""
	this.AroundLatLng = &aroundLatLng
	var aroundLatLngViaIP bool = false
	this.AroundLatLngViaIP = &aroundLatLngViaIP
	var aroundPrecision int32 = 10
	this.AroundPrecision = &aroundPrecision
	var personalizationImpact int32 = 100
	this.PersonalizationImpact = &personalizationImpact
	var getRankingInfo bool = false
	this.GetRankingInfo = &getRankingInfo
	var clickAnalytics bool = false
	this.ClickAnalytics = &clickAnalytics
	var analytics bool = true
	this.Analytics = &analytics
	var percentileComputation bool = true
	this.PercentileComputation = &percentileComputation
	var enableABTest bool = true
	this.EnableABTest = &enableABTest
	var enableReRanking bool = true
	this.EnableReRanking = &enableReRanking
	return this
}

// GetSimilarQuery returns the SimilarQuery field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSimilarQuery() string {
	if o == nil || o.SimilarQuery == nil {
		var ret string
		return ret
	}
	return *o.SimilarQuery
}

// GetSimilarQueryOk returns a tuple with the SimilarQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSimilarQueryOk() (*string, bool) {
	if o == nil || o.SimilarQuery == nil {
		return nil, false
	}
	return o.SimilarQuery, true
}

// HasSimilarQuery returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSimilarQuery() bool {
	if o != nil && o.SimilarQuery != nil {
		return true
	}

	return false
}

// SetSimilarQuery gets a reference to the given string and assigns it to the SimilarQuery field.
func (o *BaseSearchParamsWithoutQuery) SetSimilarQuery(v string) {
	o.SimilarQuery = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *BaseSearchParamsWithoutQuery) SetFilters(v string) {
	o.Filters = &v
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *BaseSearchParamsWithoutQuery) SetFacetFilters(v FacetFilters) {
	o.FacetFilters = &v
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *BaseSearchParamsWithoutQuery) SetOptionalFilters(v OptionalFilters) {
	o.OptionalFilters = &v
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *BaseSearchParamsWithoutQuery) SetNumericFilters(v NumericFilters) {
	o.NumericFilters = &v
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetTagFilters() TagFilters {
	if o == nil || o.TagFilters == nil {
		var ret TagFilters
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetTagFiltersOk() (*TagFilters, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given TagFilters and assigns it to the TagFilters field.
func (o *BaseSearchParamsWithoutQuery) SetTagFilters(v TagFilters) {
	o.TagFilters = &v
}

// GetSumOrFiltersScores returns the SumOrFiltersScores field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSumOrFiltersScores() bool {
	if o == nil || o.SumOrFiltersScores == nil {
		var ret bool
		return ret
	}
	return *o.SumOrFiltersScores
}

// GetSumOrFiltersScoresOk returns a tuple with the SumOrFiltersScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSumOrFiltersScoresOk() (*bool, bool) {
	if o == nil || o.SumOrFiltersScores == nil {
		return nil, false
	}
	return o.SumOrFiltersScores, true
}

// HasSumOrFiltersScores returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSumOrFiltersScores() bool {
	if o != nil && o.SumOrFiltersScores != nil {
		return true
	}

	return false
}

// SetSumOrFiltersScores gets a reference to the given bool and assigns it to the SumOrFiltersScores field.
func (o *BaseSearchParamsWithoutQuery) SetSumOrFiltersScores(v bool) {
	o.SumOrFiltersScores = &v
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacets() []string {
	if o == nil || o.Facets == nil {
		var ret []string
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetsOk() ([]string, bool) {
	if o == nil || o.Facets == nil {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacets() bool {
	if o != nil && o.Facets != nil {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []string and assigns it to the Facets field.
func (o *BaseSearchParamsWithoutQuery) SetFacets(v []string) {
	o.Facets = v
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *BaseSearchParamsWithoutQuery) SetMaxValuesPerFacet(v int32) {
	o.MaxValuesPerFacet = &v
}

// GetFacetingAfterDistinct returns the FacetingAfterDistinct field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacetingAfterDistinct() bool {
	if o == nil || o.FacetingAfterDistinct == nil {
		var ret bool
		return ret
	}
	return *o.FacetingAfterDistinct
}

// GetFacetingAfterDistinctOk returns a tuple with the FacetingAfterDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetingAfterDistinctOk() (*bool, bool) {
	if o == nil || o.FacetingAfterDistinct == nil {
		return nil, false
	}
	return o.FacetingAfterDistinct, true
}

// HasFacetingAfterDistinct returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacetingAfterDistinct() bool {
	if o != nil && o.FacetingAfterDistinct != nil {
		return true
	}

	return false
}

// SetFacetingAfterDistinct gets a reference to the given bool and assigns it to the FacetingAfterDistinct field.
func (o *BaseSearchParamsWithoutQuery) SetFacetingAfterDistinct(v bool) {
	o.FacetingAfterDistinct = &v
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *BaseSearchParamsWithoutQuery) SetSortFacetValuesBy(v string) {
	o.SortFacetValuesBy = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *BaseSearchParamsWithoutQuery) SetPage(v int32) {
	o.Page = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *BaseSearchParamsWithoutQuery) SetOffset(v int32) {
	o.Offset = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *BaseSearchParamsWithoutQuery) SetLength(v int32) {
	o.Length = &v
}

// GetAroundLatLng returns the AroundLatLng field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLng() string {
	if o == nil || o.AroundLatLng == nil {
		var ret string
		return ret
	}
	return *o.AroundLatLng
}

// GetAroundLatLngOk returns a tuple with the AroundLatLng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngOk() (*string, bool) {
	if o == nil || o.AroundLatLng == nil {
		return nil, false
	}
	return o.AroundLatLng, true
}

// HasAroundLatLng returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundLatLng() bool {
	if o != nil && o.AroundLatLng != nil {
		return true
	}

	return false
}

// SetAroundLatLng gets a reference to the given string and assigns it to the AroundLatLng field.
func (o *BaseSearchParamsWithoutQuery) SetAroundLatLng(v string) {
	o.AroundLatLng = &v
}

// GetAroundLatLngViaIP returns the AroundLatLngViaIP field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngViaIP() bool {
	if o == nil || o.AroundLatLngViaIP == nil {
		var ret bool
		return ret
	}
	return *o.AroundLatLngViaIP
}

// GetAroundLatLngViaIPOk returns a tuple with the AroundLatLngViaIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngViaIPOk() (*bool, bool) {
	if o == nil || o.AroundLatLngViaIP == nil {
		return nil, false
	}
	return o.AroundLatLngViaIP, true
}

// HasAroundLatLngViaIP returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundLatLngViaIP() bool {
	if o != nil && o.AroundLatLngViaIP != nil {
		return true
	}

	return false
}

// SetAroundLatLngViaIP gets a reference to the given bool and assigns it to the AroundLatLngViaIP field.
func (o *BaseSearchParamsWithoutQuery) SetAroundLatLngViaIP(v bool) {
	o.AroundLatLngViaIP = &v
}

// GetAroundRadius returns the AroundRadius field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundRadius() AroundRadius {
	if o == nil || o.AroundRadius == nil {
		var ret AroundRadius
		return ret
	}
	return *o.AroundRadius
}

// GetAroundRadiusOk returns a tuple with the AroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundRadiusOk() (*AroundRadius, bool) {
	if o == nil || o.AroundRadius == nil {
		return nil, false
	}
	return o.AroundRadius, true
}

// HasAroundRadius returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundRadius() bool {
	if o != nil && o.AroundRadius != nil {
		return true
	}

	return false
}

// SetAroundRadius gets a reference to the given AroundRadius and assigns it to the AroundRadius field.
func (o *BaseSearchParamsWithoutQuery) SetAroundRadius(v AroundRadius) {
	o.AroundRadius = &v
}

// GetAroundPrecision returns the AroundPrecision field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundPrecision() int32 {
	if o == nil || o.AroundPrecision == nil {
		var ret int32
		return ret
	}
	return *o.AroundPrecision
}

// GetAroundPrecisionOk returns a tuple with the AroundPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundPrecisionOk() (*int32, bool) {
	if o == nil || o.AroundPrecision == nil {
		return nil, false
	}
	return o.AroundPrecision, true
}

// HasAroundPrecision returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundPrecision() bool {
	if o != nil && o.AroundPrecision != nil {
		return true
	}

	return false
}

// SetAroundPrecision gets a reference to the given int32 and assigns it to the AroundPrecision field.
func (o *BaseSearchParamsWithoutQuery) SetAroundPrecision(v int32) {
	o.AroundPrecision = &v
}

// GetMinimumAroundRadius returns the MinimumAroundRadius field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetMinimumAroundRadius() int32 {
	if o == nil || o.MinimumAroundRadius == nil {
		var ret int32
		return ret
	}
	return *o.MinimumAroundRadius
}

// GetMinimumAroundRadiusOk returns a tuple with the MinimumAroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetMinimumAroundRadiusOk() (*int32, bool) {
	if o == nil || o.MinimumAroundRadius == nil {
		return nil, false
	}
	return o.MinimumAroundRadius, true
}

// HasMinimumAroundRadius returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasMinimumAroundRadius() bool {
	if o != nil && o.MinimumAroundRadius != nil {
		return true
	}

	return false
}

// SetMinimumAroundRadius gets a reference to the given int32 and assigns it to the MinimumAroundRadius field.
func (o *BaseSearchParamsWithoutQuery) SetMinimumAroundRadius(v int32) {
	o.MinimumAroundRadius = &v
}

// GetInsideBoundingBox returns the InsideBoundingBox field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetInsideBoundingBox() []float64 {
	if o == nil || o.InsideBoundingBox == nil {
		var ret []float64
		return ret
	}
	return o.InsideBoundingBox
}

// GetInsideBoundingBoxOk returns a tuple with the InsideBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetInsideBoundingBoxOk() ([]float64, bool) {
	if o == nil || o.InsideBoundingBox == nil {
		return nil, false
	}
	return o.InsideBoundingBox, true
}

// HasInsideBoundingBox returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasInsideBoundingBox() bool {
	if o != nil && o.InsideBoundingBox != nil {
		return true
	}

	return false
}

// SetInsideBoundingBox gets a reference to the given []float64 and assigns it to the InsideBoundingBox field.
func (o *BaseSearchParamsWithoutQuery) SetInsideBoundingBox(v []float64) {
	o.InsideBoundingBox = v
}

// GetInsidePolygon returns the InsidePolygon field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetInsidePolygon() []float64 {
	if o == nil || o.InsidePolygon == nil {
		var ret []float64
		return ret
	}
	return o.InsidePolygon
}

// GetInsidePolygonOk returns a tuple with the InsidePolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetInsidePolygonOk() ([]float64, bool) {
	if o == nil || o.InsidePolygon == nil {
		return nil, false
	}
	return o.InsidePolygon, true
}

// HasInsidePolygon returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasInsidePolygon() bool {
	if o != nil && o.InsidePolygon != nil {
		return true
	}

	return false
}

// SetInsidePolygon gets a reference to the given []float64 and assigns it to the InsidePolygon field.
func (o *BaseSearchParamsWithoutQuery) SetInsidePolygon(v []float64) {
	o.InsidePolygon = v
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetNaturalLanguages() []string {
	if o == nil || o.NaturalLanguages == nil {
		var ret []string
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetNaturalLanguagesOk() ([]string, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []string and assigns it to the NaturalLanguages field.
func (o *BaseSearchParamsWithoutQuery) SetNaturalLanguages(v []string) {
	o.NaturalLanguages = v
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *BaseSearchParamsWithoutQuery) SetRuleContexts(v []string) {
	o.RuleContexts = v
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *BaseSearchParamsWithoutQuery) SetPersonalizationImpact(v int32) {
	o.PersonalizationImpact = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetUserToken() string {
	if o == nil || o.UserToken == nil {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetUserTokenOk() (*string, bool) {
	if o == nil || o.UserToken == nil {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasUserToken() bool {
	if o != nil && o.UserToken != nil {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *BaseSearchParamsWithoutQuery) SetUserToken(v string) {
	o.UserToken = &v
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *BaseSearchParamsWithoutQuery) SetGetRankingInfo(v bool) {
	o.GetRankingInfo = &v
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *BaseSearchParamsWithoutQuery) SetClickAnalytics(v bool) {
	o.ClickAnalytics = &v
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *BaseSearchParamsWithoutQuery) SetAnalytics(v bool) {
	o.Analytics = &v
}

// GetAnalyticsTags returns the AnalyticsTags field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsTags() []string {
	if o == nil || o.AnalyticsTags == nil {
		var ret []string
		return ret
	}
	return o.AnalyticsTags
}

// GetAnalyticsTagsOk returns a tuple with the AnalyticsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsTagsOk() ([]string, bool) {
	if o == nil || o.AnalyticsTags == nil {
		return nil, false
	}
	return o.AnalyticsTags, true
}

// HasAnalyticsTags returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAnalyticsTags() bool {
	if o != nil && o.AnalyticsTags != nil {
		return true
	}

	return false
}

// SetAnalyticsTags gets a reference to the given []string and assigns it to the AnalyticsTags field.
func (o *BaseSearchParamsWithoutQuery) SetAnalyticsTags(v []string) {
	o.AnalyticsTags = v
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *BaseSearchParamsWithoutQuery) SetPercentileComputation(v bool) {
	o.PercentileComputation = &v
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *BaseSearchParamsWithoutQuery) SetEnableABTest(v bool) {
	o.EnableABTest = &v
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *BaseSearchParamsWithoutQuery) SetEnableReRanking(v bool) {
	o.EnableReRanking = &v
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseSearchParamsWithoutQuery) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter.Get() == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter.Get()
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseSearchParamsWithoutQuery) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter.Get(), o.ReRankingApplyFilter.IsSet()
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter.IsSet() {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given NullableReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *BaseSearchParamsWithoutQuery) SetReRankingApplyFilter(v ReRankingApplyFilter) {
	o.ReRankingApplyFilter.Set(&v)
}

// SetReRankingApplyFilterNil sets the value for ReRankingApplyFilter to be an explicit nil
func (o *BaseSearchParamsWithoutQuery) SetReRankingApplyFilterNil() {
	o.ReRankingApplyFilter.Set(nil)
}

// UnsetReRankingApplyFilter ensures that no value is present for ReRankingApplyFilter, not even an explicit nil
func (o *BaseSearchParamsWithoutQuery) UnsetReRankingApplyFilter() {
	o.ReRankingApplyFilter.Unset()
}

func (o BaseSearchParamsWithoutQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.SimilarQuery != nil {
		toSerialize["similarQuery"] = o.SimilarQuery
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.TagFilters != nil {
		toSerialize["tagFilters"] = o.TagFilters
	}
	if o.SumOrFiltersScores != nil {
		toSerialize["sumOrFiltersScores"] = o.SumOrFiltersScores
	}
	if o.Facets != nil {
		toSerialize["facets"] = o.Facets
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.FacetingAfterDistinct != nil {
		toSerialize["facetingAfterDistinct"] = o.FacetingAfterDistinct
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.AroundLatLng != nil {
		toSerialize["aroundLatLng"] = o.AroundLatLng
	}
	if o.AroundLatLngViaIP != nil {
		toSerialize["aroundLatLngViaIP"] = o.AroundLatLngViaIP
	}
	if o.AroundRadius != nil {
		toSerialize["aroundRadius"] = o.AroundRadius
	}
	if o.AroundPrecision != nil {
		toSerialize["aroundPrecision"] = o.AroundPrecision
	}
	if o.MinimumAroundRadius != nil {
		toSerialize["minimumAroundRadius"] = o.MinimumAroundRadius
	}
	if o.InsideBoundingBox != nil {
		toSerialize["insideBoundingBox"] = o.InsideBoundingBox
	}
	if o.InsidePolygon != nil {
		toSerialize["insidePolygon"] = o.InsidePolygon
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if o.UserToken != nil {
		toSerialize["userToken"] = o.UserToken
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AnalyticsTags != nil {
		toSerialize["analyticsTags"] = o.AnalyticsTags
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter.IsSet() {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter.Get()
	}
	return json.Marshal(toSerialize)
}

func (o BaseSearchParamsWithoutQuery) String() string {
	out := ""
	out += fmt.Sprintf("  similarQuery=%v\n", o.SimilarQuery)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  tagFilters=%v\n", o.TagFilters)
	out += fmt.Sprintf("  sumOrFiltersScores=%v\n", o.SumOrFiltersScores)
	out += fmt.Sprintf("  facets=%v\n", o.Facets)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  facetingAfterDistinct=%v\n", o.FacetingAfterDistinct)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  offset=%v\n", o.Offset)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  aroundLatLng=%v\n", o.AroundLatLng)
	out += fmt.Sprintf("  aroundLatLngViaIP=%v\n", o.AroundLatLngViaIP)
	out += fmt.Sprintf("  aroundRadius=%v\n", o.AroundRadius)
	out += fmt.Sprintf("  aroundPrecision=%v\n", o.AroundPrecision)
	out += fmt.Sprintf("  minimumAroundRadius=%v\n", o.MinimumAroundRadius)
	out += fmt.Sprintf("  insideBoundingBox=%v\n", o.InsideBoundingBox)
	out += fmt.Sprintf("  insidePolygon=%v\n", o.InsidePolygon)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  analyticsTags=%v\n", o.AnalyticsTags)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	return fmt.Sprintf("BaseSearchParamsWithoutQuery {\n%s}", out)
}

type NullableBaseSearchParamsWithoutQuery struct {
	value *BaseSearchParamsWithoutQuery
	isSet bool
}

func (v NullableBaseSearchParamsWithoutQuery) Get() *BaseSearchParamsWithoutQuery {
	return v.value
}

func (v *NullableBaseSearchParamsWithoutQuery) Set(val *BaseSearchParamsWithoutQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseSearchParamsWithoutQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseSearchParamsWithoutQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseSearchParamsWithoutQuery(val *BaseSearchParamsWithoutQuery) *NullableBaseSearchParamsWithoutQuery {
	return &NullableBaseSearchParamsWithoutQuery{value: val, isSet: true}
}

func (v NullableBaseSearchParamsWithoutQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseSearchParamsWithoutQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
