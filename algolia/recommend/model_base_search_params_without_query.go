// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package recommend

import (
	"encoding/json"
	"fmt"
)

// BaseSearchParamsWithoutQuery struct for BaseSearchParamsWithoutQuery.
type BaseSearchParamsWithoutQuery struct {
	// Keywords to be used instead of the search query to conduct a more broader search.  Using the `similarQuery` parameter changes other settings:  - `queryType` is set to `prefixNone`. - `removeStopWords` is set to true. - `words` is set as the first ranking criterion. - All remaining words are treated as `optionalWords`.  Since the `similarQuery` is supposed to do a broad search, they usually return many results. Combine it with `filters` to narrow down the list of results.
	SimilarQuery *string `json:"similarQuery,omitempty"`
	// Filter the search so that only records with matching values are included in the results.  These filters are supported:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
	Filters         *string          `json:"filters,omitempty"`
	FacetFilters    *FacetFilters    `json:"facetFilters,omitempty"`
	OptionalFilters *OptionalFilters `json:"optionalFilters,omitempty"`
	NumericFilters  *NumericFilters  `json:"numericFilters,omitempty"`
	TagFilters      *TagFilters      `json:"tagFilters,omitempty"`
	// Whether to sum all filter scores.  If true, all filter scores are summed. Otherwise, the maximum filter score is kept. For more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
	SumOrFiltersScores *bool `json:"sumOrFiltersScores,omitempty"`
	// Restricts a search to a subset of your searchable attributes.
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.  To retrieve all facets, use the wildcard character `*`. For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
	Facets []string `json:"facets,omitempty"`
	// Whether faceting should be applied after deduplication with `distinct`.  This leads to accurate facet counts when using faceting in combination with `distinct`. It's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting, as `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.
	FacetingAfterDistinct *bool `json:"facetingAfterDistinct,omitempty"`
	// Page of search results to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Position of the first hit to retrieve.
	Offset *int32 `json:"offset,omitempty"`
	// Number of hits to retrieve (used in combination with `offset`).
	Length *int32 `json:"length,omitempty"`
	// Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.  Only records included within circle around this central location are included in the results. The radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings. This parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.
	AroundLatLng *string `json:"aroundLatLng,omitempty"`
	// Whether to obtain the coordinates from the request's IP address.
	AroundLatLngViaIP *bool            `json:"aroundLatLngViaIP,omitempty"`
	AroundRadius      *AroundRadius    `json:"aroundRadius,omitempty"`
	AroundPrecision   *AroundPrecision `json:"aroundPrecision,omitempty"`
	// Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.
	MinimumAroundRadius *int32 `json:"minimumAroundRadius,omitempty"`
	// Coordinates for a rectangular area in which to search.  Each bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair: `[p1 lat, p1 long, p2 lat, p2 long]`. Provide multiple bounding boxes as nested arrays. For more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).
	InsideBoundingBox [][]float64 `json:"insideBoundingBox,omitempty"`
	// Coordinates of a polygon in which to search.  Polygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude. Provide multiple polygons as nested arrays. For more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas). This parameter is ignored, if you also specify `insideBoundingBox`.
	InsidePolygon [][]float64 `json:"insidePolygon,omitempty"`
	// ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):  - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
	NaturalLanguages []string `json:"naturalLanguages,omitempty"`
	// Assigns a rule context to the search query.  [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// Impact that Personalization should have on this search.  The higher this value is, the more Personalization determines the ranking compared to other factors. For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
	UserToken *string `json:"userToken,omitempty"`
	// Whether the search response should include detailed ranking information.
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// Whether to take into account an index's synonyms for this search.
	Synonyms *bool `json:"synonyms,omitempty"`
	// Whether to include a `queryID` attribute in the response.  The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Whether this search will be included in Analytics.
	Analytics *bool `json:"analytics,omitempty"`
	// Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
	AnalyticsTags []string `json:"analyticsTags,omitempty"`
	// Whether to include this search when calculating processing-time percentiles.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Whether to enable A/B testing for this search.
	EnableABTest *bool `json:"enableABTest,omitempty"`
}

type BaseSearchParamsWithoutQueryOption func(f *BaseSearchParamsWithoutQuery)

func WithBaseSearchParamsWithoutQuerySimilarQuery(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.SimilarQuery = &val
	}
}

func WithBaseSearchParamsWithoutQueryFilters(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Filters = &val
	}
}

func WithBaseSearchParamsWithoutQueryFacetFilters(val FacetFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.FacetFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryOptionalFilters(val OptionalFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.OptionalFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryNumericFilters(val NumericFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.NumericFilters = &val
	}
}

func WithBaseSearchParamsWithoutQueryTagFilters(val TagFilters) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.TagFilters = &val
	}
}

func WithBaseSearchParamsWithoutQuerySumOrFiltersScores(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.SumOrFiltersScores = &val
	}
}

func WithBaseSearchParamsWithoutQueryRestrictSearchableAttributes(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.RestrictSearchableAttributes = val
	}
}

func WithBaseSearchParamsWithoutQueryFacets(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Facets = val
	}
}

func WithBaseSearchParamsWithoutQueryFacetingAfterDistinct(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.FacetingAfterDistinct = &val
	}
}

func WithBaseSearchParamsWithoutQueryPage(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Page = &val
	}
}

func WithBaseSearchParamsWithoutQueryOffset(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Offset = &val
	}
}

func WithBaseSearchParamsWithoutQueryLength(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Length = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundLatLng(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundLatLng = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundLatLngViaIP(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundLatLngViaIP = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundRadius(val AroundRadius) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundRadius = &val
	}
}

func WithBaseSearchParamsWithoutQueryAroundPrecision(val AroundPrecision) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AroundPrecision = &val
	}
}

func WithBaseSearchParamsWithoutQueryMinimumAroundRadius(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.MinimumAroundRadius = &val
	}
}

func WithBaseSearchParamsWithoutQueryInsideBoundingBox(val [][]float64) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.InsideBoundingBox = val
	}
}

func WithBaseSearchParamsWithoutQueryInsidePolygon(val [][]float64) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.InsidePolygon = val
	}
}

func WithBaseSearchParamsWithoutQueryNaturalLanguages(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.NaturalLanguages = val
	}
}

func WithBaseSearchParamsWithoutQueryRuleContexts(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.RuleContexts = val
	}
}

func WithBaseSearchParamsWithoutQueryPersonalizationImpact(val int32) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.PersonalizationImpact = &val
	}
}

func WithBaseSearchParamsWithoutQueryUserToken(val string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.UserToken = &val
	}
}

func WithBaseSearchParamsWithoutQueryGetRankingInfo(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.GetRankingInfo = &val
	}
}

func WithBaseSearchParamsWithoutQuerySynonyms(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Synonyms = &val
	}
}

func WithBaseSearchParamsWithoutQueryClickAnalytics(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.ClickAnalytics = &val
	}
}

func WithBaseSearchParamsWithoutQueryAnalytics(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.Analytics = &val
	}
}

func WithBaseSearchParamsWithoutQueryAnalyticsTags(val []string) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.AnalyticsTags = val
	}
}

func WithBaseSearchParamsWithoutQueryPercentileComputation(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.PercentileComputation = &val
	}
}

func WithBaseSearchParamsWithoutQueryEnableABTest(val bool) BaseSearchParamsWithoutQueryOption {
	return func(f *BaseSearchParamsWithoutQuery) {
		f.EnableABTest = &val
	}
}

// NewBaseSearchParamsWithoutQuery instantiates a new BaseSearchParamsWithoutQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewBaseSearchParamsWithoutQuery(opts ...BaseSearchParamsWithoutQueryOption) *BaseSearchParamsWithoutQuery {
	this := &BaseSearchParamsWithoutQuery{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyBaseSearchParamsWithoutQuery return a pointer to an empty BaseSearchParamsWithoutQuery object.
func NewEmptyBaseSearchParamsWithoutQuery() *BaseSearchParamsWithoutQuery {
	return &BaseSearchParamsWithoutQuery{}
}

// GetSimilarQuery returns the SimilarQuery field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSimilarQuery() string {
	if o == nil || o.SimilarQuery == nil {
		var ret string
		return ret
	}
	return *o.SimilarQuery
}

// GetSimilarQueryOk returns a tuple with the SimilarQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSimilarQueryOk() (*string, bool) {
	if o == nil || o.SimilarQuery == nil {
		return nil, false
	}
	return o.SimilarQuery, true
}

// HasSimilarQuery returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSimilarQuery() bool {
	if o != nil && o.SimilarQuery != nil {
		return true
	}

	return false
}

// SetSimilarQuery gets a reference to the given string and assigns it to the SimilarQuery field.
func (o *BaseSearchParamsWithoutQuery) SetSimilarQuery(v string) *BaseSearchParamsWithoutQuery {
	o.SimilarQuery = &v
	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *BaseSearchParamsWithoutQuery) SetFilters(v string) *BaseSearchParamsWithoutQuery {
	o.Filters = &v
	return o
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *BaseSearchParamsWithoutQuery) SetFacetFilters(v *FacetFilters) *BaseSearchParamsWithoutQuery {
	o.FacetFilters = v
	return o
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *BaseSearchParamsWithoutQuery) SetOptionalFilters(v *OptionalFilters) *BaseSearchParamsWithoutQuery {
	o.OptionalFilters = v
	return o
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *BaseSearchParamsWithoutQuery) SetNumericFilters(v *NumericFilters) *BaseSearchParamsWithoutQuery {
	o.NumericFilters = v
	return o
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetTagFilters() TagFilters {
	if o == nil || o.TagFilters == nil {
		var ret TagFilters
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetTagFiltersOk() (*TagFilters, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given TagFilters and assigns it to the TagFilters field.
func (o *BaseSearchParamsWithoutQuery) SetTagFilters(v *TagFilters) *BaseSearchParamsWithoutQuery {
	o.TagFilters = v
	return o
}

// GetSumOrFiltersScores returns the SumOrFiltersScores field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSumOrFiltersScores() bool {
	if o == nil || o.SumOrFiltersScores == nil {
		var ret bool
		return ret
	}
	return *o.SumOrFiltersScores
}

// GetSumOrFiltersScoresOk returns a tuple with the SumOrFiltersScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSumOrFiltersScoresOk() (*bool, bool) {
	if o == nil || o.SumOrFiltersScores == nil {
		return nil, false
	}
	return o.SumOrFiltersScores, true
}

// HasSumOrFiltersScores returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSumOrFiltersScores() bool {
	if o != nil && o.SumOrFiltersScores != nil {
		return true
	}

	return false
}

// SetSumOrFiltersScores gets a reference to the given bool and assigns it to the SumOrFiltersScores field.
func (o *BaseSearchParamsWithoutQuery) SetSumOrFiltersScores(v bool) *BaseSearchParamsWithoutQuery {
	o.SumOrFiltersScores = &v
	return o
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *BaseSearchParamsWithoutQuery) SetRestrictSearchableAttributes(v []string) *BaseSearchParamsWithoutQuery {
	o.RestrictSearchableAttributes = v
	return o
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacets() []string {
	if o == nil || o.Facets == nil {
		var ret []string
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetsOk() ([]string, bool) {
	if o == nil || o.Facets == nil {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacets() bool {
	if o != nil && o.Facets != nil {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []string and assigns it to the Facets field.
func (o *BaseSearchParamsWithoutQuery) SetFacets(v []string) *BaseSearchParamsWithoutQuery {
	o.Facets = v
	return o
}

// GetFacetingAfterDistinct returns the FacetingAfterDistinct field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetFacetingAfterDistinct() bool {
	if o == nil || o.FacetingAfterDistinct == nil {
		var ret bool
		return ret
	}
	return *o.FacetingAfterDistinct
}

// GetFacetingAfterDistinctOk returns a tuple with the FacetingAfterDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetFacetingAfterDistinctOk() (*bool, bool) {
	if o == nil || o.FacetingAfterDistinct == nil {
		return nil, false
	}
	return o.FacetingAfterDistinct, true
}

// HasFacetingAfterDistinct returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasFacetingAfterDistinct() bool {
	if o != nil && o.FacetingAfterDistinct != nil {
		return true
	}

	return false
}

// SetFacetingAfterDistinct gets a reference to the given bool and assigns it to the FacetingAfterDistinct field.
func (o *BaseSearchParamsWithoutQuery) SetFacetingAfterDistinct(v bool) *BaseSearchParamsWithoutQuery {
	o.FacetingAfterDistinct = &v
	return o
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *BaseSearchParamsWithoutQuery) SetPage(v int32) *BaseSearchParamsWithoutQuery {
	o.Page = &v
	return o
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *BaseSearchParamsWithoutQuery) SetOffset(v int32) *BaseSearchParamsWithoutQuery {
	o.Offset = &v
	return o
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *BaseSearchParamsWithoutQuery) SetLength(v int32) *BaseSearchParamsWithoutQuery {
	o.Length = &v
	return o
}

// GetAroundLatLng returns the AroundLatLng field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLng() string {
	if o == nil || o.AroundLatLng == nil {
		var ret string
		return ret
	}
	return *o.AroundLatLng
}

// GetAroundLatLngOk returns a tuple with the AroundLatLng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngOk() (*string, bool) {
	if o == nil || o.AroundLatLng == nil {
		return nil, false
	}
	return o.AroundLatLng, true
}

// HasAroundLatLng returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundLatLng() bool {
	if o != nil && o.AroundLatLng != nil {
		return true
	}

	return false
}

// SetAroundLatLng gets a reference to the given string and assigns it to the AroundLatLng field.
func (o *BaseSearchParamsWithoutQuery) SetAroundLatLng(v string) *BaseSearchParamsWithoutQuery {
	o.AroundLatLng = &v
	return o
}

// GetAroundLatLngViaIP returns the AroundLatLngViaIP field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngViaIP() bool {
	if o == nil || o.AroundLatLngViaIP == nil {
		var ret bool
		return ret
	}
	return *o.AroundLatLngViaIP
}

// GetAroundLatLngViaIPOk returns a tuple with the AroundLatLngViaIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundLatLngViaIPOk() (*bool, bool) {
	if o == nil || o.AroundLatLngViaIP == nil {
		return nil, false
	}
	return o.AroundLatLngViaIP, true
}

// HasAroundLatLngViaIP returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundLatLngViaIP() bool {
	if o != nil && o.AroundLatLngViaIP != nil {
		return true
	}

	return false
}

// SetAroundLatLngViaIP gets a reference to the given bool and assigns it to the AroundLatLngViaIP field.
func (o *BaseSearchParamsWithoutQuery) SetAroundLatLngViaIP(v bool) *BaseSearchParamsWithoutQuery {
	o.AroundLatLngViaIP = &v
	return o
}

// GetAroundRadius returns the AroundRadius field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundRadius() AroundRadius {
	if o == nil || o.AroundRadius == nil {
		var ret AroundRadius
		return ret
	}
	return *o.AroundRadius
}

// GetAroundRadiusOk returns a tuple with the AroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundRadiusOk() (*AroundRadius, bool) {
	if o == nil || o.AroundRadius == nil {
		return nil, false
	}
	return o.AroundRadius, true
}

// HasAroundRadius returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundRadius() bool {
	if o != nil && o.AroundRadius != nil {
		return true
	}

	return false
}

// SetAroundRadius gets a reference to the given AroundRadius and assigns it to the AroundRadius field.
func (o *BaseSearchParamsWithoutQuery) SetAroundRadius(v *AroundRadius) *BaseSearchParamsWithoutQuery {
	o.AroundRadius = v
	return o
}

// GetAroundPrecision returns the AroundPrecision field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAroundPrecision() AroundPrecision {
	if o == nil || o.AroundPrecision == nil {
		var ret AroundPrecision
		return ret
	}
	return *o.AroundPrecision
}

// GetAroundPrecisionOk returns a tuple with the AroundPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAroundPrecisionOk() (*AroundPrecision, bool) {
	if o == nil || o.AroundPrecision == nil {
		return nil, false
	}
	return o.AroundPrecision, true
}

// HasAroundPrecision returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAroundPrecision() bool {
	if o != nil && o.AroundPrecision != nil {
		return true
	}

	return false
}

// SetAroundPrecision gets a reference to the given AroundPrecision and assigns it to the AroundPrecision field.
func (o *BaseSearchParamsWithoutQuery) SetAroundPrecision(v *AroundPrecision) *BaseSearchParamsWithoutQuery {
	o.AroundPrecision = v
	return o
}

// GetMinimumAroundRadius returns the MinimumAroundRadius field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetMinimumAroundRadius() int32 {
	if o == nil || o.MinimumAroundRadius == nil {
		var ret int32
		return ret
	}
	return *o.MinimumAroundRadius
}

// GetMinimumAroundRadiusOk returns a tuple with the MinimumAroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetMinimumAroundRadiusOk() (*int32, bool) {
	if o == nil || o.MinimumAroundRadius == nil {
		return nil, false
	}
	return o.MinimumAroundRadius, true
}

// HasMinimumAroundRadius returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasMinimumAroundRadius() bool {
	if o != nil && o.MinimumAroundRadius != nil {
		return true
	}

	return false
}

// SetMinimumAroundRadius gets a reference to the given int32 and assigns it to the MinimumAroundRadius field.
func (o *BaseSearchParamsWithoutQuery) SetMinimumAroundRadius(v int32) *BaseSearchParamsWithoutQuery {
	o.MinimumAroundRadius = &v
	return o
}

// GetInsideBoundingBox returns the InsideBoundingBox field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetInsideBoundingBox() [][]float64 {
	if o == nil || o.InsideBoundingBox == nil {
		var ret [][]float64
		return ret
	}
	return o.InsideBoundingBox
}

// GetInsideBoundingBoxOk returns a tuple with the InsideBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetInsideBoundingBoxOk() ([][]float64, bool) {
	if o == nil || o.InsideBoundingBox == nil {
		return nil, false
	}
	return o.InsideBoundingBox, true
}

// HasInsideBoundingBox returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasInsideBoundingBox() bool {
	if o != nil && o.InsideBoundingBox != nil {
		return true
	}

	return false
}

// SetInsideBoundingBox gets a reference to the given [][]float64 and assigns it to the InsideBoundingBox field.
func (o *BaseSearchParamsWithoutQuery) SetInsideBoundingBox(v [][]float64) *BaseSearchParamsWithoutQuery {
	o.InsideBoundingBox = v
	return o
}

// GetInsidePolygon returns the InsidePolygon field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetInsidePolygon() [][]float64 {
	if o == nil || o.InsidePolygon == nil {
		var ret [][]float64
		return ret
	}
	return o.InsidePolygon
}

// GetInsidePolygonOk returns a tuple with the InsidePolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetInsidePolygonOk() ([][]float64, bool) {
	if o == nil || o.InsidePolygon == nil {
		return nil, false
	}
	return o.InsidePolygon, true
}

// HasInsidePolygon returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasInsidePolygon() bool {
	if o != nil && o.InsidePolygon != nil {
		return true
	}

	return false
}

// SetInsidePolygon gets a reference to the given [][]float64 and assigns it to the InsidePolygon field.
func (o *BaseSearchParamsWithoutQuery) SetInsidePolygon(v [][]float64) *BaseSearchParamsWithoutQuery {
	o.InsidePolygon = v
	return o
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetNaturalLanguages() []string {
	if o == nil || o.NaturalLanguages == nil {
		var ret []string
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetNaturalLanguagesOk() ([]string, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []string and assigns it to the NaturalLanguages field.
func (o *BaseSearchParamsWithoutQuery) SetNaturalLanguages(v []string) *BaseSearchParamsWithoutQuery {
	o.NaturalLanguages = v
	return o
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *BaseSearchParamsWithoutQuery) SetRuleContexts(v []string) *BaseSearchParamsWithoutQuery {
	o.RuleContexts = v
	return o
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *BaseSearchParamsWithoutQuery) SetPersonalizationImpact(v int32) *BaseSearchParamsWithoutQuery {
	o.PersonalizationImpact = &v
	return o
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetUserToken() string {
	if o == nil || o.UserToken == nil {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetUserTokenOk() (*string, bool) {
	if o == nil || o.UserToken == nil {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasUserToken() bool {
	if o != nil && o.UserToken != nil {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *BaseSearchParamsWithoutQuery) SetUserToken(v string) *BaseSearchParamsWithoutQuery {
	o.UserToken = &v
	return o
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *BaseSearchParamsWithoutQuery) SetGetRankingInfo(v bool) *BaseSearchParamsWithoutQuery {
	o.GetRankingInfo = &v
	return o
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *BaseSearchParamsWithoutQuery) SetSynonyms(v bool) *BaseSearchParamsWithoutQuery {
	o.Synonyms = &v
	return o
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *BaseSearchParamsWithoutQuery) SetClickAnalytics(v bool) *BaseSearchParamsWithoutQuery {
	o.ClickAnalytics = &v
	return o
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *BaseSearchParamsWithoutQuery) SetAnalytics(v bool) *BaseSearchParamsWithoutQuery {
	o.Analytics = &v
	return o
}

// GetAnalyticsTags returns the AnalyticsTags field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsTags() []string {
	if o == nil || o.AnalyticsTags == nil {
		var ret []string
		return ret
	}
	return o.AnalyticsTags
}

// GetAnalyticsTagsOk returns a tuple with the AnalyticsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetAnalyticsTagsOk() ([]string, bool) {
	if o == nil || o.AnalyticsTags == nil {
		return nil, false
	}
	return o.AnalyticsTags, true
}

// HasAnalyticsTags returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasAnalyticsTags() bool {
	if o != nil && o.AnalyticsTags != nil {
		return true
	}

	return false
}

// SetAnalyticsTags gets a reference to the given []string and assigns it to the AnalyticsTags field.
func (o *BaseSearchParamsWithoutQuery) SetAnalyticsTags(v []string) *BaseSearchParamsWithoutQuery {
	o.AnalyticsTags = v
	return o
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *BaseSearchParamsWithoutQuery) SetPercentileComputation(v bool) *BaseSearchParamsWithoutQuery {
	o.PercentileComputation = &v
	return o
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *BaseSearchParamsWithoutQuery) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSearchParamsWithoutQuery) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *BaseSearchParamsWithoutQuery) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *BaseSearchParamsWithoutQuery) SetEnableABTest(v bool) *BaseSearchParamsWithoutQuery {
	o.EnableABTest = &v
	return o
}

func (o BaseSearchParamsWithoutQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.SimilarQuery != nil {
		toSerialize["similarQuery"] = o.SimilarQuery
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.TagFilters != nil {
		toSerialize["tagFilters"] = o.TagFilters
	}
	if o.SumOrFiltersScores != nil {
		toSerialize["sumOrFiltersScores"] = o.SumOrFiltersScores
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.Facets != nil {
		toSerialize["facets"] = o.Facets
	}
	if o.FacetingAfterDistinct != nil {
		toSerialize["facetingAfterDistinct"] = o.FacetingAfterDistinct
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.AroundLatLng != nil {
		toSerialize["aroundLatLng"] = o.AroundLatLng
	}
	if o.AroundLatLngViaIP != nil {
		toSerialize["aroundLatLngViaIP"] = o.AroundLatLngViaIP
	}
	if o.AroundRadius != nil {
		toSerialize["aroundRadius"] = o.AroundRadius
	}
	if o.AroundPrecision != nil {
		toSerialize["aroundPrecision"] = o.AroundPrecision
	}
	if o.MinimumAroundRadius != nil {
		toSerialize["minimumAroundRadius"] = o.MinimumAroundRadius
	}
	if o.InsideBoundingBox != nil {
		toSerialize["insideBoundingBox"] = o.InsideBoundingBox
	}
	if o.InsidePolygon != nil {
		toSerialize["insidePolygon"] = o.InsidePolygon
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if o.UserToken != nil {
		toSerialize["userToken"] = o.UserToken
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AnalyticsTags != nil {
		toSerialize["analyticsTags"] = o.AnalyticsTags
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal BaseSearchParamsWithoutQuery: %w", err)
	}

	return serialized, nil
}

func (o BaseSearchParamsWithoutQuery) String() string {
	out := ""
	out += fmt.Sprintf("  similarQuery=%v\n", o.SimilarQuery)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  tagFilters=%v\n", o.TagFilters)
	out += fmt.Sprintf("  sumOrFiltersScores=%v\n", o.SumOrFiltersScores)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  facets=%v\n", o.Facets)
	out += fmt.Sprintf("  facetingAfterDistinct=%v\n", o.FacetingAfterDistinct)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  offset=%v\n", o.Offset)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  aroundLatLng=%v\n", o.AroundLatLng)
	out += fmt.Sprintf("  aroundLatLngViaIP=%v\n", o.AroundLatLngViaIP)
	out += fmt.Sprintf("  aroundRadius=%v\n", o.AroundRadius)
	out += fmt.Sprintf("  aroundPrecision=%v\n", o.AroundPrecision)
	out += fmt.Sprintf("  minimumAroundRadius=%v\n", o.MinimumAroundRadius)
	out += fmt.Sprintf("  insideBoundingBox=%v\n", o.InsideBoundingBox)
	out += fmt.Sprintf("  insidePolygon=%v\n", o.InsidePolygon)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  analyticsTags=%v\n", o.AnalyticsTags)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	return fmt.Sprintf("BaseSearchParamsWithoutQuery {\n%s}", out)
}

type NullableBaseSearchParamsWithoutQuery struct {
	value *BaseSearchParamsWithoutQuery
	isSet bool
}

func (v NullableBaseSearchParamsWithoutQuery) Get() *BaseSearchParamsWithoutQuery {
	return v.value
}

func (v *NullableBaseSearchParamsWithoutQuery) Set(val *BaseSearchParamsWithoutQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseSearchParamsWithoutQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseSearchParamsWithoutQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseSearchParamsWithoutQuery(val *BaseSearchParamsWithoutQuery) *NullableBaseSearchParamsWithoutQuery {
	return &NullableBaseSearchParamsWithoutQuery{value: val, isSet: true}
}

func (v NullableBaseSearchParamsWithoutQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableBaseSearchParamsWithoutQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
