// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// RecommendationsRequest - struct for RecommendationsRequest.
type RecommendationsRequest struct {
	BoughtTogetherQuery    *BoughtTogetherQuery
	LookingSimilarQuery    *LookingSimilarQuery
	RecommendedForYouQuery *RecommendedForYouQuery
	RelatedQuery           *RelatedQuery
	TrendingFacetsQuery    *TrendingFacetsQuery
	TrendingItemsQuery     *TrendingItemsQuery
}

// BoughtTogetherQueryAsRecommendationsRequest is a convenience function that returns BoughtTogetherQuery wrapped in RecommendationsRequest.
func BoughtTogetherQueryAsRecommendationsRequest(v *BoughtTogetherQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		BoughtTogetherQuery: v,
	}
}

// RelatedQueryAsRecommendationsRequest is a convenience function that returns RelatedQuery wrapped in RecommendationsRequest.
func RelatedQueryAsRecommendationsRequest(v *RelatedQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		RelatedQuery: v,
	}
}

// TrendingItemsQueryAsRecommendationsRequest is a convenience function that returns TrendingItemsQuery wrapped in RecommendationsRequest.
func TrendingItemsQueryAsRecommendationsRequest(v *TrendingItemsQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		TrendingItemsQuery: v,
	}
}

// TrendingFacetsQueryAsRecommendationsRequest is a convenience function that returns TrendingFacetsQuery wrapped in RecommendationsRequest.
func TrendingFacetsQueryAsRecommendationsRequest(v *TrendingFacetsQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		TrendingFacetsQuery: v,
	}
}

// LookingSimilarQueryAsRecommendationsRequest is a convenience function that returns LookingSimilarQuery wrapped in RecommendationsRequest.
func LookingSimilarQueryAsRecommendationsRequest(v *LookingSimilarQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		LookingSimilarQuery: v,
	}
}

// RecommendedForYouQueryAsRecommendationsRequest is a convenience function that returns RecommendedForYouQuery wrapped in RecommendationsRequest.
func RecommendedForYouQueryAsRecommendationsRequest(v *RecommendedForYouQuery) *RecommendationsRequest {
	return &RecommendationsRequest{
		RecommendedForYouQuery: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *RecommendationsRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into BoughtTogetherQuery
	err = newStrictDecoder(data).Decode(&dst.BoughtTogetherQuery)
	if err == nil && validateStruct(dst.BoughtTogetherQuery) == nil {
		return nil // found the correct type
	} else {
		dst.BoughtTogetherQuery = nil
	}
	// try to unmarshal data into RelatedQuery
	err = newStrictDecoder(data).Decode(&dst.RelatedQuery)
	if err == nil && validateStruct(dst.RelatedQuery) == nil {
		return nil // found the correct type
	} else {
		dst.RelatedQuery = nil
	}
	// try to unmarshal data into TrendingItemsQuery
	err = newStrictDecoder(data).Decode(&dst.TrendingItemsQuery)
	if err == nil && validateStruct(dst.TrendingItemsQuery) == nil {
		return nil // found the correct type
	} else {
		dst.TrendingItemsQuery = nil
	}
	// try to unmarshal data into TrendingFacetsQuery
	err = newStrictDecoder(data).Decode(&dst.TrendingFacetsQuery)
	if err == nil && validateStruct(dst.TrendingFacetsQuery) == nil {
		return nil // found the correct type
	} else {
		dst.TrendingFacetsQuery = nil
	}
	// try to unmarshal data into LookingSimilarQuery
	err = newStrictDecoder(data).Decode(&dst.LookingSimilarQuery)
	if err == nil && validateStruct(dst.LookingSimilarQuery) == nil {
		return nil // found the correct type
	} else {
		dst.LookingSimilarQuery = nil
	}
	// try to unmarshal data into RecommendedForYouQuery
	err = newStrictDecoder(data).Decode(&dst.RecommendedForYouQuery)
	if err == nil && validateStruct(dst.RecommendedForYouQuery) == nil {
		return nil // found the correct type
	} else {
		dst.RecommendedForYouQuery = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(RecommendationsRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src RecommendationsRequest) MarshalJSON() ([]byte, error) {
	if src.BoughtTogetherQuery != nil {
		serialized, err := json.Marshal(&src.BoughtTogetherQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of BoughtTogetherQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	if src.LookingSimilarQuery != nil {
		serialized, err := json.Marshal(&src.LookingSimilarQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of LookingSimilarQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	if src.RecommendedForYouQuery != nil {
		serialized, err := json.Marshal(&src.RecommendedForYouQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of RecommendedForYouQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	if src.RelatedQuery != nil {
		serialized, err := json.Marshal(&src.RelatedQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of RelatedQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	if src.TrendingFacetsQuery != nil {
		serialized, err := json.Marshal(&src.TrendingFacetsQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of TrendingFacetsQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	if src.TrendingItemsQuery != nil {
		serialized, err := json.Marshal(&src.TrendingItemsQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of TrendingItemsQuery of RecommendationsRequest: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj RecommendationsRequest) GetActualInstance() any {
	if obj.BoughtTogetherQuery != nil {
		return *obj.BoughtTogetherQuery
	}

	if obj.LookingSimilarQuery != nil {
		return *obj.LookingSimilarQuery
	}

	if obj.RecommendedForYouQuery != nil {
		return *obj.RecommendedForYouQuery
	}

	if obj.RelatedQuery != nil {
		return *obj.RelatedQuery
	}

	if obj.TrendingFacetsQuery != nil {
		return *obj.TrendingFacetsQuery
	}

	if obj.TrendingItemsQuery != nil {
		return *obj.TrendingItemsQuery
	}

	// all schemas are nil
	return nil
}
