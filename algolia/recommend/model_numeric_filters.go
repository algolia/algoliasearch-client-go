// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// NumericFilters - Filter by numeric facets.  **Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**  You can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`. Comparisons are precise up to 3 decimals. You can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and upper boundaries. The same combination rules apply as for `facetFilters`.
type NumericFilters struct {
	ArrayOfNumericFilters *[]NumericFilters
	String                *string
}

// []NumericFiltersAsNumericFilters is a convenience function that returns []NumericFilters wrapped in NumericFilters.
func ArrayOfNumericFiltersAsNumericFilters(v []NumericFilters) *NumericFilters {
	return &NumericFilters{
		ArrayOfNumericFilters: &v,
	}
}

// stringAsNumericFilters is a convenience function that returns string wrapped in NumericFilters.
func StringAsNumericFilters(v string) *NumericFilters {
	return &NumericFilters{
		String: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *NumericFilters) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into ArrayOfNumericFilters
	err = newStrictDecoder(data).Decode(&dst.ArrayOfNumericFilters)
	if err == nil && validateStruct(dst.ArrayOfNumericFilters) == nil {
		jsonArrayOfNumericFilters, _ := json.Marshal(dst.ArrayOfNumericFilters)
		if string(jsonArrayOfNumericFilters) == "{}" { // empty struct
			dst.ArrayOfNumericFilters = nil
		} else {
			return nil
		}
	} else {
		dst.ArrayOfNumericFilters = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil && validateStruct(dst.String) == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(NumericFilters)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src NumericFilters) MarshalJSON() ([]byte, error) {
	if src.ArrayOfNumericFilters != nil {
		serialized, err := json.Marshal(&src.ArrayOfNumericFilters)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ArrayOfNumericFilters of NumericFilters: %w", err)
		}

		return serialized, nil
	}

	if src.String != nil {
		serialized, err := json.Marshal(&src.String)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of String of NumericFilters: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj NumericFilters) GetActualInstance() any {
	if obj.ArrayOfNumericFilters != nil {
		return *obj.ArrayOfNumericFilters
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableNumericFilters struct {
	value *NumericFilters
	isSet bool
}

func (v NullableNumericFilters) Get() *NumericFilters {
	return v.value
}

func (v *NullableNumericFilters) Set(val *NumericFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableNumericFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableNumericFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumericFilters(val *NumericFilters) *NullableNumericFilters {
	return &NullableNumericFilters{value: val, isSet: true}
}

func (v NullableNumericFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableNumericFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
