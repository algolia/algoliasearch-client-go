// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// ParamsConsequence Filter or boost recommendations matching a facet filter.
type ParamsConsequence struct {
	// Filter recommendations that match or don't match the same `facet:facet_value` combination as the viewed item.
	AutomaticFacetFilters []AutoFacetFilter `json:"automaticFacetFilters,omitempty"`
	// Filter expression to only include items that match the filter criteria in the response.  You can use these filter expressions:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
	Filters *string `json:"filters,omitempty"`
	// Filters to promote or demote records in the search results.  Optional filters work like facet filters, but they don't exclude records from the search results. Records that match the optional filter rank before records that don't match. Matches with higher weights (`<score=N>`) rank before matches with lower weights. If you're using a negative filter `facet:-value`, matching records rank after records that don't match.
	OptionalFilters []string `json:"optionalFilters,omitempty"`
}

type ParamsConsequenceOption func(f *ParamsConsequence)

func WithParamsConsequenceAutomaticFacetFilters(val []AutoFacetFilter) ParamsConsequenceOption {
	return func(f *ParamsConsequence) {
		f.AutomaticFacetFilters = val
	}
}

func WithParamsConsequenceFilters(val string) ParamsConsequenceOption {
	return func(f *ParamsConsequence) {
		f.Filters = &val
	}
}

func WithParamsConsequenceOptionalFilters(val []string) ParamsConsequenceOption {
	return func(f *ParamsConsequence) {
		f.OptionalFilters = val
	}
}

// NewParamsConsequence instantiates a new ParamsConsequence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewParamsConsequence(opts ...ParamsConsequenceOption) *ParamsConsequence {
	this := &ParamsConsequence{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyParamsConsequence return a pointer to an empty ParamsConsequence object.
func NewEmptyParamsConsequence() *ParamsConsequence {
	return &ParamsConsequence{}
}

// GetAutomaticFacetFilters returns the AutomaticFacetFilters field value if set, zero value otherwise.
func (o *ParamsConsequence) GetAutomaticFacetFilters() []AutoFacetFilter {
	if o == nil || o.AutomaticFacetFilters == nil {
		var ret []AutoFacetFilter
		return ret
	}
	return o.AutomaticFacetFilters
}

// GetAutomaticFacetFiltersOk returns a tuple with the AutomaticFacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsConsequence) GetAutomaticFacetFiltersOk() ([]AutoFacetFilter, bool) {
	if o == nil || o.AutomaticFacetFilters == nil {
		return nil, false
	}
	return o.AutomaticFacetFilters, true
}

// HasAutomaticFacetFilters returns a boolean if a field has been set.
func (o *ParamsConsequence) HasAutomaticFacetFilters() bool {
	if o != nil && o.AutomaticFacetFilters != nil {
		return true
	}

	return false
}

// SetAutomaticFacetFilters gets a reference to the given []AutoFacetFilter and assigns it to the AutomaticFacetFilters field.
func (o *ParamsConsequence) SetAutomaticFacetFilters(v []AutoFacetFilter) *ParamsConsequence {
	o.AutomaticFacetFilters = v
	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ParamsConsequence) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsConsequence) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ParamsConsequence) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *ParamsConsequence) SetFilters(v string) *ParamsConsequence {
	o.Filters = &v
	return o
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *ParamsConsequence) GetOptionalFilters() []string {
	if o == nil || o.OptionalFilters == nil {
		var ret []string
		return ret
	}
	return o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParamsConsequence) GetOptionalFiltersOk() ([]string, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *ParamsConsequence) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given []string and assigns it to the OptionalFilters field.
func (o *ParamsConsequence) SetOptionalFilters(v []string) *ParamsConsequence {
	o.OptionalFilters = v
	return o
}

func (o ParamsConsequence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.AutomaticFacetFilters != nil {
		toSerialize["automaticFacetFilters"] = o.AutomaticFacetFilters
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ParamsConsequence: %w", err)
	}

	return serialized, nil
}

func (o ParamsConsequence) String() string {
	out := ""
	out += fmt.Sprintf("  automaticFacetFilters=%v\n", o.AutomaticFacetFilters)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	return fmt.Sprintf("ParamsConsequence {\n%s}", out)
}
