// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// TrendingModels Trending model.
type TrendingModels string

// List of trendingModels
const (
	TRENDINGMODELS_FACETS TrendingModels = "trending-facets"
	TRENDINGMODELS_ITEMS  TrendingModels = "trending-items"
)

// All allowed values of TrendingModels enum
var AllowedTrendingModelsEnumValues = []TrendingModels{
	"trending-facets",
	"trending-items",
}

func (v *TrendingModels) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrendingModels(value)
	for _, existing := range AllowedTrendingModelsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrendingModels", value)
}

// NewTrendingModelsFromValue returns a pointer to a valid TrendingModels
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrendingModelsFromValue(v string) (*TrendingModels, error) {
	ev := TrendingModels(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrendingModels: valid values are %v", v, AllowedTrendingModelsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrendingModels) IsValid() bool {
	for _, existing := range AllowedTrendingModelsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to trendingModels value
func (v TrendingModels) Ptr() *TrendingModels {
	return &v
}

type NullableTrendingModels struct {
	value *TrendingModels
	isSet bool
}

func (v NullableTrendingModels) Get() *TrendingModels {
	return v.value
}

func (v *NullableTrendingModels) Set(val *TrendingModels) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingModels) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingModels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingModels(val *TrendingModels) *NullableTrendingModels {
	return &NullableTrendingModels{value: val, isSet: true}
}

func (v NullableTrendingModels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingModels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
