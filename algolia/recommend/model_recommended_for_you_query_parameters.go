// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package recommend

import (
	"encoding/json"
	"fmt"
)

// RecommendedForYouQueryParameters struct for RecommendedForYouQueryParameters.
type RecommendedForYouQueryParameters struct {
	// Search query.
	Query *string `json:"query,omitempty"`
	// Keywords to be used instead of the search query to conduct a more broader search.  Using the `similarQuery` parameter changes other settings:  - `queryType` is set to `prefixNone`. - `removeStopWords` is set to true. - `words` is set as the first ranking criterion. - All remaining words are treated as `optionalWords`.  Since the `similarQuery` is supposed to do a broad search, they usually return many results. Combine it with `filters` to narrow down the list of results.
	SimilarQuery *string `json:"similarQuery,omitempty"`
	// Filter the search so that only records with matching values are included in the results.  These filters are supported:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
	Filters         *string          `json:"filters,omitempty"`
	FacetFilters    *FacetFilters    `json:"facetFilters,omitempty"`
	OptionalFilters *OptionalFilters `json:"optionalFilters,omitempty"`
	NumericFilters  *NumericFilters  `json:"numericFilters,omitempty"`
	TagFilters      *TagFilters      `json:"tagFilters,omitempty"`
	// Whether to sum all filter scores.  If true, all filter scores are summed. Otherwise, the maximum filter score is kept. For more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
	SumOrFiltersScores *bool `json:"sumOrFiltersScores,omitempty"`
	// Restricts a search to a subset of your searchable attributes.
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.  To retrieve all facets, use the wildcard character `*`. For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
	Facets []string `json:"facets,omitempty"`
	// Whether faceting should be applied after deduplication with `distinct`.  This leads to accurate facet counts when using faceting in combination with `distinct`. It's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting, as `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.
	FacetingAfterDistinct *bool `json:"facetingAfterDistinct,omitempty"`
	// Page of search results to retrieve.
	Page *int32 `json:"page,omitempty"`
	// Position of the first hit to retrieve.
	Offset *int32 `json:"offset,omitempty"`
	// Number of hits to retrieve (used in combination with `offset`).
	Length *int32 `json:"length,omitempty"`
	// Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.  Only records included within circle around this central location are included in the results. The radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings. This parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.
	AroundLatLng *string `json:"aroundLatLng,omitempty"`
	// Whether to obtain the coordinates from the request's IP address.
	AroundLatLngViaIP *bool            `json:"aroundLatLngViaIP,omitempty"`
	AroundRadius      *AroundRadius    `json:"aroundRadius,omitempty"`
	AroundPrecision   *AroundPrecision `json:"aroundPrecision,omitempty"`
	// Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.
	MinimumAroundRadius *int32 `json:"minimumAroundRadius,omitempty"`
	// Coordinates for a rectangular area in which to search.  Each bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair: `[p1 lat, p1 long, p2 lat, p2 long]`. Provide multiple bounding boxes as nested arrays. For more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).
	InsideBoundingBox [][]float64 `json:"insideBoundingBox,omitempty"`
	// Coordinates of a polygon in which to search.  Polygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude. Provide multiple polygons as nested arrays. For more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas). This parameter is ignored, if you also specify `insideBoundingBox`.
	InsidePolygon [][]float64 `json:"insidePolygon,omitempty"`
	// ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):  - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
	NaturalLanguages []string `json:"naturalLanguages,omitempty"`
	// Assigns a rule context to the search query.  [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// Impact that Personalization should have on this search.  The higher this value is, the more Personalization determines the ranking compared to other factors. For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
	UserToken string `json:"userToken"`
	// Whether the search response should include detailed ranking information.
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// Whether to take into account an index's synonyms for this search.
	Synonyms *bool `json:"synonyms,omitempty"`
	// Whether to include a `queryID` attribute in the response.  The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Whether this search will be included in Analytics.
	Analytics *bool `json:"analytics,omitempty"`
	// Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
	AnalyticsTags []string `json:"analyticsTags,omitempty"`
	// Whether to include this search when calculating processing-time percentiles.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Whether to enable A/B testing for this search.
	EnableABTest *bool `json:"enableABTest,omitempty"`
	// Attributes to include in the API response.  To reduce the size of your response, you can retrieve only some of the attributes.  - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Determines the order in which Algolia returns your results.  By default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/). The tie-breaking algorithm sequentially applies each criterion in the order they're specified. If you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/), you put the sorting attribute at the top of the list.  **Modifiers**  <dl> <dt><code>asc(\"ATTRIBUTE\")</code></dt> <dd>Sort the index by the values of an attribute, in ascending order.</dd> <dt><code>desc(\"ATTRIBUTE\")</code></dt> <dd>Sort the index by the values of an attribute, in descending order.</dd> </dl>  Before you modify the default setting, you should test your changes in the dashboard, and by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/).
	Ranking []string `json:"ranking,omitempty"`
	// Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/).  The custom ranking attributes decide which items are shown first if the other ranking criteria are equal.  Records with missing values for your selected custom ranking attributes are always sorted last. Boolean attributes are sorted based on their alphabetical order.  **Modifiers**  <dl> <dt><code>asc(\"ATTRIBUTE\")</code></dt> <dd>Sort the index by the values of an attribute, in ascending order.</dd> <dt><code>desc(\"ATTRIBUTE\")</code></dt> <dd>Sort the index by the values of an attribute, in descending order.</dd> </dl>  If you use two or more custom ranking attributes, [reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes, or the other attributes will never be applied.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Relevancy threshold below which less relevant results aren't included in the results.  You can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas). Use this setting to strike a balance between the relevance and number of returned results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// Attributes to highlight.  By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting.  With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI.  For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// Attributes for which to enable snippets.  Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// HTML tag to insert before the highlighted parts in all highlighted results and snippets.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// HTML tag to insert after the highlighted parts in all highlighted results and snippets.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers in the search query.  Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).  Returning only exact matches can help when:  - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions.  Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// Characters for which diacritics should be preserved.  By default, Algolia removes diacritics from letters. For example, `é` becomes `e`. If this causes issues in your search, you can specify characters that should keep their diacritics.
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**.  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).
	QueryLanguages []SupportedLanguage `json:"queryLanguages,omitempty"`
	// Whether to split compound words into their building blocks.  For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Whether to enable rules.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Whether to enable Personalization.
	EnablePersonalization  *bool                   `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType              `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                   `json:"mode,omitempty"`
	SemanticSearch         *SemanticSearch         `json:"semanticSearch,omitempty"`
	// Whether to support phrase matching and excluding words from search queries.  Use the `advancedSyntaxFeatures` parameter to control which feature is supported.
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// Words that should be considered optional when found in the query.  By default, records must match all words in the search query to be included in the search results. Adding optional words can help to increase the number of search results by running an additional search query that doesn't include the optional words. For example, if the search query is \"action video\" and \"video\" is an optional word, the search engine runs two queries. One for \"action video\" and one for \"action\". Records that match all words are ranked higher.  For a search query with 4 or more words **and** all its words are optional, the number of matched words required for a record to be included in the search results increases for every 1,000 records:  - If `optionalWords` has less than 10 words, the required number of matched words increases by 1:   results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 2 matched words. - If `optionalWords` has 10 or more words, the number of required matched words increases by the number of optional words dividied by 5 (rounded down).   For example, with 18 optional words: results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 4 matched words.  For more information, see [Optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).
	OptionalWords []string `json:"optionalWords,omitempty"`
	// Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).  This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking.
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// Alternatives of query words that should be considered as exact matches by the Exact ranking criterion.  <dl> <dt><code>ignorePlurals</code></dt> <dd>  Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.  </dd> <dt><code>singleWordSynonym</code></dt> <dd> Single-word synonyms, such as \"NY/NYC\" are considered exact matches. </dd> <dt><code>multiWordsSynonym</code></dt> <dd> Multi-word synonyms, such as \"NY/New York\" are considered exact matches. </dd> </dl>.
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Advanced search syntax features you want to support.  <dl> <dt><code>exactPhrase</code></dt> <dd>  Phrases in quotes must match exactly. For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".  </dd> <dt><code>excludeWords</code></dt> <dd>  Query words prefixed with a `-` must not occur in a record. For example, `search -engine` matches records that contain \"search\" but not \"engine\".  </dd> </dl>  This setting only has an effect if `advancedSyntax` is true.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	Distinct               *Distinct                `json:"distinct,omitempty"`
	// Whether to replace a highlighted word with the matched synonym.  By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted.  With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Minimum proximity score for two matching words.  This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart.  For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Properties to include in the API response of `search` and `browse` requests.  By default, all response properties are included. To reduce the response size, you can select, which attributes should be included.  You can't exclude these properties: `message`, `warning`, `cursor`, `serverUsed`, `indexUsed`, `abTestVariantID`, `parsedQuery`, or any property triggered by the `getRankingInfo` parameter.  Don't exclude properties that you might need in your search UI.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// Maximum number of facet values to return for each facet.
	MaxValuesPerFacet *int32 `json:"maxValuesPerFacet,omitempty"`
	// Order in which to retrieve facet values.  <dl> <dt><code>count</code></dt> <dd> Facet values are retrieved by decreasing count. The count is the number of matching records containing this facet value. </dd> <dt><code>alpha</code></dt> <dd>Retrieve facet values alphabetically.</dd> </dl>  This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/).
	SortFacetValuesBy *string `json:"sortFacetValuesBy,omitempty"`
	// Whether the best matching attribute should be determined by minimum proximity.  This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.
	AttributeCriteriaComputedByMinProximity *bool             `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent `json:"renderingContent,omitempty"`
	// Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).  This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
	EnableReRanking      *bool                        `json:"enableReRanking,omitempty"`
	ReRankingApplyFilter NullableReRankingApplyFilter `json:"reRankingApplyFilter,omitempty"`
}

type RecommendedForYouQueryParametersOption func(f *RecommendedForYouQueryParameters)

func WithRecommendedForYouQueryParametersQuery(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Query = &val
	}
}

func WithRecommendedForYouQueryParametersSimilarQuery(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.SimilarQuery = &val
	}
}

func WithRecommendedForYouQueryParametersFilters(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Filters = &val
	}
}

func WithRecommendedForYouQueryParametersFacetFilters(val FacetFilters) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.FacetFilters = &val
	}
}

func WithRecommendedForYouQueryParametersOptionalFilters(val OptionalFilters) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.OptionalFilters = &val
	}
}

func WithRecommendedForYouQueryParametersNumericFilters(val NumericFilters) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.NumericFilters = &val
	}
}

func WithRecommendedForYouQueryParametersTagFilters(val TagFilters) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.TagFilters = &val
	}
}

func WithRecommendedForYouQueryParametersSumOrFiltersScores(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.SumOrFiltersScores = &val
	}
}

func WithRecommendedForYouQueryParametersRestrictSearchableAttributes(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RestrictSearchableAttributes = val
	}
}

func WithRecommendedForYouQueryParametersFacets(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Facets = val
	}
}

func WithRecommendedForYouQueryParametersFacetingAfterDistinct(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.FacetingAfterDistinct = &val
	}
}

func WithRecommendedForYouQueryParametersPage(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Page = &val
	}
}

func WithRecommendedForYouQueryParametersOffset(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Offset = &val
	}
}

func WithRecommendedForYouQueryParametersLength(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Length = &val
	}
}

func WithRecommendedForYouQueryParametersAroundLatLng(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AroundLatLng = &val
	}
}

func WithRecommendedForYouQueryParametersAroundLatLngViaIP(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AroundLatLngViaIP = &val
	}
}

func WithRecommendedForYouQueryParametersAroundRadius(val AroundRadius) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AroundRadius = &val
	}
}

func WithRecommendedForYouQueryParametersAroundPrecision(val AroundPrecision) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AroundPrecision = &val
	}
}

func WithRecommendedForYouQueryParametersMinimumAroundRadius(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MinimumAroundRadius = &val
	}
}

func WithRecommendedForYouQueryParametersInsideBoundingBox(val [][]float64) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.InsideBoundingBox = val
	}
}

func WithRecommendedForYouQueryParametersInsidePolygon(val [][]float64) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.InsidePolygon = val
	}
}

func WithRecommendedForYouQueryParametersNaturalLanguages(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.NaturalLanguages = val
	}
}

func WithRecommendedForYouQueryParametersRuleContexts(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RuleContexts = val
	}
}

func WithRecommendedForYouQueryParametersPersonalizationImpact(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.PersonalizationImpact = &val
	}
}

func WithRecommendedForYouQueryParametersGetRankingInfo(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.GetRankingInfo = &val
	}
}

func WithRecommendedForYouQueryParametersSynonyms(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Synonyms = &val
	}
}

func WithRecommendedForYouQueryParametersClickAnalytics(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.ClickAnalytics = &val
	}
}

func WithRecommendedForYouQueryParametersAnalytics(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Analytics = &val
	}
}

func WithRecommendedForYouQueryParametersAnalyticsTags(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AnalyticsTags = val
	}
}

func WithRecommendedForYouQueryParametersPercentileComputation(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.PercentileComputation = &val
	}
}

func WithRecommendedForYouQueryParametersEnableABTest(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.EnableABTest = &val
	}
}

func WithRecommendedForYouQueryParametersAttributesToRetrieve(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AttributesToRetrieve = val
	}
}

func WithRecommendedForYouQueryParametersRanking(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Ranking = val
	}
}

func WithRecommendedForYouQueryParametersCustomRanking(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.CustomRanking = val
	}
}

func WithRecommendedForYouQueryParametersRelevancyStrictness(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RelevancyStrictness = &val
	}
}

func WithRecommendedForYouQueryParametersAttributesToHighlight(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AttributesToHighlight = val
	}
}

func WithRecommendedForYouQueryParametersAttributesToSnippet(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AttributesToSnippet = val
	}
}

func WithRecommendedForYouQueryParametersHighlightPreTag(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.HighlightPreTag = &val
	}
}

func WithRecommendedForYouQueryParametersHighlightPostTag(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.HighlightPostTag = &val
	}
}

func WithRecommendedForYouQueryParametersSnippetEllipsisText(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.SnippetEllipsisText = &val
	}
}

func WithRecommendedForYouQueryParametersRestrictHighlightAndSnippetArrays(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithRecommendedForYouQueryParametersHitsPerPage(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.HitsPerPage = &val
	}
}

func WithRecommendedForYouQueryParametersMinWordSizefor1Typo(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithRecommendedForYouQueryParametersMinWordSizefor2Typos(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithRecommendedForYouQueryParametersTypoTolerance(val TypoTolerance) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.TypoTolerance = &val
	}
}

func WithRecommendedForYouQueryParametersAllowTyposOnNumericTokens(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithRecommendedForYouQueryParametersDisableTypoToleranceOnAttributes(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithRecommendedForYouQueryParametersIgnorePlurals(val IgnorePlurals) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.IgnorePlurals = &val
	}
}

func WithRecommendedForYouQueryParametersRemoveStopWords(val RemoveStopWords) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RemoveStopWords = &val
	}
}

func WithRecommendedForYouQueryParametersKeepDiacriticsOnCharacters(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithRecommendedForYouQueryParametersQueryLanguages(val []SupportedLanguage) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.QueryLanguages = val
	}
}

func WithRecommendedForYouQueryParametersDecompoundQuery(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.DecompoundQuery = &val
	}
}

func WithRecommendedForYouQueryParametersEnableRules(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.EnableRules = &val
	}
}

func WithRecommendedForYouQueryParametersEnablePersonalization(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.EnablePersonalization = &val
	}
}

func WithRecommendedForYouQueryParametersQueryType(val QueryType) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.QueryType = &val
	}
}

func WithRecommendedForYouQueryParametersRemoveWordsIfNoResults(val RemoveWordsIfNoResults) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithRecommendedForYouQueryParametersMode(val Mode) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Mode = &val
	}
}

func WithRecommendedForYouQueryParametersSemanticSearch(val SemanticSearch) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.SemanticSearch = &val
	}
}

func WithRecommendedForYouQueryParametersAdvancedSyntax(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AdvancedSyntax = &val
	}
}

func WithRecommendedForYouQueryParametersOptionalWords(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.OptionalWords = val
	}
}

func WithRecommendedForYouQueryParametersDisableExactOnAttributes(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.DisableExactOnAttributes = val
	}
}

func WithRecommendedForYouQueryParametersExactOnSingleWordQuery(val ExactOnSingleWordQuery) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithRecommendedForYouQueryParametersAlternativesAsExact(val []AlternativesAsExact) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AlternativesAsExact = val
	}
}

func WithRecommendedForYouQueryParametersAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithRecommendedForYouQueryParametersDistinct(val Distinct) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.Distinct = &val
	}
}

func WithRecommendedForYouQueryParametersReplaceSynonymsInHighlight(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithRecommendedForYouQueryParametersMinProximity(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MinProximity = &val
	}
}

func WithRecommendedForYouQueryParametersResponseFields(val []string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.ResponseFields = val
	}
}

func WithRecommendedForYouQueryParametersMaxFacetHits(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MaxFacetHits = &val
	}
}

func WithRecommendedForYouQueryParametersMaxValuesPerFacet(val int32) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.MaxValuesPerFacet = &val
	}
}

func WithRecommendedForYouQueryParametersSortFacetValuesBy(val string) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.SortFacetValuesBy = &val
	}
}

func WithRecommendedForYouQueryParametersAttributeCriteriaComputedByMinProximity(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithRecommendedForYouQueryParametersRenderingContent(val RenderingContent) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.RenderingContent = &val
	}
}

func WithRecommendedForYouQueryParametersEnableReRanking(val bool) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.EnableReRanking = &val
	}
}

func WithRecommendedForYouQueryParametersReRankingApplyFilter(val NullableReRankingApplyFilter) RecommendedForYouQueryParametersOption {
	return func(f *RecommendedForYouQueryParameters) {
		f.ReRankingApplyFilter = val
	}
}

// NewRecommendedForYouQueryParameters instantiates a new RecommendedForYouQueryParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewRecommendedForYouQueryParameters(userToken string, opts ...RecommendedForYouQueryParametersOption) *RecommendedForYouQueryParameters {
	this := &RecommendedForYouQueryParameters{}
	this.UserToken = userToken
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyRecommendedForYouQueryParameters return a pointer to an empty RecommendedForYouQueryParameters object.
func NewEmptyRecommendedForYouQueryParameters() *RecommendedForYouQueryParameters {
	return &RecommendedForYouQueryParameters{}
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *RecommendedForYouQueryParameters) SetQuery(v string) *RecommendedForYouQueryParameters {
	o.Query = &v
	return o
}

// GetSimilarQuery returns the SimilarQuery field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSimilarQuery() string {
	if o == nil || o.SimilarQuery == nil {
		var ret string
		return ret
	}
	return *o.SimilarQuery
}

// GetSimilarQueryOk returns a tuple with the SimilarQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSimilarQueryOk() (*string, bool) {
	if o == nil || o.SimilarQuery == nil {
		return nil, false
	}
	return o.SimilarQuery, true
}

// HasSimilarQuery returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSimilarQuery() bool {
	if o != nil && o.SimilarQuery != nil {
		return true
	}

	return false
}

// SetSimilarQuery gets a reference to the given string and assigns it to the SimilarQuery field.
func (o *RecommendedForYouQueryParameters) SetSimilarQuery(v string) *RecommendedForYouQueryParameters {
	o.SimilarQuery = &v
	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *RecommendedForYouQueryParameters) SetFilters(v string) *RecommendedForYouQueryParameters {
	o.Filters = &v
	return o
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *RecommendedForYouQueryParameters) SetFacetFilters(v *FacetFilters) *RecommendedForYouQueryParameters {
	o.FacetFilters = v
	return o
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *RecommendedForYouQueryParameters) SetOptionalFilters(v *OptionalFilters) *RecommendedForYouQueryParameters {
	o.OptionalFilters = v
	return o
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *RecommendedForYouQueryParameters) SetNumericFilters(v *NumericFilters) *RecommendedForYouQueryParameters {
	o.NumericFilters = v
	return o
}

// GetTagFilters returns the TagFilters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetTagFilters() TagFilters {
	if o == nil || o.TagFilters == nil {
		var ret TagFilters
		return ret
	}
	return *o.TagFilters
}

// GetTagFiltersOk returns a tuple with the TagFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetTagFiltersOk() (*TagFilters, bool) {
	if o == nil || o.TagFilters == nil {
		return nil, false
	}
	return o.TagFilters, true
}

// HasTagFilters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasTagFilters() bool {
	if o != nil && o.TagFilters != nil {
		return true
	}

	return false
}

// SetTagFilters gets a reference to the given TagFilters and assigns it to the TagFilters field.
func (o *RecommendedForYouQueryParameters) SetTagFilters(v *TagFilters) *RecommendedForYouQueryParameters {
	o.TagFilters = v
	return o
}

// GetSumOrFiltersScores returns the SumOrFiltersScores field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSumOrFiltersScores() bool {
	if o == nil || o.SumOrFiltersScores == nil {
		var ret bool
		return ret
	}
	return *o.SumOrFiltersScores
}

// GetSumOrFiltersScoresOk returns a tuple with the SumOrFiltersScores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSumOrFiltersScoresOk() (*bool, bool) {
	if o == nil || o.SumOrFiltersScores == nil {
		return nil, false
	}
	return o.SumOrFiltersScores, true
}

// HasSumOrFiltersScores returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSumOrFiltersScores() bool {
	if o != nil && o.SumOrFiltersScores != nil {
		return true
	}

	return false
}

// SetSumOrFiltersScores gets a reference to the given bool and assigns it to the SumOrFiltersScores field.
func (o *RecommendedForYouQueryParameters) SetSumOrFiltersScores(v bool) *RecommendedForYouQueryParameters {
	o.SumOrFiltersScores = &v
	return o
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *RecommendedForYouQueryParameters) SetRestrictSearchableAttributes(v []string) *RecommendedForYouQueryParameters {
	o.RestrictSearchableAttributes = v
	return o
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetFacets() []string {
	if o == nil || o.Facets == nil {
		var ret []string
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetFacetsOk() ([]string, bool) {
	if o == nil || o.Facets == nil {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasFacets() bool {
	if o != nil && o.Facets != nil {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []string and assigns it to the Facets field.
func (o *RecommendedForYouQueryParameters) SetFacets(v []string) *RecommendedForYouQueryParameters {
	o.Facets = v
	return o
}

// GetFacetingAfterDistinct returns the FacetingAfterDistinct field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetFacetingAfterDistinct() bool {
	if o == nil || o.FacetingAfterDistinct == nil {
		var ret bool
		return ret
	}
	return *o.FacetingAfterDistinct
}

// GetFacetingAfterDistinctOk returns a tuple with the FacetingAfterDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetFacetingAfterDistinctOk() (*bool, bool) {
	if o == nil || o.FacetingAfterDistinct == nil {
		return nil, false
	}
	return o.FacetingAfterDistinct, true
}

// HasFacetingAfterDistinct returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasFacetingAfterDistinct() bool {
	if o != nil && o.FacetingAfterDistinct != nil {
		return true
	}

	return false
}

// SetFacetingAfterDistinct gets a reference to the given bool and assigns it to the FacetingAfterDistinct field.
func (o *RecommendedForYouQueryParameters) SetFacetingAfterDistinct(v bool) *RecommendedForYouQueryParameters {
	o.FacetingAfterDistinct = &v
	return o
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *RecommendedForYouQueryParameters) SetPage(v int32) *RecommendedForYouQueryParameters {
	o.Page = &v
	return o
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *RecommendedForYouQueryParameters) SetOffset(v int32) *RecommendedForYouQueryParameters {
	o.Offset = &v
	return o
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *RecommendedForYouQueryParameters) SetLength(v int32) *RecommendedForYouQueryParameters {
	o.Length = &v
	return o
}

// GetAroundLatLng returns the AroundLatLng field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAroundLatLng() string {
	if o == nil || o.AroundLatLng == nil {
		var ret string
		return ret
	}
	return *o.AroundLatLng
}

// GetAroundLatLngOk returns a tuple with the AroundLatLng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAroundLatLngOk() (*string, bool) {
	if o == nil || o.AroundLatLng == nil {
		return nil, false
	}
	return o.AroundLatLng, true
}

// HasAroundLatLng returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAroundLatLng() bool {
	if o != nil && o.AroundLatLng != nil {
		return true
	}

	return false
}

// SetAroundLatLng gets a reference to the given string and assigns it to the AroundLatLng field.
func (o *RecommendedForYouQueryParameters) SetAroundLatLng(v string) *RecommendedForYouQueryParameters {
	o.AroundLatLng = &v
	return o
}

// GetAroundLatLngViaIP returns the AroundLatLngViaIP field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAroundLatLngViaIP() bool {
	if o == nil || o.AroundLatLngViaIP == nil {
		var ret bool
		return ret
	}
	return *o.AroundLatLngViaIP
}

// GetAroundLatLngViaIPOk returns a tuple with the AroundLatLngViaIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAroundLatLngViaIPOk() (*bool, bool) {
	if o == nil || o.AroundLatLngViaIP == nil {
		return nil, false
	}
	return o.AroundLatLngViaIP, true
}

// HasAroundLatLngViaIP returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAroundLatLngViaIP() bool {
	if o != nil && o.AroundLatLngViaIP != nil {
		return true
	}

	return false
}

// SetAroundLatLngViaIP gets a reference to the given bool and assigns it to the AroundLatLngViaIP field.
func (o *RecommendedForYouQueryParameters) SetAroundLatLngViaIP(v bool) *RecommendedForYouQueryParameters {
	o.AroundLatLngViaIP = &v
	return o
}

// GetAroundRadius returns the AroundRadius field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAroundRadius() AroundRadius {
	if o == nil || o.AroundRadius == nil {
		var ret AroundRadius
		return ret
	}
	return *o.AroundRadius
}

// GetAroundRadiusOk returns a tuple with the AroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAroundRadiusOk() (*AroundRadius, bool) {
	if o == nil || o.AroundRadius == nil {
		return nil, false
	}
	return o.AroundRadius, true
}

// HasAroundRadius returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAroundRadius() bool {
	if o != nil && o.AroundRadius != nil {
		return true
	}

	return false
}

// SetAroundRadius gets a reference to the given AroundRadius and assigns it to the AroundRadius field.
func (o *RecommendedForYouQueryParameters) SetAroundRadius(v *AroundRadius) *RecommendedForYouQueryParameters {
	o.AroundRadius = v
	return o
}

// GetAroundPrecision returns the AroundPrecision field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAroundPrecision() AroundPrecision {
	if o == nil || o.AroundPrecision == nil {
		var ret AroundPrecision
		return ret
	}
	return *o.AroundPrecision
}

// GetAroundPrecisionOk returns a tuple with the AroundPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAroundPrecisionOk() (*AroundPrecision, bool) {
	if o == nil || o.AroundPrecision == nil {
		return nil, false
	}
	return o.AroundPrecision, true
}

// HasAroundPrecision returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAroundPrecision() bool {
	if o != nil && o.AroundPrecision != nil {
		return true
	}

	return false
}

// SetAroundPrecision gets a reference to the given AroundPrecision and assigns it to the AroundPrecision field.
func (o *RecommendedForYouQueryParameters) SetAroundPrecision(v *AroundPrecision) *RecommendedForYouQueryParameters {
	o.AroundPrecision = v
	return o
}

// GetMinimumAroundRadius returns the MinimumAroundRadius field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMinimumAroundRadius() int32 {
	if o == nil || o.MinimumAroundRadius == nil {
		var ret int32
		return ret
	}
	return *o.MinimumAroundRadius
}

// GetMinimumAroundRadiusOk returns a tuple with the MinimumAroundRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMinimumAroundRadiusOk() (*int32, bool) {
	if o == nil || o.MinimumAroundRadius == nil {
		return nil, false
	}
	return o.MinimumAroundRadius, true
}

// HasMinimumAroundRadius returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMinimumAroundRadius() bool {
	if o != nil && o.MinimumAroundRadius != nil {
		return true
	}

	return false
}

// SetMinimumAroundRadius gets a reference to the given int32 and assigns it to the MinimumAroundRadius field.
func (o *RecommendedForYouQueryParameters) SetMinimumAroundRadius(v int32) *RecommendedForYouQueryParameters {
	o.MinimumAroundRadius = &v
	return o
}

// GetInsideBoundingBox returns the InsideBoundingBox field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetInsideBoundingBox() [][]float64 {
	if o == nil || o.InsideBoundingBox == nil {
		var ret [][]float64
		return ret
	}
	return o.InsideBoundingBox
}

// GetInsideBoundingBoxOk returns a tuple with the InsideBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetInsideBoundingBoxOk() ([][]float64, bool) {
	if o == nil || o.InsideBoundingBox == nil {
		return nil, false
	}
	return o.InsideBoundingBox, true
}

// HasInsideBoundingBox returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasInsideBoundingBox() bool {
	if o != nil && o.InsideBoundingBox != nil {
		return true
	}

	return false
}

// SetInsideBoundingBox gets a reference to the given [][]float64 and assigns it to the InsideBoundingBox field.
func (o *RecommendedForYouQueryParameters) SetInsideBoundingBox(v [][]float64) *RecommendedForYouQueryParameters {
	o.InsideBoundingBox = v
	return o
}

// GetInsidePolygon returns the InsidePolygon field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetInsidePolygon() [][]float64 {
	if o == nil || o.InsidePolygon == nil {
		var ret [][]float64
		return ret
	}
	return o.InsidePolygon
}

// GetInsidePolygonOk returns a tuple with the InsidePolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetInsidePolygonOk() ([][]float64, bool) {
	if o == nil || o.InsidePolygon == nil {
		return nil, false
	}
	return o.InsidePolygon, true
}

// HasInsidePolygon returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasInsidePolygon() bool {
	if o != nil && o.InsidePolygon != nil {
		return true
	}

	return false
}

// SetInsidePolygon gets a reference to the given [][]float64 and assigns it to the InsidePolygon field.
func (o *RecommendedForYouQueryParameters) SetInsidePolygon(v [][]float64) *RecommendedForYouQueryParameters {
	o.InsidePolygon = v
	return o
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetNaturalLanguages() []string {
	if o == nil || o.NaturalLanguages == nil {
		var ret []string
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetNaturalLanguagesOk() ([]string, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []string and assigns it to the NaturalLanguages field.
func (o *RecommendedForYouQueryParameters) SetNaturalLanguages(v []string) *RecommendedForYouQueryParameters {
	o.NaturalLanguages = v
	return o
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *RecommendedForYouQueryParameters) SetRuleContexts(v []string) *RecommendedForYouQueryParameters {
	o.RuleContexts = v
	return o
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *RecommendedForYouQueryParameters) SetPersonalizationImpact(v int32) *RecommendedForYouQueryParameters {
	o.PersonalizationImpact = &v
	return o
}

// GetUserToken returns the UserToken field value.
func (o *RecommendedForYouQueryParameters) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value.
func (o *RecommendedForYouQueryParameters) SetUserToken(v string) *RecommendedForYouQueryParameters {
	o.UserToken = v
	return o
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *RecommendedForYouQueryParameters) SetGetRankingInfo(v bool) *RecommendedForYouQueryParameters {
	o.GetRankingInfo = &v
	return o
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *RecommendedForYouQueryParameters) SetSynonyms(v bool) *RecommendedForYouQueryParameters {
	o.Synonyms = &v
	return o
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *RecommendedForYouQueryParameters) SetClickAnalytics(v bool) *RecommendedForYouQueryParameters {
	o.ClickAnalytics = &v
	return o
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *RecommendedForYouQueryParameters) SetAnalytics(v bool) *RecommendedForYouQueryParameters {
	o.Analytics = &v
	return o
}

// GetAnalyticsTags returns the AnalyticsTags field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAnalyticsTags() []string {
	if o == nil || o.AnalyticsTags == nil {
		var ret []string
		return ret
	}
	return o.AnalyticsTags
}

// GetAnalyticsTagsOk returns a tuple with the AnalyticsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAnalyticsTagsOk() ([]string, bool) {
	if o == nil || o.AnalyticsTags == nil {
		return nil, false
	}
	return o.AnalyticsTags, true
}

// HasAnalyticsTags returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAnalyticsTags() bool {
	if o != nil && o.AnalyticsTags != nil {
		return true
	}

	return false
}

// SetAnalyticsTags gets a reference to the given []string and assigns it to the AnalyticsTags field.
func (o *RecommendedForYouQueryParameters) SetAnalyticsTags(v []string) *RecommendedForYouQueryParameters {
	o.AnalyticsTags = v
	return o
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *RecommendedForYouQueryParameters) SetPercentileComputation(v bool) *RecommendedForYouQueryParameters {
	o.PercentileComputation = &v
	return o
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *RecommendedForYouQueryParameters) SetEnableABTest(v bool) *RecommendedForYouQueryParameters {
	o.EnableABTest = &v
	return o
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *RecommendedForYouQueryParameters) SetAttributesToRetrieve(v []string) *RecommendedForYouQueryParameters {
	o.AttributesToRetrieve = v
	return o
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *RecommendedForYouQueryParameters) SetRanking(v []string) *RecommendedForYouQueryParameters {
	o.Ranking = v
	return o
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *RecommendedForYouQueryParameters) SetCustomRanking(v []string) *RecommendedForYouQueryParameters {
	o.CustomRanking = v
	return o
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *RecommendedForYouQueryParameters) SetRelevancyStrictness(v int32) *RecommendedForYouQueryParameters {
	o.RelevancyStrictness = &v
	return o
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *RecommendedForYouQueryParameters) SetAttributesToHighlight(v []string) *RecommendedForYouQueryParameters {
	o.AttributesToHighlight = v
	return o
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *RecommendedForYouQueryParameters) SetAttributesToSnippet(v []string) *RecommendedForYouQueryParameters {
	o.AttributesToSnippet = v
	return o
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *RecommendedForYouQueryParameters) SetHighlightPreTag(v string) *RecommendedForYouQueryParameters {
	o.HighlightPreTag = &v
	return o
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *RecommendedForYouQueryParameters) SetHighlightPostTag(v string) *RecommendedForYouQueryParameters {
	o.HighlightPostTag = &v
	return o
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *RecommendedForYouQueryParameters) SetSnippetEllipsisText(v string) *RecommendedForYouQueryParameters {
	o.SnippetEllipsisText = &v
	return o
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *RecommendedForYouQueryParameters) SetRestrictHighlightAndSnippetArrays(v bool) *RecommendedForYouQueryParameters {
	o.RestrictHighlightAndSnippetArrays = &v
	return o
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *RecommendedForYouQueryParameters) SetHitsPerPage(v int32) *RecommendedForYouQueryParameters {
	o.HitsPerPage = &v
	return o
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *RecommendedForYouQueryParameters) SetMinWordSizefor1Typo(v int32) *RecommendedForYouQueryParameters {
	o.MinWordSizefor1Typo = &v
	return o
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *RecommendedForYouQueryParameters) SetMinWordSizefor2Typos(v int32) *RecommendedForYouQueryParameters {
	o.MinWordSizefor2Typos = &v
	return o
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *RecommendedForYouQueryParameters) SetTypoTolerance(v *TypoTolerance) *RecommendedForYouQueryParameters {
	o.TypoTolerance = v
	return o
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *RecommendedForYouQueryParameters) SetAllowTyposOnNumericTokens(v bool) *RecommendedForYouQueryParameters {
	o.AllowTyposOnNumericTokens = &v
	return o
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *RecommendedForYouQueryParameters) SetDisableTypoToleranceOnAttributes(v []string) *RecommendedForYouQueryParameters {
	o.DisableTypoToleranceOnAttributes = v
	return o
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *RecommendedForYouQueryParameters) SetIgnorePlurals(v *IgnorePlurals) *RecommendedForYouQueryParameters {
	o.IgnorePlurals = v
	return o
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *RecommendedForYouQueryParameters) SetRemoveStopWords(v *RemoveStopWords) *RecommendedForYouQueryParameters {
	o.RemoveStopWords = v
	return o
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *RecommendedForYouQueryParameters) SetKeepDiacriticsOnCharacters(v string) *RecommendedForYouQueryParameters {
	o.KeepDiacriticsOnCharacters = &v
	return o
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetQueryLanguages() []SupportedLanguage {
	if o == nil || o.QueryLanguages == nil {
		var ret []SupportedLanguage
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetQueryLanguagesOk() ([]SupportedLanguage, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []SupportedLanguage and assigns it to the QueryLanguages field.
func (o *RecommendedForYouQueryParameters) SetQueryLanguages(v []SupportedLanguage) *RecommendedForYouQueryParameters {
	o.QueryLanguages = v
	return o
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *RecommendedForYouQueryParameters) SetDecompoundQuery(v bool) *RecommendedForYouQueryParameters {
	o.DecompoundQuery = &v
	return o
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *RecommendedForYouQueryParameters) SetEnableRules(v bool) *RecommendedForYouQueryParameters {
	o.EnableRules = &v
	return o
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *RecommendedForYouQueryParameters) SetEnablePersonalization(v bool) *RecommendedForYouQueryParameters {
	o.EnablePersonalization = &v
	return o
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *RecommendedForYouQueryParameters) SetQueryType(v QueryType) *RecommendedForYouQueryParameters {
	o.QueryType = &v
	return o
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *RecommendedForYouQueryParameters) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) *RecommendedForYouQueryParameters {
	o.RemoveWordsIfNoResults = &v
	return o
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *RecommendedForYouQueryParameters) SetMode(v Mode) *RecommendedForYouQueryParameters {
	o.Mode = &v
	return o
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSemanticSearch() SemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret SemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSemanticSearchOk() (*SemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given SemanticSearch and assigns it to the SemanticSearch field.
func (o *RecommendedForYouQueryParameters) SetSemanticSearch(v *SemanticSearch) *RecommendedForYouQueryParameters {
	o.SemanticSearch = v
	return o
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *RecommendedForYouQueryParameters) SetAdvancedSyntax(v bool) *RecommendedForYouQueryParameters {
	o.AdvancedSyntax = &v
	return o
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *RecommendedForYouQueryParameters) SetOptionalWords(v []string) *RecommendedForYouQueryParameters {
	o.OptionalWords = v
	return o
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *RecommendedForYouQueryParameters) SetDisableExactOnAttributes(v []string) *RecommendedForYouQueryParameters {
	o.DisableExactOnAttributes = v
	return o
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *RecommendedForYouQueryParameters) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) *RecommendedForYouQueryParameters {
	o.ExactOnSingleWordQuery = &v
	return o
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *RecommendedForYouQueryParameters) SetAlternativesAsExact(v []AlternativesAsExact) *RecommendedForYouQueryParameters {
	o.AlternativesAsExact = v
	return o
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *RecommendedForYouQueryParameters) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) *RecommendedForYouQueryParameters {
	o.AdvancedSyntaxFeatures = v
	return o
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *RecommendedForYouQueryParameters) SetDistinct(v *Distinct) *RecommendedForYouQueryParameters {
	o.Distinct = v
	return o
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *RecommendedForYouQueryParameters) SetReplaceSynonymsInHighlight(v bool) *RecommendedForYouQueryParameters {
	o.ReplaceSynonymsInHighlight = &v
	return o
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *RecommendedForYouQueryParameters) SetMinProximity(v int32) *RecommendedForYouQueryParameters {
	o.MinProximity = &v
	return o
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *RecommendedForYouQueryParameters) SetResponseFields(v []string) *RecommendedForYouQueryParameters {
	o.ResponseFields = v
	return o
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *RecommendedForYouQueryParameters) SetMaxFacetHits(v int32) *RecommendedForYouQueryParameters {
	o.MaxFacetHits = &v
	return o
}

// GetMaxValuesPerFacet returns the MaxValuesPerFacet field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetMaxValuesPerFacet() int32 {
	if o == nil || o.MaxValuesPerFacet == nil {
		var ret int32
		return ret
	}
	return *o.MaxValuesPerFacet
}

// GetMaxValuesPerFacetOk returns a tuple with the MaxValuesPerFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetMaxValuesPerFacetOk() (*int32, bool) {
	if o == nil || o.MaxValuesPerFacet == nil {
		return nil, false
	}
	return o.MaxValuesPerFacet, true
}

// HasMaxValuesPerFacet returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasMaxValuesPerFacet() bool {
	if o != nil && o.MaxValuesPerFacet != nil {
		return true
	}

	return false
}

// SetMaxValuesPerFacet gets a reference to the given int32 and assigns it to the MaxValuesPerFacet field.
func (o *RecommendedForYouQueryParameters) SetMaxValuesPerFacet(v int32) *RecommendedForYouQueryParameters {
	o.MaxValuesPerFacet = &v
	return o
}

// GetSortFacetValuesBy returns the SortFacetValuesBy field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetSortFacetValuesBy() string {
	if o == nil || o.SortFacetValuesBy == nil {
		var ret string
		return ret
	}
	return *o.SortFacetValuesBy
}

// GetSortFacetValuesByOk returns a tuple with the SortFacetValuesBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetSortFacetValuesByOk() (*string, bool) {
	if o == nil || o.SortFacetValuesBy == nil {
		return nil, false
	}
	return o.SortFacetValuesBy, true
}

// HasSortFacetValuesBy returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasSortFacetValuesBy() bool {
	if o != nil && o.SortFacetValuesBy != nil {
		return true
	}

	return false
}

// SetSortFacetValuesBy gets a reference to the given string and assigns it to the SortFacetValuesBy field.
func (o *RecommendedForYouQueryParameters) SetSortFacetValuesBy(v string) *RecommendedForYouQueryParameters {
	o.SortFacetValuesBy = &v
	return o
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *RecommendedForYouQueryParameters) SetAttributeCriteriaComputedByMinProximity(v bool) *RecommendedForYouQueryParameters {
	o.AttributeCriteriaComputedByMinProximity = &v
	return o
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *RecommendedForYouQueryParameters) SetRenderingContent(v *RenderingContent) *RecommendedForYouQueryParameters {
	o.RenderingContent = v
	return o
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *RecommendedForYouQueryParameters) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendedForYouQueryParameters) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *RecommendedForYouQueryParameters) SetEnableReRanking(v bool) *RecommendedForYouQueryParameters {
	o.EnableReRanking = &v
	return o
}

// GetReRankingApplyFilter returns the ReRankingApplyFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendedForYouQueryParameters) GetReRankingApplyFilter() ReRankingApplyFilter {
	if o == nil || o.ReRankingApplyFilter.Get() == nil {
		var ret ReRankingApplyFilter
		return ret
	}
	return *o.ReRankingApplyFilter.Get()
}

// GetReRankingApplyFilterOk returns a tuple with the ReRankingApplyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *RecommendedForYouQueryParameters) GetReRankingApplyFilterOk() (*ReRankingApplyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReRankingApplyFilter.Get(), o.ReRankingApplyFilter.IsSet()
}

// HasReRankingApplyFilter returns a boolean if a field has been set.
func (o *RecommendedForYouQueryParameters) HasReRankingApplyFilter() bool {
	if o != nil && o.ReRankingApplyFilter.IsSet() {
		return true
	}

	return false
}

// SetReRankingApplyFilter gets a reference to the given NullableReRankingApplyFilter and assigns it to the ReRankingApplyFilter field.
func (o *RecommendedForYouQueryParameters) SetReRankingApplyFilter(v *ReRankingApplyFilter) *RecommendedForYouQueryParameters {
	o.ReRankingApplyFilter.Set(v)
	return o
}

// SetReRankingApplyFilterNil sets the value for ReRankingApplyFilter to be an explicit nil.
func (o *RecommendedForYouQueryParameters) SetReRankingApplyFilterNil() {
	o.ReRankingApplyFilter.Set(nil)
}

// UnsetReRankingApplyFilter ensures that no value is present for ReRankingApplyFilter, not even an explicit nil.
func (o *RecommendedForYouQueryParameters) UnsetReRankingApplyFilter() {
	o.ReRankingApplyFilter.Unset()
}

func (o RecommendedForYouQueryParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.SimilarQuery != nil {
		toSerialize["similarQuery"] = o.SimilarQuery
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.TagFilters != nil {
		toSerialize["tagFilters"] = o.TagFilters
	}
	if o.SumOrFiltersScores != nil {
		toSerialize["sumOrFiltersScores"] = o.SumOrFiltersScores
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.Facets != nil {
		toSerialize["facets"] = o.Facets
	}
	if o.FacetingAfterDistinct != nil {
		toSerialize["facetingAfterDistinct"] = o.FacetingAfterDistinct
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.AroundLatLng != nil {
		toSerialize["aroundLatLng"] = o.AroundLatLng
	}
	if o.AroundLatLngViaIP != nil {
		toSerialize["aroundLatLngViaIP"] = o.AroundLatLngViaIP
	}
	if o.AroundRadius != nil {
		toSerialize["aroundRadius"] = o.AroundRadius
	}
	if o.AroundPrecision != nil {
		toSerialize["aroundPrecision"] = o.AroundPrecision
	}
	if o.MinimumAroundRadius != nil {
		toSerialize["minimumAroundRadius"] = o.MinimumAroundRadius
	}
	if o.InsideBoundingBox != nil {
		toSerialize["insideBoundingBox"] = o.InsideBoundingBox
	}
	if o.InsidePolygon != nil {
		toSerialize["insidePolygon"] = o.InsidePolygon
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if true {
		toSerialize["userToken"] = o.UserToken
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AnalyticsTags != nil {
		toSerialize["analyticsTags"] = o.AnalyticsTags
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.MaxValuesPerFacet != nil {
		toSerialize["maxValuesPerFacet"] = o.MaxValuesPerFacet
	}
	if o.SortFacetValuesBy != nil {
		toSerialize["sortFacetValuesBy"] = o.SortFacetValuesBy
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.ReRankingApplyFilter.IsSet() {
		toSerialize["reRankingApplyFilter"] = o.ReRankingApplyFilter.Get()
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal RecommendedForYouQueryParameters: %w", err)
	}

	return serialized, nil
}

func (o RecommendedForYouQueryParameters) String() string {
	out := ""
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  similarQuery=%v\n", o.SimilarQuery)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  tagFilters=%v\n", o.TagFilters)
	out += fmt.Sprintf("  sumOrFiltersScores=%v\n", o.SumOrFiltersScores)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  facets=%v\n", o.Facets)
	out += fmt.Sprintf("  facetingAfterDistinct=%v\n", o.FacetingAfterDistinct)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  offset=%v\n", o.Offset)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  aroundLatLng=%v\n", o.AroundLatLng)
	out += fmt.Sprintf("  aroundLatLngViaIP=%v\n", o.AroundLatLngViaIP)
	out += fmt.Sprintf("  aroundRadius=%v\n", o.AroundRadius)
	out += fmt.Sprintf("  aroundPrecision=%v\n", o.AroundPrecision)
	out += fmt.Sprintf("  minimumAroundRadius=%v\n", o.MinimumAroundRadius)
	out += fmt.Sprintf("  insideBoundingBox=%v\n", o.InsideBoundingBox)
	out += fmt.Sprintf("  insidePolygon=%v\n", o.InsidePolygon)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  userToken=%v\n", o.UserToken)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  analyticsTags=%v\n", o.AnalyticsTags)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  maxValuesPerFacet=%v\n", o.MaxValuesPerFacet)
	out += fmt.Sprintf("  sortFacetValuesBy=%v\n", o.SortFacetValuesBy)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  reRankingApplyFilter=%v\n", o.ReRankingApplyFilter)
	return fmt.Sprintf("RecommendedForYouQueryParameters {\n%s}", out)
}

type NullableRecommendedForYouQueryParameters struct {
	value *RecommendedForYouQueryParameters
	isSet bool
}

func (v NullableRecommendedForYouQueryParameters) Get() *RecommendedForYouQueryParameters {
	return v.value
}

func (v *NullableRecommendedForYouQueryParameters) Set(val *RecommendedForYouQueryParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendedForYouQueryParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendedForYouQueryParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendedForYouQueryParameters(val *RecommendedForYouQueryParameters) *NullableRecommendedForYouQueryParameters {
	return &NullableRecommendedForYouQueryParameters{value: val, isSet: true}
}

func (v NullableRecommendedForYouQueryParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRecommendedForYouQueryParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
