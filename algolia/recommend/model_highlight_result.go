// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// HighlightResult - struct for HighlightResult
type HighlightResult struct {
	HighlightResultOption        *HighlightResultOption
	ArrayOfHighlightResultOption *[]HighlightResultOption
}

// HighlightResultOptionAsHighlightResult is a convenience function that returns HighlightResultOption wrapped in HighlightResult
func HighlightResultOptionAsHighlightResult(v *HighlightResultOption) HighlightResult {
	return HighlightResult{
		HighlightResultOption: v,
	}
}

// []HighlightResultOptionAsHighlightResult is a convenience function that returns []HighlightResultOption wrapped in HighlightResult
func ArrayOfHighlightResultOptionAsHighlightResult(v *[]HighlightResultOption) HighlightResult {
	return HighlightResult{
		ArrayOfHighlightResultOption: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *HighlightResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HighlightResultOption
	err = newStrictDecoder(data).Decode(&dst.HighlightResultOption)
	if err == nil {
		jsonHighlightResultOption, _ := json.Marshal(dst.HighlightResultOption)
		if string(jsonHighlightResultOption) == "{}" { // empty struct
			dst.HighlightResultOption = nil
		} else {
			match++
		}
	} else {
		dst.HighlightResultOption = nil
	}

	// try to unmarshal data into ArrayOfHighlightResultOption
	err = newStrictDecoder(data).Decode(&dst.ArrayOfHighlightResultOption)
	if err == nil {
		jsonArrayOfHighlightResultOption, _ := json.Marshal(dst.ArrayOfHighlightResultOption)
		if string(jsonArrayOfHighlightResultOption) == "{}" { // empty struct
			dst.ArrayOfHighlightResultOption = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfHighlightResultOption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HighlightResultOption = nil
		dst.ArrayOfHighlightResultOption = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(HighlightResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(HighlightResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HighlightResult) MarshalJSON() ([]byte, error) {
	if src.HighlightResultOption != nil {
		return json.Marshal(&src.HighlightResultOption)
	}

	if src.ArrayOfHighlightResultOption != nil {
		return json.Marshal(&src.ArrayOfHighlightResultOption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HighlightResult) GetActualInstance() any {
	if obj == nil {
		return nil
	}
	if obj.HighlightResultOption != nil {
		return obj.HighlightResultOption
	}

	if obj.ArrayOfHighlightResultOption != nil {
		return obj.ArrayOfHighlightResultOption
	}

	// all schemas are nil
	return nil
}

type NullableHighlightResult struct {
	value *HighlightResult
	isSet bool
}

func (v NullableHighlightResult) Get() *HighlightResult {
	return v.value
}

func (v *NullableHighlightResult) Set(val *HighlightResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlightResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlightResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlightResult(val *HighlightResult) *NullableHighlightResult {
	return &NullableHighlightResult{value: val, isSet: true}
}

func (v NullableHighlightResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlightResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
