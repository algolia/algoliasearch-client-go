// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// IndexSettingsAsSearchParams struct for IndexSettingsAsSearchParams
type IndexSettingsAsSearchParams struct {
	// The complete list of attributes that will be used for faceting.
	AttributesForFaceting []string `json:"attributesForFaceting,omitempty"`
	// This parameter controls which attributes to retrieve and which not to retrieve.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Restricts a given query to look in only a subset of your searchable attributes.
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Controls how Algolia should sort your results.
	Ranking []string `json:"ranking,omitempty"`
	// Specifies the custom ranking criterion.
	CustomRanking []string `json:"customRanking,omitempty"`
	// Controls the relevancy threshold below which less relevant results aren't included in the results.
	RelevancyStrictness *int32 `json:"relevancyStrictness,omitempty"`
	// List of attributes to highlight.
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// List of attributes to snippet, with an optional maximum number of words to snippet.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// The HTML string to insert before the highlighted parts in all highlight and snippet results.
	HighlightPreTag *string `json:"highlightPreTag,omitempty"`
	// The HTML string to insert after the highlighted parts in all highlight and snippet results.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Restrict highlighting and snippeting to items that matched the query.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Set the number of hits per page.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with 1 typo.
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the query string must contain to accept matches with 2 typos.
	MinWordSizefor2Typos *int32         `json:"minWordSizefor2Typos,omitempty"`
	TypoTolerance        *TypoTolerance `json:"typoTolerance,omitempty"`
	// Whether to allow typos on numbers (\"numeric tokens\") in the query string.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// List of attributes on which you want to disable typo tolerance.
	DisableTypoToleranceOnAttributes []string         `json:"disableTypoToleranceOnAttributes,omitempty"`
	IgnorePlurals                    *IgnorePlurals   `json:"ignorePlurals,omitempty"`
	RemoveStopWords                  *RemoveStopWords `json:"removeStopWords,omitempty"`
	// List of characters that the engine shouldn't automatically normalize.
	KeepDiacriticsOnCharacters *string `json:"keepDiacriticsOnCharacters,omitempty"`
	// Sets the languages to be used by language-specific settings and functionalities such as ignorePlurals, removeStopWords, and CJK word-detection.
	QueryLanguages []string `json:"queryLanguages,omitempty"`
	// Splits compound words into their composing atoms in the query.
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Whether Rules should be globally enabled.
	EnableRules *bool `json:"enableRules,omitempty"`
	// Enable the Personalization feature.
	EnablePersonalization  *bool                                      `json:"enablePersonalization,omitempty"`
	QueryType              *QueryType                                 `json:"queryType,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults                    `json:"removeWordsIfNoResults,omitempty"`
	Mode                   *Mode                                      `json:"mode,omitempty"`
	SemanticSearch         *IndexSettingsAsSearchParamsSemanticSearch `json:"semanticSearch,omitempty"`
	// Enables the advanced query syntax.
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// A list of words that should be considered as optional when found in the query.
	OptionalWords []string `json:"optionalWords,omitempty"`
	// List of attributes on which you want to disable the exact ranking criterion.
	DisableExactOnAttributes []string                `json:"disableExactOnAttributes,omitempty"`
	ExactOnSingleWordQuery   *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	// List of alternatives that should be considered an exact match by the exact ranking criterion.
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Allows you to specify which advanced syntax features are active when ‘advancedSyntax' is enabled.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	// Enriches the API’s response with meta-information as to how the query was processed.
	Explain  []string  `json:"explain,omitempty"`
	Distinct *Distinct `json:"distinct,omitempty"`
	// Name of the de-duplication attribute to be used with the distinct feature.
	AttributeForDistinct *string `json:"attributeForDistinct,omitempty"`
	// Whether to take into account an index's synonyms for a particular search.
	Synonyms *bool `json:"synonyms,omitempty"`
	// Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Precision of the proximity ranking criterion.
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Choose which fields to return in the API response. This parameters applies to search and browse queries.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Maximum number of facet hits to return during a search for facet values. For performance reasons, the maximum allowed number of returned values is 100.
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// When attribute is ranked above proximity in your ranking formula, proximity is used to select which searchable attribute is matched in the attribute ranking stage.
	AttributeCriteriaComputedByMinProximity *bool             `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	RenderingContent                        *RenderingContent `json:"renderingContent,omitempty"`
}

type IndexSettingsAsSearchParamsOption func(f *IndexSettingsAsSearchParams)

func WithIndexSettingsAsSearchParamsAttributesForFaceting(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributesForFaceting = val
	}
}

func WithIndexSettingsAsSearchParamsAttributesToRetrieve(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributesToRetrieve = val
	}
}

func WithIndexSettingsAsSearchParamsRestrictSearchableAttributes(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RestrictSearchableAttributes = val
	}
}

func WithIndexSettingsAsSearchParamsRanking(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.Ranking = val
	}
}

func WithIndexSettingsAsSearchParamsCustomRanking(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.CustomRanking = val
	}
}

func WithIndexSettingsAsSearchParamsRelevancyStrictness(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RelevancyStrictness = &val
	}
}

func WithIndexSettingsAsSearchParamsAttributesToHighlight(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributesToHighlight = val
	}
}

func WithIndexSettingsAsSearchParamsAttributesToSnippet(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributesToSnippet = val
	}
}

func WithIndexSettingsAsSearchParamsHighlightPreTag(val string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.HighlightPreTag = &val
	}
}

func WithIndexSettingsAsSearchParamsHighlightPostTag(val string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.HighlightPostTag = &val
	}
}

func WithIndexSettingsAsSearchParamsSnippetEllipsisText(val string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.SnippetEllipsisText = &val
	}
}

func WithIndexSettingsAsSearchParamsRestrictHighlightAndSnippetArrays(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithIndexSettingsAsSearchParamsHitsPerPage(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.HitsPerPage = &val
	}
}

func WithIndexSettingsAsSearchParamsMinWordSizefor1Typo(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithIndexSettingsAsSearchParamsMinWordSizefor2Typos(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithIndexSettingsAsSearchParamsTypoTolerance(val TypoTolerance) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.TypoTolerance = &val
	}
}

func WithIndexSettingsAsSearchParamsAllowTyposOnNumericTokens(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithIndexSettingsAsSearchParamsDisableTypoToleranceOnAttributes(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithIndexSettingsAsSearchParamsIgnorePlurals(val IgnorePlurals) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.IgnorePlurals = &val
	}
}

func WithIndexSettingsAsSearchParamsRemoveStopWords(val RemoveStopWords) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RemoveStopWords = &val
	}
}

func WithIndexSettingsAsSearchParamsKeepDiacriticsOnCharacters(val string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.KeepDiacriticsOnCharacters = &val
	}
}

func WithIndexSettingsAsSearchParamsQueryLanguages(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.QueryLanguages = val
	}
}

func WithIndexSettingsAsSearchParamsDecompoundQuery(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.DecompoundQuery = &val
	}
}

func WithIndexSettingsAsSearchParamsEnableRules(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.EnableRules = &val
	}
}

func WithIndexSettingsAsSearchParamsEnablePersonalization(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.EnablePersonalization = &val
	}
}

func WithIndexSettingsAsSearchParamsQueryType(val QueryType) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.QueryType = &val
	}
}

func WithIndexSettingsAsSearchParamsRemoveWordsIfNoResults(val RemoveWordsIfNoResults) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithIndexSettingsAsSearchParamsMode(val Mode) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.Mode = &val
	}
}

func WithIndexSettingsAsSearchParamsSemanticSearch(val IndexSettingsAsSearchParamsSemanticSearch) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.SemanticSearch = &val
	}
}

func WithIndexSettingsAsSearchParamsAdvancedSyntax(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AdvancedSyntax = &val
	}
}

func WithIndexSettingsAsSearchParamsOptionalWords(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.OptionalWords = val
	}
}

func WithIndexSettingsAsSearchParamsDisableExactOnAttributes(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.DisableExactOnAttributes = val
	}
}

func WithIndexSettingsAsSearchParamsExactOnSingleWordQuery(val ExactOnSingleWordQuery) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithIndexSettingsAsSearchParamsAlternativesAsExact(val []AlternativesAsExact) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AlternativesAsExact = val
	}
}

func WithIndexSettingsAsSearchParamsAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithIndexSettingsAsSearchParamsExplain(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.Explain = val
	}
}

func WithIndexSettingsAsSearchParamsDistinct(val Distinct) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.Distinct = &val
	}
}

func WithIndexSettingsAsSearchParamsAttributeForDistinct(val string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributeForDistinct = &val
	}
}

func WithIndexSettingsAsSearchParamsSynonyms(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.Synonyms = &val
	}
}

func WithIndexSettingsAsSearchParamsReplaceSynonymsInHighlight(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithIndexSettingsAsSearchParamsMinProximity(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.MinProximity = &val
	}
}

func WithIndexSettingsAsSearchParamsResponseFields(val []string) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.ResponseFields = val
	}
}

func WithIndexSettingsAsSearchParamsMaxFacetHits(val int32) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.MaxFacetHits = &val
	}
}

func WithIndexSettingsAsSearchParamsAttributeCriteriaComputedByMinProximity(val bool) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithIndexSettingsAsSearchParamsRenderingContent(val RenderingContent) IndexSettingsAsSearchParamsOption {
	return func(f *IndexSettingsAsSearchParams) {
		f.RenderingContent = &val
	}
}

// NewIndexSettingsAsSearchParams instantiates a new IndexSettingsAsSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexSettingsAsSearchParams(opts ...IndexSettingsAsSearchParamsOption) *IndexSettingsAsSearchParams {
	this := &IndexSettingsAsSearchParams{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewIndexSettingsAsSearchParamsWithDefaults instantiates a new IndexSettingsAsSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexSettingsAsSearchParamsWithDefaults() *IndexSettingsAsSearchParams {
	this := &IndexSettingsAsSearchParams{}
	var relevancyStrictness int32 = 100
	this.RelevancyStrictness = &relevancyStrictness
	var highlightPreTag string = "<em>"
	this.HighlightPreTag = &highlightPreTag
	var highlightPostTag string = "</em>"
	this.HighlightPostTag = &highlightPostTag
	var snippetEllipsisText string = "…"
	this.SnippetEllipsisText = &snippetEllipsisText
	var restrictHighlightAndSnippetArrays bool = false
	this.RestrictHighlightAndSnippetArrays = &restrictHighlightAndSnippetArrays
	var hitsPerPage int32 = 20
	this.HitsPerPage = &hitsPerPage
	var minWordSizefor1Typo int32 = 4
	this.MinWordSizefor1Typo = &minWordSizefor1Typo
	var minWordSizefor2Typos int32 = 8
	this.MinWordSizefor2Typos = &minWordSizefor2Typos
	var allowTyposOnNumericTokens bool = true
	this.AllowTyposOnNumericTokens = &allowTyposOnNumericTokens
	var keepDiacriticsOnCharacters string = ""
	this.KeepDiacriticsOnCharacters = &keepDiacriticsOnCharacters
	var decompoundQuery bool = true
	this.DecompoundQuery = &decompoundQuery
	var enableRules bool = true
	this.EnableRules = &enableRules
	var enablePersonalization bool = false
	this.EnablePersonalization = &enablePersonalization
	var queryType QueryType = QUERYTYPE_PREFIX_LAST
	this.QueryType = &queryType
	var removeWordsIfNoResults RemoveWordsIfNoResults = REMOVEWORDSIFNORESULTS_NONE
	this.RemoveWordsIfNoResults = &removeWordsIfNoResults
	var mode Mode = MODE_KEYWORD_SEARCH
	this.Mode = &mode
	var advancedSyntax bool = false
	this.AdvancedSyntax = &advancedSyntax
	var exactOnSingleWordQuery ExactOnSingleWordQuery = EXACTONSINGLEWORDQUERY_ATTRIBUTE
	this.ExactOnSingleWordQuery = &exactOnSingleWordQuery
	var synonyms bool = true
	this.Synonyms = &synonyms
	var replaceSynonymsInHighlight bool = false
	this.ReplaceSynonymsInHighlight = &replaceSynonymsInHighlight
	var minProximity int32 = 1
	this.MinProximity = &minProximity
	var maxFacetHits int32 = 10
	this.MaxFacetHits = &maxFacetHits
	var attributeCriteriaComputedByMinProximity bool = false
	this.AttributeCriteriaComputedByMinProximity = &attributeCriteriaComputedByMinProximity
	return this
}

// GetAttributesForFaceting returns the AttributesForFaceting field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributesForFaceting() []string {
	if o == nil || o.AttributesForFaceting == nil {
		var ret []string
		return ret
	}
	return o.AttributesForFaceting
}

// GetAttributesForFacetingOk returns a tuple with the AttributesForFaceting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributesForFacetingOk() ([]string, bool) {
	if o == nil || o.AttributesForFaceting == nil {
		return nil, false
	}
	return o.AttributesForFaceting, true
}

// HasAttributesForFaceting returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributesForFaceting() bool {
	if o != nil && o.AttributesForFaceting != nil {
		return true
	}

	return false
}

// SetAttributesForFaceting gets a reference to the given []string and assigns it to the AttributesForFaceting field.
func (o *IndexSettingsAsSearchParams) SetAttributesForFaceting(v []string) {
	o.AttributesForFaceting = v
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *IndexSettingsAsSearchParams) SetAttributesToRetrieve(v []string) {
	o.AttributesToRetrieve = v
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *IndexSettingsAsSearchParams) SetRestrictSearchableAttributes(v []string) {
	o.RestrictSearchableAttributes = v
}

// GetRanking returns the Ranking field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRanking() []string {
	if o == nil || o.Ranking == nil {
		var ret []string
		return ret
	}
	return o.Ranking
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRankingOk() ([]string, bool) {
	if o == nil || o.Ranking == nil {
		return nil, false
	}
	return o.Ranking, true
}

// HasRanking returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRanking() bool {
	if o != nil && o.Ranking != nil {
		return true
	}

	return false
}

// SetRanking gets a reference to the given []string and assigns it to the Ranking field.
func (o *IndexSettingsAsSearchParams) SetRanking(v []string) {
	o.Ranking = v
}

// GetCustomRanking returns the CustomRanking field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetCustomRanking() []string {
	if o == nil || o.CustomRanking == nil {
		var ret []string
		return ret
	}
	return o.CustomRanking
}

// GetCustomRankingOk returns a tuple with the CustomRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetCustomRankingOk() ([]string, bool) {
	if o == nil || o.CustomRanking == nil {
		return nil, false
	}
	return o.CustomRanking, true
}

// HasCustomRanking returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasCustomRanking() bool {
	if o != nil && o.CustomRanking != nil {
		return true
	}

	return false
}

// SetCustomRanking gets a reference to the given []string and assigns it to the CustomRanking field.
func (o *IndexSettingsAsSearchParams) SetCustomRanking(v []string) {
	o.CustomRanking = v
}

// GetRelevancyStrictness returns the RelevancyStrictness field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRelevancyStrictness() int32 {
	if o == nil || o.RelevancyStrictness == nil {
		var ret int32
		return ret
	}
	return *o.RelevancyStrictness
}

// GetRelevancyStrictnessOk returns a tuple with the RelevancyStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRelevancyStrictnessOk() (*int32, bool) {
	if o == nil || o.RelevancyStrictness == nil {
		return nil, false
	}
	return o.RelevancyStrictness, true
}

// HasRelevancyStrictness returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRelevancyStrictness() bool {
	if o != nil && o.RelevancyStrictness != nil {
		return true
	}

	return false
}

// SetRelevancyStrictness gets a reference to the given int32 and assigns it to the RelevancyStrictness field.
func (o *IndexSettingsAsSearchParams) SetRelevancyStrictness(v int32) {
	o.RelevancyStrictness = &v
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *IndexSettingsAsSearchParams) SetAttributesToHighlight(v []string) {
	o.AttributesToHighlight = v
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *IndexSettingsAsSearchParams) SetAttributesToSnippet(v []string) {
	o.AttributesToSnippet = v
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *IndexSettingsAsSearchParams) SetHighlightPreTag(v string) {
	o.HighlightPreTag = &v
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *IndexSettingsAsSearchParams) SetHighlightPostTag(v string) {
	o.HighlightPostTag = &v
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *IndexSettingsAsSearchParams) SetSnippetEllipsisText(v string) {
	o.SnippetEllipsisText = &v
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *IndexSettingsAsSearchParams) SetRestrictHighlightAndSnippetArrays(v bool) {
	o.RestrictHighlightAndSnippetArrays = &v
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *IndexSettingsAsSearchParams) SetHitsPerPage(v int32) {
	o.HitsPerPage = &v
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *IndexSettingsAsSearchParams) SetMinWordSizefor1Typo(v int32) {
	o.MinWordSizefor1Typo = &v
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *IndexSettingsAsSearchParams) SetMinWordSizefor2Typos(v int32) {
	o.MinWordSizefor2Typos = &v
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *IndexSettingsAsSearchParams) SetTypoTolerance(v TypoTolerance) {
	o.TypoTolerance = &v
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *IndexSettingsAsSearchParams) SetAllowTyposOnNumericTokens(v bool) {
	o.AllowTyposOnNumericTokens = &v
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *IndexSettingsAsSearchParams) SetDisableTypoToleranceOnAttributes(v []string) {
	o.DisableTypoToleranceOnAttributes = v
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *IndexSettingsAsSearchParams) SetIgnorePlurals(v IgnorePlurals) {
	o.IgnorePlurals = &v
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *IndexSettingsAsSearchParams) SetRemoveStopWords(v RemoveStopWords) {
	o.RemoveStopWords = &v
}

// GetKeepDiacriticsOnCharacters returns the KeepDiacriticsOnCharacters field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetKeepDiacriticsOnCharacters() string {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		var ret string
		return ret
	}
	return *o.KeepDiacriticsOnCharacters
}

// GetKeepDiacriticsOnCharactersOk returns a tuple with the KeepDiacriticsOnCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetKeepDiacriticsOnCharactersOk() (*string, bool) {
	if o == nil || o.KeepDiacriticsOnCharacters == nil {
		return nil, false
	}
	return o.KeepDiacriticsOnCharacters, true
}

// HasKeepDiacriticsOnCharacters returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasKeepDiacriticsOnCharacters() bool {
	if o != nil && o.KeepDiacriticsOnCharacters != nil {
		return true
	}

	return false
}

// SetKeepDiacriticsOnCharacters gets a reference to the given string and assigns it to the KeepDiacriticsOnCharacters field.
func (o *IndexSettingsAsSearchParams) SetKeepDiacriticsOnCharacters(v string) {
	o.KeepDiacriticsOnCharacters = &v
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetQueryLanguages() []string {
	if o == nil || o.QueryLanguages == nil {
		var ret []string
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetQueryLanguagesOk() ([]string, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []string and assigns it to the QueryLanguages field.
func (o *IndexSettingsAsSearchParams) SetQueryLanguages(v []string) {
	o.QueryLanguages = v
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *IndexSettingsAsSearchParams) SetDecompoundQuery(v bool) {
	o.DecompoundQuery = &v
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *IndexSettingsAsSearchParams) SetEnableRules(v bool) {
	o.EnableRules = &v
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *IndexSettingsAsSearchParams) SetEnablePersonalization(v bool) {
	o.EnablePersonalization = &v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *IndexSettingsAsSearchParams) SetQueryType(v QueryType) {
	o.QueryType = &v
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *IndexSettingsAsSearchParams) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) {
	o.RemoveWordsIfNoResults = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetMode() Mode {
	if o == nil || o.Mode == nil {
		var ret Mode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetModeOk() (*Mode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given Mode and assigns it to the Mode field.
func (o *IndexSettingsAsSearchParams) SetMode(v Mode) {
	o.Mode = &v
}

// GetSemanticSearch returns the SemanticSearch field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetSemanticSearch() IndexSettingsAsSearchParamsSemanticSearch {
	if o == nil || o.SemanticSearch == nil {
		var ret IndexSettingsAsSearchParamsSemanticSearch
		return ret
	}
	return *o.SemanticSearch
}

// GetSemanticSearchOk returns a tuple with the SemanticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetSemanticSearchOk() (*IndexSettingsAsSearchParamsSemanticSearch, bool) {
	if o == nil || o.SemanticSearch == nil {
		return nil, false
	}
	return o.SemanticSearch, true
}

// HasSemanticSearch returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasSemanticSearch() bool {
	if o != nil && o.SemanticSearch != nil {
		return true
	}

	return false
}

// SetSemanticSearch gets a reference to the given IndexSettingsAsSearchParamsSemanticSearch and assigns it to the SemanticSearch field.
func (o *IndexSettingsAsSearchParams) SetSemanticSearch(v IndexSettingsAsSearchParamsSemanticSearch) {
	o.SemanticSearch = &v
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *IndexSettingsAsSearchParams) SetAdvancedSyntax(v bool) {
	o.AdvancedSyntax = &v
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetOptionalWords() []string {
	if o == nil || o.OptionalWords == nil {
		var ret []string
		return ret
	}
	return o.OptionalWords
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetOptionalWordsOk() ([]string, bool) {
	if o == nil || o.OptionalWords == nil {
		return nil, false
	}
	return o.OptionalWords, true
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasOptionalWords() bool {
	if o != nil && o.OptionalWords != nil {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given []string and assigns it to the OptionalWords field.
func (o *IndexSettingsAsSearchParams) SetOptionalWords(v []string) {
	o.OptionalWords = v
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *IndexSettingsAsSearchParams) SetDisableExactOnAttributes(v []string) {
	o.DisableExactOnAttributes = v
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *IndexSettingsAsSearchParams) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) {
	o.ExactOnSingleWordQuery = &v
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *IndexSettingsAsSearchParams) SetAlternativesAsExact(v []AlternativesAsExact) {
	o.AlternativesAsExact = v
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *IndexSettingsAsSearchParams) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) {
	o.AdvancedSyntaxFeatures = v
}

// GetExplain returns the Explain field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetExplain() []string {
	if o == nil || o.Explain == nil {
		var ret []string
		return ret
	}
	return o.Explain
}

// GetExplainOk returns a tuple with the Explain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetExplainOk() ([]string, bool) {
	if o == nil || o.Explain == nil {
		return nil, false
	}
	return o.Explain, true
}

// HasExplain returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasExplain() bool {
	if o != nil && o.Explain != nil {
		return true
	}

	return false
}

// SetExplain gets a reference to the given []string and assigns it to the Explain field.
func (o *IndexSettingsAsSearchParams) SetExplain(v []string) {
	o.Explain = v
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *IndexSettingsAsSearchParams) SetDistinct(v Distinct) {
	o.Distinct = &v
}

// GetAttributeForDistinct returns the AttributeForDistinct field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributeForDistinct() string {
	if o == nil || o.AttributeForDistinct == nil {
		var ret string
		return ret
	}
	return *o.AttributeForDistinct
}

// GetAttributeForDistinctOk returns a tuple with the AttributeForDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributeForDistinctOk() (*string, bool) {
	if o == nil || o.AttributeForDistinct == nil {
		return nil, false
	}
	return o.AttributeForDistinct, true
}

// HasAttributeForDistinct returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributeForDistinct() bool {
	if o != nil && o.AttributeForDistinct != nil {
		return true
	}

	return false
}

// SetAttributeForDistinct gets a reference to the given string and assigns it to the AttributeForDistinct field.
func (o *IndexSettingsAsSearchParams) SetAttributeForDistinct(v string) {
	o.AttributeForDistinct = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *IndexSettingsAsSearchParams) SetSynonyms(v bool) {
	o.Synonyms = &v
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *IndexSettingsAsSearchParams) SetReplaceSynonymsInHighlight(v bool) {
	o.ReplaceSynonymsInHighlight = &v
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *IndexSettingsAsSearchParams) SetMinProximity(v int32) {
	o.MinProximity = &v
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *IndexSettingsAsSearchParams) SetResponseFields(v []string) {
	o.ResponseFields = v
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *IndexSettingsAsSearchParams) SetMaxFacetHits(v int32) {
	o.MaxFacetHits = &v
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *IndexSettingsAsSearchParams) SetAttributeCriteriaComputedByMinProximity(v bool) {
	o.AttributeCriteriaComputedByMinProximity = &v
}

// GetRenderingContent returns the RenderingContent field value if set, zero value otherwise.
func (o *IndexSettingsAsSearchParams) GetRenderingContent() RenderingContent {
	if o == nil || o.RenderingContent == nil {
		var ret RenderingContent
		return ret
	}
	return *o.RenderingContent
}

// GetRenderingContentOk returns a tuple with the RenderingContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsAsSearchParams) GetRenderingContentOk() (*RenderingContent, bool) {
	if o == nil || o.RenderingContent == nil {
		return nil, false
	}
	return o.RenderingContent, true
}

// HasRenderingContent returns a boolean if a field has been set.
func (o *IndexSettingsAsSearchParams) HasRenderingContent() bool {
	if o != nil && o.RenderingContent != nil {
		return true
	}

	return false
}

// SetRenderingContent gets a reference to the given RenderingContent and assigns it to the RenderingContent field.
func (o *IndexSettingsAsSearchParams) SetRenderingContent(v RenderingContent) {
	o.RenderingContent = &v
}

func (o IndexSettingsAsSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.AttributesForFaceting != nil {
		toSerialize["attributesForFaceting"] = o.AttributesForFaceting
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.Ranking != nil {
		toSerialize["ranking"] = o.Ranking
	}
	if o.CustomRanking != nil {
		toSerialize["customRanking"] = o.CustomRanking
	}
	if o.RelevancyStrictness != nil {
		toSerialize["relevancyStrictness"] = o.RelevancyStrictness
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.KeepDiacriticsOnCharacters != nil {
		toSerialize["keepDiacriticsOnCharacters"] = o.KeepDiacriticsOnCharacters
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.SemanticSearch != nil {
		toSerialize["semanticSearch"] = o.SemanticSearch
	}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.OptionalWords != nil {
		toSerialize["optionalWords"] = o.OptionalWords
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.Explain != nil {
		toSerialize["explain"] = o.Explain
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.AttributeForDistinct != nil {
		toSerialize["attributeForDistinct"] = o.AttributeForDistinct
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.RenderingContent != nil {
		toSerialize["renderingContent"] = o.RenderingContent
	}
	return json.Marshal(toSerialize)
}

func (o IndexSettingsAsSearchParams) String() string {
	out := ""
	out += fmt.Sprintf("  attributesForFaceting=%v\n", o.AttributesForFaceting)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  ranking=%v\n", o.Ranking)
	out += fmt.Sprintf("  customRanking=%v\n", o.CustomRanking)
	out += fmt.Sprintf("  relevancyStrictness=%v\n", o.RelevancyStrictness)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  keepDiacriticsOnCharacters=%v\n", o.KeepDiacriticsOnCharacters)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  mode=%v\n", o.Mode)
	out += fmt.Sprintf("  semanticSearch=%v\n", o.SemanticSearch)
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  explain=%v\n", o.Explain)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  attributeForDistinct=%v\n", o.AttributeForDistinct)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  renderingContent=%v\n", o.RenderingContent)
	return fmt.Sprintf("IndexSettingsAsSearchParams {\n%s}", out)
}

type NullableIndexSettingsAsSearchParams struct {
	value *IndexSettingsAsSearchParams
	isSet bool
}

func (v NullableIndexSettingsAsSearchParams) Get() *IndexSettingsAsSearchParams {
	return v.value
}

func (v *NullableIndexSettingsAsSearchParams) Set(val *IndexSettingsAsSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexSettingsAsSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexSettingsAsSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexSettingsAsSearchParams(val *IndexSettingsAsSearchParams) *NullableIndexSettingsAsSearchParams {
	return &NullableIndexSettingsAsSearchParams{value: val, isSet: true}
}

func (v NullableIndexSettingsAsSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexSettingsAsSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
