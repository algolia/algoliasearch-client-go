// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// AutoFacetFilter Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.
type AutoFacetFilter struct {
	// Facet attribute.
	Facet *string `json:"facet,omitempty"`
	// Whether the filter is negative. If true, recommendations must not have the same value for the `facet` attribute. If false, recommendations must have the same value for the `facet` attribute.
	Negative *bool `json:"negative,omitempty"`
}

type AutoFacetFilterOption func(f *AutoFacetFilter)

func WithAutoFacetFilterFacet(val string) AutoFacetFilterOption {
	return func(f *AutoFacetFilter) {
		f.Facet = &val
	}
}

func WithAutoFacetFilterNegative(val bool) AutoFacetFilterOption {
	return func(f *AutoFacetFilter) {
		f.Negative = &val
	}
}

// NewAutoFacetFilter instantiates a new AutoFacetFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewAutoFacetFilter(opts ...AutoFacetFilterOption) *AutoFacetFilter {
	this := &AutoFacetFilter{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyAutoFacetFilter return a pointer to an empty AutoFacetFilter object.
func NewEmptyAutoFacetFilter() *AutoFacetFilter {
	return &AutoFacetFilter{}
}

// GetFacet returns the Facet field value if set, zero value otherwise.
func (o *AutoFacetFilter) GetFacet() string {
	if o == nil || o.Facet == nil {
		var ret string
		return ret
	}
	return *o.Facet
}

// GetFacetOk returns a tuple with the Facet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoFacetFilter) GetFacetOk() (*string, bool) {
	if o == nil || o.Facet == nil {
		return nil, false
	}
	return o.Facet, true
}

// HasFacet returns a boolean if a field has been set.
func (o *AutoFacetFilter) HasFacet() bool {
	if o != nil && o.Facet != nil {
		return true
	}

	return false
}

// SetFacet gets a reference to the given string and assigns it to the Facet field.
func (o *AutoFacetFilter) SetFacet(v string) *AutoFacetFilter {
	o.Facet = &v
	return o
}

// GetNegative returns the Negative field value if set, zero value otherwise.
func (o *AutoFacetFilter) GetNegative() bool {
	if o == nil || o.Negative == nil {
		var ret bool
		return ret
	}
	return *o.Negative
}

// GetNegativeOk returns a tuple with the Negative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoFacetFilter) GetNegativeOk() (*bool, bool) {
	if o == nil || o.Negative == nil {
		return nil, false
	}
	return o.Negative, true
}

// HasNegative returns a boolean if a field has been set.
func (o *AutoFacetFilter) HasNegative() bool {
	if o != nil && o.Negative != nil {
		return true
	}

	return false
}

// SetNegative gets a reference to the given bool and assigns it to the Negative field.
func (o *AutoFacetFilter) SetNegative(v bool) *AutoFacetFilter {
	o.Negative = &v
	return o
}

func (o AutoFacetFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Facet != nil {
		toSerialize["facet"] = o.Facet
	}
	if o.Negative != nil {
		toSerialize["negative"] = o.Negative
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal AutoFacetFilter: %w", err)
	}

	return serialized, nil
}

func (o AutoFacetFilter) String() string {
	out := ""
	out += fmt.Sprintf("  facet=%v\n", o.Facet)
	out += fmt.Sprintf("  negative=%v\n", o.Negative)
	return fmt.Sprintf("AutoFacetFilter {\n%s}", out)
}
