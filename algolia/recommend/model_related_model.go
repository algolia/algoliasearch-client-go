// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// RelatedModel Related products or similar content model.  This model recommends items that are similar to the item with the ID `objectID`. Similarity is determined from the user interactions and attributes.
type RelatedModel string

// List of relatedModel.
const (
	RELATEDMODEL_RELATED_PRODUCTS RelatedModel = "related-products"
)

// All allowed values of RelatedModel enum.
var AllowedRelatedModelEnumValues = []RelatedModel{
	"related-products",
}

func (v *RelatedModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RelatedModel': %w", string(src), err)
	}
	enumTypeValue := RelatedModel(value)
	for _, existing := range AllowedRelatedModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelatedModel", value)
}

// NewRelatedModelFromValue returns a pointer to a valid RelatedModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRelatedModelFromValue(v string) (*RelatedModel, error) {
	ev := RelatedModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelatedModel: valid values are %v", v, AllowedRelatedModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RelatedModel) IsValid() bool {
	for _, existing := range AllowedRelatedModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to relatedModel value.
func (v RelatedModel) Ptr() *RelatedModel {
	return &v
}

type NullableRelatedModel struct {
	value *RelatedModel
	isSet bool
}

func (v NullableRelatedModel) Get() *RelatedModel {
	return v.value
}

func (v *NullableRelatedModel) Set(val *RelatedModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedModel(val *RelatedModel) *NullableRelatedModel {
	return &NullableRelatedModel{value: val, isSet: true}
}

func (v NullableRelatedModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRelatedModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
