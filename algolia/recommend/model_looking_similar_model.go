// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// LookingSimilarModel Looking similar model.  This model recommends items that look similar to the item with the ID `objectID` based on image attributes in your index.
type LookingSimilarModel string

// List of lookingSimilarModel.
const (
	LOOKING_SIMILAR_MODEL_LOOKING_SIMILAR LookingSimilarModel = "looking-similar"
)

// All allowed values of LookingSimilarModel enum.
var AllowedLookingSimilarModelEnumValues = []LookingSimilarModel{
	"looking-similar",
}

func (v *LookingSimilarModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'LookingSimilarModel': %w", string(src), err)
	}
	enumTypeValue := LookingSimilarModel(value)
	for _, existing := range AllowedLookingSimilarModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LookingSimilarModel", value)
}

// NewLookingSimilarModelFromValue returns a pointer to a valid LookingSimilarModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewLookingSimilarModelFromValue(v string) (*LookingSimilarModel, error) {
	ev := LookingSimilarModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LookingSimilarModel: valid values are %v", v, AllowedLookingSimilarModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v LookingSimilarModel) IsValid() bool {
	for _, existing := range AllowedLookingSimilarModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to lookingSimilarModel value.
func (v LookingSimilarModel) Ptr() *LookingSimilarModel {
	return &v
}
