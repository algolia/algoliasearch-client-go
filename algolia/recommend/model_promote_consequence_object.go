// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// PromoteConsequenceObject Object ID and position of the recommendation you want to pin.
type PromoteConsequenceObject struct {
	// Unique record identifier.
	ObjectID *string `json:"objectID,omitempty"`
	// Index in the list of recommendations where to place this item.
	Position *int32 `json:"position,omitempty"`
}

type PromoteConsequenceObjectOption func(f *PromoteConsequenceObject)

func WithPromoteConsequenceObjectObjectID(val string) PromoteConsequenceObjectOption {
	return func(f *PromoteConsequenceObject) {
		f.ObjectID = &val
	}
}

func WithPromoteConsequenceObjectPosition(val int32) PromoteConsequenceObjectOption {
	return func(f *PromoteConsequenceObject) {
		f.Position = &val
	}
}

// NewPromoteConsequenceObject instantiates a new PromoteConsequenceObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewPromoteConsequenceObject(opts ...PromoteConsequenceObjectOption) *PromoteConsequenceObject {
	this := &PromoteConsequenceObject{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyPromoteConsequenceObject return a pointer to an empty PromoteConsequenceObject object.
func NewEmptyPromoteConsequenceObject() *PromoteConsequenceObject {
	return &PromoteConsequenceObject{}
}

// GetObjectID returns the ObjectID field value if set, zero value otherwise.
func (o *PromoteConsequenceObject) GetObjectID() string {
	if o == nil || o.ObjectID == nil {
		var ret string
		return ret
	}
	return *o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromoteConsequenceObject) GetObjectIDOk() (*string, bool) {
	if o == nil || o.ObjectID == nil {
		return nil, false
	}
	return o.ObjectID, true
}

// HasObjectID returns a boolean if a field has been set.
func (o *PromoteConsequenceObject) HasObjectID() bool {
	if o != nil && o.ObjectID != nil {
		return true
	}

	return false
}

// SetObjectID gets a reference to the given string and assigns it to the ObjectID field.
func (o *PromoteConsequenceObject) SetObjectID(v string) *PromoteConsequenceObject {
	o.ObjectID = &v
	return o
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *PromoteConsequenceObject) GetPosition() int32 {
	if o == nil || o.Position == nil {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromoteConsequenceObject) GetPositionOk() (*int32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *PromoteConsequenceObject) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *PromoteConsequenceObject) SetPosition(v int32) *PromoteConsequenceObject {
	o.Position = &v
	return o
}

func (o PromoteConsequenceObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.ObjectID != nil {
		toSerialize["objectID"] = o.ObjectID
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal PromoteConsequenceObject: %w", err)
	}

	return serialized, nil
}

func (o PromoteConsequenceObject) String() string {
	out := ""
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	out += fmt.Sprintf("  position=%v\n", o.Position)
	return fmt.Sprintf("PromoteConsequenceObject {\n%s}", out)
}

type NullablePromoteConsequenceObject struct {
	value *PromoteConsequenceObject
	isSet bool
}

func (v NullablePromoteConsequenceObject) Get() *PromoteConsequenceObject {
	return v.value
}

func (v *NullablePromoteConsequenceObject) Set(val *PromoteConsequenceObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoteConsequenceObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoteConsequenceObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoteConsequenceObject(val *PromoteConsequenceObject) *NullablePromoteConsequenceObject {
	return &NullablePromoteConsequenceObject{value: val, isSet: true}
}

func (v NullablePromoteConsequenceObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullablePromoteConsequenceObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
