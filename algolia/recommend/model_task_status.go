// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// TaskStatus Task status, `published` if the task is completed, `notPublished` otherwise.
type TaskStatus string

// List of taskStatus.
const (
	TASK_STATUS_PUBLISHED     TaskStatus = "published"
	TASK_STATUS_NOT_PUBLISHED TaskStatus = "notPublished"
)

// All allowed values of TaskStatus enum.
var AllowedTaskStatusEnumValues = []TaskStatus{
	"published",
	"notPublished",
}

func (v *TaskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'TaskStatus': %w", string(src), err)
	}
	enumTypeValue := TaskStatus(value)
	for _, existing := range AllowedTaskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskStatus", value)
}

// NewTaskStatusFromValue returns a pointer to a valid TaskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewTaskStatusFromValue(v string) (*TaskStatus, error) {
	ev := TaskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskStatus: valid values are %v", v, AllowedTaskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v TaskStatus) IsValid() bool {
	for _, existing := range AllowedTaskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to taskStatus value.
func (v TaskStatus) Ptr() *TaskStatus {
	return &v
}
