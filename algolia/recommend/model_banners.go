// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// Banners banners defined in the merchandising studio for the given search.
type Banners struct {
	Banners *Banner `json:"banners,omitempty"`
}

type BannersOption func(f *Banners)

func WithBannersBanners(val Banner) BannersOption {
	return func(f *Banners) {
		f.Banners = &val
	}
}

// NewBanners instantiates a new Banners object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewBanners(opts ...BannersOption) *Banners {
	this := &Banners{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyBanners return a pointer to an empty Banners object.
func NewEmptyBanners() *Banners {
	return &Banners{}
}

// GetBanners returns the Banners field value if set, zero value otherwise.
func (o *Banners) GetBanners() Banner {
	if o == nil || o.Banners == nil {
		var ret Banner
		return ret
	}
	return *o.Banners
}

// GetBannersOk returns a tuple with the Banners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Banners) GetBannersOk() (*Banner, bool) {
	if o == nil || o.Banners == nil {
		return nil, false
	}
	return o.Banners, true
}

// HasBanners returns a boolean if a field has been set.
func (o *Banners) HasBanners() bool {
	if o != nil && o.Banners != nil {
		return true
	}

	return false
}

// SetBanners gets a reference to the given Banner and assigns it to the Banners field.
func (o *Banners) SetBanners(v *Banner) *Banners {
	o.Banners = v
	return o
}

func (o Banners) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Banners != nil {
		toSerialize["banners"] = o.Banners
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Banners: %w", err)
	}

	return serialized, nil
}

func (o Banners) String() string {
	out := ""
	out += fmt.Sprintf("  banners=%v\n", o.Banners)
	return fmt.Sprintf("Banners {\n%s}", out)
}
