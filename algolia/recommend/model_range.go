// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// ModelRange Range object with lower and upper values in meters to define custom ranges.
type ModelRange struct {
	// Lower boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.
	From *int32 `json:"from,omitempty"`
	// Upper boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.
	Value *int32 `json:"value,omitempty"`
}

type ModelRangeOption func(f *ModelRange)

func WithModelRangeFrom(val int32) ModelRangeOption {
	return func(f *ModelRange) {
		f.From = &val
	}
}

func WithModelRangeValue(val int32) ModelRangeOption {
	return func(f *ModelRange) {
		f.Value = &val
	}
}

// NewModelRange instantiates a new ModelRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewModelRange(opts ...ModelRangeOption) *ModelRange {
	this := &ModelRange{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyModelRange return a pointer to an empty ModelRange object.
func NewEmptyModelRange() *ModelRange {
	return &ModelRange{}
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ModelRange) GetFrom() int32 {
	if o == nil || o.From == nil {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRange) GetFromOk() (*int32, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ModelRange) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *ModelRange) SetFrom(v int32) *ModelRange {
	o.From = &v
	return o
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelRange) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRange) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelRange) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *ModelRange) SetValue(v int32) *ModelRange {
	o.Value = &v
	return o
}

func (o ModelRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ModelRange: %w", err)
	}

	return serialized, nil
}

func (o ModelRange) String() string {
	out := ""
	out += fmt.Sprintf("  from=%v\n", o.From)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	return fmt.Sprintf("ModelRange {\n%s}", out)
}
