// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// HideConsequenceObject Object ID of the recommendation you want to exclude.
type HideConsequenceObject struct {
	// Unique record identifier.
	ObjectID *string `json:"objectID,omitempty"`
}

type HideConsequenceObjectOption func(f *HideConsequenceObject)

func WithHideConsequenceObjectObjectID(val string) HideConsequenceObjectOption {
	return func(f *HideConsequenceObject) {
		f.ObjectID = &val
	}
}

// NewHideConsequenceObject instantiates a new HideConsequenceObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewHideConsequenceObject(opts ...HideConsequenceObjectOption) *HideConsequenceObject {
	this := &HideConsequenceObject{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyHideConsequenceObject return a pointer to an empty HideConsequenceObject object.
func NewEmptyHideConsequenceObject() *HideConsequenceObject {
	return &HideConsequenceObject{}
}

// GetObjectID returns the ObjectID field value if set, zero value otherwise.
func (o *HideConsequenceObject) GetObjectID() string {
	if o == nil || o.ObjectID == nil {
		var ret string
		return ret
	}
	return *o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HideConsequenceObject) GetObjectIDOk() (*string, bool) {
	if o == nil || o.ObjectID == nil {
		return nil, false
	}
	return o.ObjectID, true
}

// HasObjectID returns a boolean if a field has been set.
func (o *HideConsequenceObject) HasObjectID() bool {
	if o != nil && o.ObjectID != nil {
		return true
	}

	return false
}

// SetObjectID gets a reference to the given string and assigns it to the ObjectID field.
func (o *HideConsequenceObject) SetObjectID(v string) *HideConsequenceObject {
	o.ObjectID = &v
	return o
}

func (o HideConsequenceObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.ObjectID != nil {
		toSerialize["objectID"] = o.ObjectID
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal HideConsequenceObject: %w", err)
	}

	return serialized, nil
}

func (o HideConsequenceObject) String() string {
	out := ""
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	return fmt.Sprintf("HideConsequenceObject {\n%s}", out)
}

type NullableHideConsequenceObject struct {
	value *HideConsequenceObject
	isSet bool
}

func (v NullableHideConsequenceObject) Get() *HideConsequenceObject {
	return v.value
}

func (v *NullableHideConsequenceObject) Set(val *HideConsequenceObject) {
	v.value = val
	v.isSet = true
}

func (v NullableHideConsequenceObject) IsSet() bool {
	return v.isSet
}

func (v *NullableHideConsequenceObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHideConsequenceObject(val *HideConsequenceObject) *NullableHideConsequenceObject {
	return &NullableHideConsequenceObject{value: val, isSet: true}
}

func (v NullableHideConsequenceObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableHideConsequenceObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
