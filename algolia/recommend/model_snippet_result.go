// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// SnippetResult - struct for SnippetResult.
type SnippetResult struct {
	SnippetResultOption         *SnippetResultOption
	ArrayOfSnippetResult        *[]SnippetResult
	MapmapOfStringSnippetResult *map[string]SnippetResult
}

// SnippetResultOptionAsSnippetResult is a convenience function that returns SnippetResultOption wrapped in SnippetResult.
func SnippetResultOptionAsSnippetResult(v *SnippetResultOption) *SnippetResult {
	return &SnippetResult{
		SnippetResultOption: v,
	}
}

// map[string]SnippetResultAsSnippetResult is a convenience function that returns map[string]SnippetResult wrapped in SnippetResult.
func MapmapOfStringSnippetResultAsSnippetResult(v map[string]SnippetResult) *SnippetResult {
	return &SnippetResult{
		MapmapOfStringSnippetResult: &v,
	}
}

// []SnippetResultAsSnippetResult is a convenience function that returns []SnippetResult wrapped in SnippetResult.
func ArrayOfSnippetResultAsSnippetResult(v []SnippetResult) *SnippetResult {
	return &SnippetResult{
		ArrayOfSnippetResult: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *SnippetResult) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "matchLevel") {
		// try to unmarshal data into SnippetResultOption
		err = newStrictDecoder(data).Decode(&dst.SnippetResultOption)
		if err == nil && validateStruct(dst.SnippetResultOption) == nil {
			return nil // found the correct type
		} else {
			dst.SnippetResultOption = nil
		}
	}
	// try to unmarshal data into MapmapOfStringSnippetResult
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringSnippetResult)
	if err == nil && validateStruct(dst.MapmapOfStringSnippetResult) == nil {
		return nil // found the correct type
	} else {
		dst.MapmapOfStringSnippetResult = nil
	}
	// try to unmarshal data into ArrayOfSnippetResult
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSnippetResult)
	if err == nil && validateStruct(dst.ArrayOfSnippetResult) == nil {
		return nil // found the correct type
	} else {
		dst.ArrayOfSnippetResult = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(SnippetResult)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src SnippetResult) MarshalJSON() ([]byte, error) {
	if src.SnippetResultOption != nil {
		serialized, err := json.Marshal(&src.SnippetResultOption)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SnippetResultOption of SnippetResult: %w", err)
		}

		return serialized, nil
	}

	if src.ArrayOfSnippetResult != nil {
		serialized, err := json.Marshal(&src.ArrayOfSnippetResult)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ArrayOfSnippetResult of SnippetResult: %w", err)
		}

		return serialized, nil
	}

	if src.MapmapOfStringSnippetResult != nil {
		serialized, err := json.Marshal(&src.MapmapOfStringSnippetResult)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of MapmapOfStringSnippetResult of SnippetResult: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj SnippetResult) GetActualInstance() any {
	if obj.SnippetResultOption != nil {
		return *obj.SnippetResultOption
	}

	if obj.ArrayOfSnippetResult != nil {
		return *obj.ArrayOfSnippetResult
	}

	if obj.MapmapOfStringSnippetResult != nil {
		return *obj.MapmapOfStringSnippetResult
	}

	// all schemas are nil
	return nil
}
