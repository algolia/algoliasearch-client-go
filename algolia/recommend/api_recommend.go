// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

type Option struct {
	optionType string
	name       string
	value      string
}

func QueryParamOption(name string, val any) Option {
	return Option{
		optionType: "query",
		name:       queryParameterToString(name),
		value:      queryParameterToString(val),
	}
}

func HeaderParamOption(name string, val any) Option {
	return Option{
		optionType: "header",
		name:       name,
		value:      parameterToString(val),
	}
}

func (r *ApiCustomDeleteRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomDeleteRequest represents the request with all the parameters for the API call.
type ApiCustomDeleteRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomDeleteRequest creates an instance of the ApiCustomDeleteRequest to be used for the API call.
func (c *APIClient) NewApiCustomDeleteRequest(path string) ApiCustomDeleteRequest {
	return ApiCustomDeleteRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomDeleteRequest and returns the request for chaining.
func (r ApiCustomDeleteRequest) WithParameters(parameters map[string]any) ApiCustomDeleteRequest {
	r.parameters = parameters
	return r
}

/*
CustomDelete calls the API and returns the raw response from it.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomDeleteRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomDeleteWithHTTPInfo(ctx context.Context, r ApiCustomDeleteRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", parameterToString(r.path))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomDelete`.")
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			queryParams.Set(k, queryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodDelete, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomDelete wraps CustomDeleteWithContext using context.Background.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomDeleteRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomDelete(r ApiCustomDeleteRequest, opts ...Option) (*map[string]any, error) {
	return c.CustomDeleteWithContext(context.Background(), r, opts...)
}

/*
CustomDelete casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomDeleteRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomDeleteWithContext(ctx context.Context, r ApiCustomDeleteRequest, opts ...Option) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomDeleteWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomGetRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomGetRequest represents the request with all the parameters for the API call.
type ApiCustomGetRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomGetRequest creates an instance of the ApiCustomGetRequest to be used for the API call.
func (c *APIClient) NewApiCustomGetRequest(path string) ApiCustomGetRequest {
	return ApiCustomGetRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomGetRequest and returns the request for chaining.
func (r ApiCustomGetRequest) WithParameters(parameters map[string]any) ApiCustomGetRequest {
	r.parameters = parameters
	return r
}

/*
CustomGet calls the API and returns the raw response from it.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomGetRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomGetWithHTTPInfo(ctx context.Context, r ApiCustomGetRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", parameterToString(r.path))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomGet`.")
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			queryParams.Set(k, queryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomGet wraps CustomGetWithContext using context.Background.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomGetRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomGet(r ApiCustomGetRequest, opts ...Option) (*map[string]any, error) {
	return c.CustomGetWithContext(context.Background(), r, opts...)
}

/*
CustomGet casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomGetRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomGetWithContext(ctx context.Context, r ApiCustomGetRequest, opts ...Option) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomGetWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPostRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPostRequest represents the request with all the parameters for the API call.
type ApiCustomPostRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPostRequest creates an instance of the ApiCustomPostRequest to be used for the API call.
func (c *APIClient) NewApiCustomPostRequest(path string) ApiCustomPostRequest {
	return ApiCustomPostRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithParameters(parameters map[string]any) ApiCustomPostRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithBody(body map[string]any) ApiCustomPostRequest {
	r.body = body
	return r
}

/*
CustomPost calls the API and returns the raw response from it.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPostRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPostWithHTTPInfo(ctx context.Context, r ApiCustomPostRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", parameterToString(r.path))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPost`.")
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			queryParams.Set(k, queryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPost wraps CustomPostWithContext using context.Background.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPostRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPost(r ApiCustomPostRequest, opts ...Option) (*map[string]any, error) {
	return c.CustomPostWithContext(context.Background(), r, opts...)
}

/*
CustomPost casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPostRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPostWithContext(ctx context.Context, r ApiCustomPostRequest, opts ...Option) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPostWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPutRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPutRequest represents the request with all the parameters for the API call.
type ApiCustomPutRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPutRequest creates an instance of the ApiCustomPutRequest to be used for the API call.
func (c *APIClient) NewApiCustomPutRequest(path string) ApiCustomPutRequest {
	return ApiCustomPutRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithParameters(parameters map[string]any) ApiCustomPutRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithBody(body map[string]any) ApiCustomPutRequest {
	r.body = body
	return r
}

/*
CustomPut calls the API and returns the raw response from it.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPutRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPutWithHTTPInfo(ctx context.Context, r ApiCustomPutRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", parameterToString(r.path))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPut`.")
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			queryParams.Set(k, queryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(ctx, requestPath, http.MethodPut, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPut wraps CustomPutWithContext using context.Background.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPutRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPut(r ApiCustomPutRequest, opts ...Option) (*map[string]any, error) {
	return c.CustomPutWithContext(context.Background(), r, opts...)
}

/*
CustomPut casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPutRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPutWithContext(ctx context.Context, r ApiCustomPutRequest, opts ...Option) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPutWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiDeleteRecommendRuleRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}
	if v, ok := req["model"]; ok {
		err = json.Unmarshal(v, &r.model)
		if err != nil {
			err = json.Unmarshal(b, &r.model)
			if err != nil {
				return fmt.Errorf("cannot unmarshal model: %w", err)
			}
		}
	}
	if v, ok := req["objectID"]; ok {
		err = json.Unmarshal(v, &r.objectID)
		if err != nil {
			err = json.Unmarshal(b, &r.objectID)
			if err != nil {
				return fmt.Errorf("cannot unmarshal objectID: %w", err)
			}
		}
	}

	return nil
}

// ApiDeleteRecommendRuleRequest represents the request with all the parameters for the API call.
type ApiDeleteRecommendRuleRequest struct {
	indexName string
	model     RecommendModels
	objectID  string
}

// NewApiDeleteRecommendRuleRequest creates an instance of the ApiDeleteRecommendRuleRequest to be used for the API call.
func (c *APIClient) NewApiDeleteRecommendRuleRequest(indexName string, model RecommendModels, objectID string) ApiDeleteRecommendRuleRequest {
	return ApiDeleteRecommendRuleRequest{
		indexName: indexName,
		model:     model,
		objectID:  objectID,
	}
}

/*
DeleteRecommendRule calls the API and returns the raw response from it.

Deletes a Recommend rule from a recommendation scenario.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiDeleteRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return DeletedAtResponse
*/
func (c *APIClient) DeleteRecommendRuleWithHTTPInfo(ctx context.Context, r ApiDeleteRecommendRuleRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/1/indexes/{indexName}/{model}/recommend/rules/{objectID}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(parameterToString(r.indexName)))
	requestPath = strings.ReplaceAll(requestPath, "{model}", url.PathEscape(parameterToString(r.model)))
	requestPath = strings.ReplaceAll(requestPath, "{objectID}", url.PathEscape(parameterToString(r.objectID)))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `DeleteRecommendRule`.")
	}

	if r.objectID == "" {
		return nil, nil, reportError("Parameter `objectID` is required when calling `DeleteRecommendRule`.")
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodDelete, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
DeleteRecommendRule wraps DeleteRecommendRuleWithContext using context.Background.

Deletes a Recommend rule from a recommendation scenario.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiDeleteRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return DeletedAtResponse
*/
func (c *APIClient) DeleteRecommendRule(r ApiDeleteRecommendRuleRequest, opts ...Option) (*DeletedAtResponse, error) {
	return c.DeleteRecommendRuleWithContext(context.Background(), r, opts...)
}

/*
DeleteRecommendRule casts the HTTP response body to a defined struct.

Deletes a Recommend rule from a recommendation scenario.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiDeleteRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return DeletedAtResponse
*/
func (c *APIClient) DeleteRecommendRuleWithContext(ctx context.Context, r ApiDeleteRecommendRuleRequest, opts ...Option) (*DeletedAtResponse, error) {
	var returnValue *DeletedAtResponse

	res, resBody, err := c.DeleteRecommendRuleWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetRecommendRuleRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}
	if v, ok := req["model"]; ok {
		err = json.Unmarshal(v, &r.model)
		if err != nil {
			err = json.Unmarshal(b, &r.model)
			if err != nil {
				return fmt.Errorf("cannot unmarshal model: %w", err)
			}
		}
	}
	if v, ok := req["objectID"]; ok {
		err = json.Unmarshal(v, &r.objectID)
		if err != nil {
			err = json.Unmarshal(b, &r.objectID)
			if err != nil {
				return fmt.Errorf("cannot unmarshal objectID: %w", err)
			}
		}
	}

	return nil
}

// ApiGetRecommendRuleRequest represents the request with all the parameters for the API call.
type ApiGetRecommendRuleRequest struct {
	indexName string
	model     RecommendModels
	objectID  string
}

// NewApiGetRecommendRuleRequest creates an instance of the ApiGetRecommendRuleRequest to be used for the API call.
func (c *APIClient) NewApiGetRecommendRuleRequest(indexName string, model RecommendModels, objectID string) ApiGetRecommendRuleRequest {
	return ApiGetRecommendRuleRequest{
		indexName: indexName,
		model:     model,
		objectID:  objectID,
	}
}

/*
GetRecommendRule calls the API and returns the raw response from it.

Retrieves a Recommend rule that you previously created in the Algolia dashboard.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return RecommendRule
*/
func (c *APIClient) GetRecommendRuleWithHTTPInfo(ctx context.Context, r ApiGetRecommendRuleRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/1/indexes/{indexName}/{model}/recommend/rules/{objectID}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(parameterToString(r.indexName)))
	requestPath = strings.ReplaceAll(requestPath, "{model}", url.PathEscape(parameterToString(r.model)))
	requestPath = strings.ReplaceAll(requestPath, "{objectID}", url.PathEscape(parameterToString(r.objectID)))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `GetRecommendRule`.")
	}

	if r.objectID == "" {
		return nil, nil, reportError("Parameter `objectID` is required when calling `GetRecommendRule`.")
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetRecommendRule wraps GetRecommendRuleWithContext using context.Background.

Retrieves a Recommend rule that you previously created in the Algolia dashboard.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return RecommendRule
*/
func (c *APIClient) GetRecommendRule(r ApiGetRecommendRuleRequest, opts ...Option) (*RecommendRule, error) {
	return c.GetRecommendRuleWithContext(context.Background(), r, opts...)
}

/*
GetRecommendRule casts the HTTP response body to a defined struct.

Retrieves a Recommend rule that you previously created in the Algolia dashboard.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiGetRecommendRuleRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param objectID string - Unique record identifier.
	@return RecommendRule
*/
func (c *APIClient) GetRecommendRuleWithContext(ctx context.Context, r ApiGetRecommendRuleRequest, opts ...Option) (*RecommendRule, error) {
	var returnValue *RecommendRule

	res, resBody, err := c.GetRecommendRuleWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetRecommendStatusRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}
	if v, ok := req["model"]; ok {
		err = json.Unmarshal(v, &r.model)
		if err != nil {
			err = json.Unmarshal(b, &r.model)
			if err != nil {
				return fmt.Errorf("cannot unmarshal model: %w", err)
			}
		}
	}
	if v, ok := req["taskID"]; ok {
		err = json.Unmarshal(v, &r.taskID)
		if err != nil {
			err = json.Unmarshal(b, &r.taskID)
			if err != nil {
				return fmt.Errorf("cannot unmarshal taskID: %w", err)
			}
		}
	}

	return nil
}

// ApiGetRecommendStatusRequest represents the request with all the parameters for the API call.
type ApiGetRecommendStatusRequest struct {
	indexName string
	model     RecommendModels
	taskID    int64
}

// NewApiGetRecommendStatusRequest creates an instance of the ApiGetRecommendStatusRequest to be used for the API call.
func (c *APIClient) NewApiGetRecommendStatusRequest(indexName string, model RecommendModels, taskID int64) ApiGetRecommendStatusRequest {
	return ApiGetRecommendStatusRequest{
		indexName: indexName,
		model:     model,
		taskID:    taskID,
	}
}

/*
GetRecommendStatus calls the API and returns the raw response from it.

Checks the status of a given task.

Deleting a Recommend rule is asynchronous.
When you delete a rule, a task is created on a queue and completed depending on the load on the server.
The API response includes a task ID that you can use to check the status.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiGetRecommendStatusRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param taskID int64 - Unique task identifier.
	@return GetRecommendTaskResponse
*/
func (c *APIClient) GetRecommendStatusWithHTTPInfo(ctx context.Context, r ApiGetRecommendStatusRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/1/indexes/{indexName}/{model}/task/{taskID}"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(parameterToString(r.indexName)))
	requestPath = strings.ReplaceAll(requestPath, "{model}", url.PathEscape(parameterToString(r.model)))
	requestPath = strings.ReplaceAll(requestPath, "{taskID}", url.PathEscape(parameterToString(r.taskID)))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `GetRecommendStatus`.")
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetRecommendStatus wraps GetRecommendStatusWithContext using context.Background.

Checks the status of a given task.

Deleting a Recommend rule is asynchronous.
When you delete a rule, a task is created on a queue and completed depending on the load on the server.
The API response includes a task ID that you can use to check the status.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiGetRecommendStatusRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param taskID int64 - Unique task identifier.
	@return GetRecommendTaskResponse
*/
func (c *APIClient) GetRecommendStatus(r ApiGetRecommendStatusRequest, opts ...Option) (*GetRecommendTaskResponse, error) {
	return c.GetRecommendStatusWithContext(context.Background(), r, opts...)
}

/*
GetRecommendStatus casts the HTTP response body to a defined struct.

Checks the status of a given task.

Deleting a Recommend rule is asynchronous.
When you delete a rule, a task is created on a queue and completed depending on the load on the server.
The API response includes a task ID that you can use to check the status.

Required API Key ACLs:
  - editSettings

Request can be constructed by NewApiGetRecommendStatusRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param taskID int64 - Unique task identifier.
	@return GetRecommendTaskResponse
*/
func (c *APIClient) GetRecommendStatusWithContext(ctx context.Context, r ApiGetRecommendStatusRequest, opts ...Option) (*GetRecommendTaskResponse, error) {
	var returnValue *GetRecommendTaskResponse

	res, resBody, err := c.GetRecommendStatusWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetRecommendationsRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["getRecommendationsParams"]; ok {
		err = json.Unmarshal(v, &r.getRecommendationsParams)
		if err != nil {
			err = json.Unmarshal(b, &r.getRecommendationsParams)
			if err != nil {
				return fmt.Errorf("cannot unmarshal getRecommendationsParams: %w", err)
			}
		}
	} else {
		err = json.Unmarshal(b, &r.getRecommendationsParams)
		if err != nil {
			return fmt.Errorf("cannot unmarshal body parameter getRecommendationsParams: %w", err)
		}
	}

	return nil
}

// ApiGetRecommendationsRequest represents the request with all the parameters for the API call.
type ApiGetRecommendationsRequest struct {
	getRecommendationsParams *GetRecommendationsParams
}

// NewApiGetRecommendationsRequest creates an instance of the ApiGetRecommendationsRequest to be used for the API call.
func (c *APIClient) NewApiGetRecommendationsRequest(getRecommendationsParams *GetRecommendationsParams) ApiGetRecommendationsRequest {
	return ApiGetRecommendationsRequest{
		getRecommendationsParams: getRecommendationsParams,
	}
}

/*
GetRecommendations calls the API and returns the raw response from it.

Retrieves recommendations from selected AI models.

Required API Key ACLs:
  - search

Request can be constructed by NewApiGetRecommendationsRequest with parameters below.

	@param getRecommendationsParams GetRecommendationsParams
	@return GetRecommendationsResponse
*/
func (c *APIClient) GetRecommendationsWithHTTPInfo(ctx context.Context, r ApiGetRecommendationsRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/1/indexes/*/recommendations"

	headers := make(map[string]string)
	queryParams := url.Values{}

	if r.getRecommendationsParams == nil {
		return nil, nil, reportError("Parameter `getRecommendationsParams` is required when calling `GetRecommendations`.")
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	// body params
	postBody = r.getRecommendationsParams
	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, true)
}

/*
GetRecommendations wraps GetRecommendationsWithContext using context.Background.

Retrieves recommendations from selected AI models.

Required API Key ACLs:
  - search

Request can be constructed by NewApiGetRecommendationsRequest with parameters below.

	@param getRecommendationsParams GetRecommendationsParams
	@return GetRecommendationsResponse
*/
func (c *APIClient) GetRecommendations(r ApiGetRecommendationsRequest, opts ...Option) (*GetRecommendationsResponse, error) {
	return c.GetRecommendationsWithContext(context.Background(), r, opts...)
}

/*
GetRecommendations casts the HTTP response body to a defined struct.

Retrieves recommendations from selected AI models.

Required API Key ACLs:
  - search

Request can be constructed by NewApiGetRecommendationsRequest with parameters below.

	@param getRecommendationsParams GetRecommendationsParams
	@return GetRecommendationsResponse
*/
func (c *APIClient) GetRecommendationsWithContext(ctx context.Context, r ApiGetRecommendationsRequest, opts ...Option) (*GetRecommendationsResponse, error) {
	var returnValue *GetRecommendationsResponse

	res, resBody, err := c.GetRecommendationsWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiSearchRecommendRulesRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["indexName"]; ok {
		err = json.Unmarshal(v, &r.indexName)
		if err != nil {
			err = json.Unmarshal(b, &r.indexName)
			if err != nil {
				return fmt.Errorf("cannot unmarshal indexName: %w", err)
			}
		}
	}
	if v, ok := req["model"]; ok {
		err = json.Unmarshal(v, &r.model)
		if err != nil {
			err = json.Unmarshal(b, &r.model)
			if err != nil {
				return fmt.Errorf("cannot unmarshal model: %w", err)
			}
		}
	}
	if v, ok := req["searchRecommendRulesParams"]; ok {
		err = json.Unmarshal(v, &r.searchRecommendRulesParams)
		if err != nil {
			err = json.Unmarshal(b, &r.searchRecommendRulesParams)
			if err != nil {
				return fmt.Errorf("cannot unmarshal searchRecommendRulesParams: %w", err)
			}
		}
	}

	return nil
}

// ApiSearchRecommendRulesRequest represents the request with all the parameters for the API call.
type ApiSearchRecommendRulesRequest struct {
	indexName                  string
	model                      RecommendModels
	searchRecommendRulesParams *SearchRecommendRulesParams
}

// NewApiSearchRecommendRulesRequest creates an instance of the ApiSearchRecommendRulesRequest to be used for the API call.
func (c *APIClient) NewApiSearchRecommendRulesRequest(indexName string, model RecommendModels) ApiSearchRecommendRulesRequest {
	return ApiSearchRecommendRulesRequest{
		indexName: indexName,
		model:     model,
	}
}

// WithSearchRecommendRulesParams adds the searchRecommendRulesParams to the ApiSearchRecommendRulesRequest and returns the request for chaining.
func (r ApiSearchRecommendRulesRequest) WithSearchRecommendRulesParams(searchRecommendRulesParams *SearchRecommendRulesParams) ApiSearchRecommendRulesRequest {
	r.searchRecommendRulesParams = searchRecommendRulesParams
	return r
}

/*
SearchRecommendRules calls the API and returns the raw response from it.

Searches for Recommend rules.

Use an empty query to list all rules for this recommendation scenario.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiSearchRecommendRulesRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param searchRecommendRulesParams SearchRecommendRulesParams
	@return SearchRecommendRulesResponse
*/
func (c *APIClient) SearchRecommendRulesWithHTTPInfo(ctx context.Context, r ApiSearchRecommendRulesRequest, opts ...Option) (*http.Response, []byte, error) {
	var postBody any

	requestPath := "/1/indexes/{indexName}/{model}/recommend/rules/search"
	requestPath = strings.ReplaceAll(requestPath, "{indexName}", url.PathEscape(parameterToString(r.indexName)))
	requestPath = strings.ReplaceAll(requestPath, "{model}", url.PathEscape(parameterToString(r.model)))

	headers := make(map[string]string)
	queryParams := url.Values{}
	if r.indexName == "" {
		return nil, nil, reportError("Parameter `indexName` is required when calling `SearchRecommendRules`.")
	}

	// optional params if any
	for _, opt := range opts {
		switch opt.optionType {
		case "query":
			queryParams.Set(opt.name, opt.value)
		case "header":
			headers[opt.name] = opt.value
		}
	}

	// body params
	if utils.IsNilOrEmpty(r.searchRecommendRulesParams) {
		postBody = "{}"
	} else {
		postBody = r.searchRecommendRulesParams
	}
	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, headers, queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, true)
}

/*
SearchRecommendRules wraps SearchRecommendRulesWithContext using context.Background.

Searches for Recommend rules.

Use an empty query to list all rules for this recommendation scenario.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiSearchRecommendRulesRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param searchRecommendRulesParams SearchRecommendRulesParams
	@return SearchRecommendRulesResponse
*/
func (c *APIClient) SearchRecommendRules(r ApiSearchRecommendRulesRequest, opts ...Option) (*SearchRecommendRulesResponse, error) {
	return c.SearchRecommendRulesWithContext(context.Background(), r, opts...)
}

/*
SearchRecommendRules casts the HTTP response body to a defined struct.

Searches for Recommend rules.

Use an empty query to list all rules for this recommendation scenario.

Required API Key ACLs:
  - settings

Request can be constructed by NewApiSearchRecommendRulesRequest with parameters below.

	@param indexName string - Name of the index on which to perform the operation.
	@param model RecommendModels - [Recommend model](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
	@param searchRecommendRulesParams SearchRecommendRulesParams
	@return SearchRecommendRulesResponse
*/
func (c *APIClient) SearchRecommendRulesWithContext(ctx context.Context, r ApiSearchRecommendRulesRequest, opts ...Option) (*SearchRecommendRulesResponse, error) {
	var returnValue *SearchRecommendRulesResponse

	res, resBody, err := c.SearchRecommendRulesWithHTTPInfo(ctx, r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}
