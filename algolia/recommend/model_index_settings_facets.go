// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package recommend

import (
	"encoding/json"
	"fmt"
)

// IndexSettingsFacets Order of facet names.
type IndexSettingsFacets struct {
	// Explicit order of facets or facet values.  This setting lets you always show specific facets or facet values at the top of the list.
	Order []string `json:"order,omitempty"`
}

type IndexSettingsFacetsOption func(f *IndexSettingsFacets)

func WithIndexSettingsFacetsOrder(val []string) IndexSettingsFacetsOption {
	return func(f *IndexSettingsFacets) {
		f.Order = val
	}
}

// NewIndexSettingsFacets instantiates a new IndexSettingsFacets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewIndexSettingsFacets(opts ...IndexSettingsFacetsOption) *IndexSettingsFacets {
	this := &IndexSettingsFacets{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyIndexSettingsFacets return a pointer to an empty IndexSettingsFacets object.
func NewEmptyIndexSettingsFacets() *IndexSettingsFacets {
	return &IndexSettingsFacets{}
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *IndexSettingsFacets) GetOrder() []string {
	if o == nil || o.Order == nil {
		var ret []string
		return ret
	}
	return o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexSettingsFacets) GetOrderOk() ([]string, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *IndexSettingsFacets) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given []string and assigns it to the Order field.
func (o *IndexSettingsFacets) SetOrder(v []string) *IndexSettingsFacets {
	o.Order = v
	return o
}

func (o IndexSettingsFacets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal IndexSettingsFacets: %w", err)
	}

	return serialized, nil
}

func (o IndexSettingsFacets) String() string {
	out := ""
	out += fmt.Sprintf("  order=%v\n", o.Order)
	return fmt.Sprintf("IndexSettingsFacets {\n%s}", out)
}
