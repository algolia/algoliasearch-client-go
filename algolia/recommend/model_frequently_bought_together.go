// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package recommend

import (
	"encoding/json"
	"fmt"
)

// FrequentlyBoughtTogether struct for FrequentlyBoughtTogether.
type FrequentlyBoughtTogether struct {
	Model FbtModel `json:"model"`
	// Unique record identifier.
	ObjectID string `json:"objectID"`
}

// NewFrequentlyBoughtTogether instantiates a new FrequentlyBoughtTogether object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewFrequentlyBoughtTogether(model FbtModel, objectID string) *FrequentlyBoughtTogether {
	this := &FrequentlyBoughtTogether{}
	this.Model = model
	this.ObjectID = objectID
	return this
}

// NewEmptyFrequentlyBoughtTogether return a pointer to an empty FrequentlyBoughtTogether object.
func NewEmptyFrequentlyBoughtTogether() *FrequentlyBoughtTogether {
	return &FrequentlyBoughtTogether{}
}

// GetModel returns the Model field value.
func (o *FrequentlyBoughtTogether) GetModel() FbtModel {
	if o == nil {
		var ret FbtModel
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *FrequentlyBoughtTogether) GetModelOk() (*FbtModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value.
func (o *FrequentlyBoughtTogether) SetModel(v FbtModel) *FrequentlyBoughtTogether {
	o.Model = v
	return o
}

// GetObjectID returns the ObjectID field value.
func (o *FrequentlyBoughtTogether) GetObjectID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value
// and a boolean to check if the value has been set.
func (o *FrequentlyBoughtTogether) GetObjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectID, true
}

// SetObjectID sets field value.
func (o *FrequentlyBoughtTogether) SetObjectID(v string) *FrequentlyBoughtTogether {
	o.ObjectID = v
	return o
}

func (o FrequentlyBoughtTogether) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["model"] = o.Model
	}
	if true {
		toSerialize["objectID"] = o.ObjectID
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal FrequentlyBoughtTogether: %w", err)
	}

	return serialized, nil
}

func (o FrequentlyBoughtTogether) String() string {
	out := ""
	out += fmt.Sprintf("  model=%v\n", o.Model)
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	return fmt.Sprintf("FrequentlyBoughtTogether {\n%s}", out)
}

type NullableFrequentlyBoughtTogether struct {
	value *FrequentlyBoughtTogether
	isSet bool
}

func (v NullableFrequentlyBoughtTogether) Get() *FrequentlyBoughtTogether {
	return v.value
}

func (v *NullableFrequentlyBoughtTogether) Set(val *FrequentlyBoughtTogether) {
	v.value = val
	v.isSet = true
}

func (v NullableFrequentlyBoughtTogether) IsSet() bool {
	return v.isSet
}

func (v *NullableFrequentlyBoughtTogether) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrequentlyBoughtTogether(val *FrequentlyBoughtTogether) *NullableFrequentlyBoughtTogether {
	return &NullableFrequentlyBoughtTogether{value: val, isSet: true}
}

func (v NullableFrequentlyBoughtTogether) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableFrequentlyBoughtTogether) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
