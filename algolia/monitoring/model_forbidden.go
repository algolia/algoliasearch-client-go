// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package monitoring

import (
	"encoding/json"
	"fmt"
)

// Forbidden struct for Forbidden.
type Forbidden struct {
	Reason *string `json:"reason,omitempty"`
}

type ForbiddenOption func(f *Forbidden)

func WithForbiddenReason(val string) ForbiddenOption {
	return func(f *Forbidden) {
		f.Reason = &val
	}
}

// NewForbidden instantiates a new Forbidden object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewForbidden(opts ...ForbiddenOption) *Forbidden {
	this := &Forbidden{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyForbidden return a pointer to an empty Forbidden object.
func NewEmptyForbidden() *Forbidden {
	return &Forbidden{}
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Forbidden) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forbidden) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Forbidden) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Forbidden) SetReason(v string) *Forbidden {
	o.Reason = &v
	return o
}

func (o Forbidden) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Forbidden: %w", err)
	}

	return serialized, nil
}

func (o Forbidden) String() string {
	out := ""
	out += fmt.Sprintf("  reason=%v\n", o.Reason)
	return fmt.Sprintf("Forbidden {\n%s}", out)
}
