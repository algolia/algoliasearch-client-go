// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package monitoring

import (
	"encoding/json"
	"fmt"
)

// GetInventory403Response struct for GetInventory403Response.
type GetInventory403Response struct {
	Reason *string `json:"reason,omitempty"`
}

type GetInventory403ResponseOption func(f *GetInventory403Response)

func WithGetInventory403ResponseReason(val string) GetInventory403ResponseOption {
	return func(f *GetInventory403Response) {
		f.Reason = &val
	}
}

// NewGetInventory403Response instantiates a new GetInventory403Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewGetInventory403Response(opts ...GetInventory403ResponseOption) *GetInventory403Response {
	this := &GetInventory403Response{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewGetInventory403ResponseWithDefaults instantiates a new GetInventory403Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set.
func NewGetInventory403ResponseWithDefaults() *GetInventory403Response {
	this := &GetInventory403Response{}
	return this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *GetInventory403Response) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInventory403Response) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *GetInventory403Response) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *GetInventory403Response) SetReason(v string) {
	o.Reason = &v
}

func (o GetInventory403Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

func (o GetInventory403Response) String() string {
	out := ""
	out += fmt.Sprintf("  reason=%v\n", o.Reason)
	return fmt.Sprintf("GetInventory403Response {\n%s}", out)
}

type NullableGetInventory403Response struct {
	value *GetInventory403Response
	isSet bool
}

func (v NullableGetInventory403Response) Get() *GetInventory403Response {
	return v.value
}

func (v *NullableGetInventory403Response) Set(val *GetInventory403Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInventory403Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInventory403Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInventory403Response(val *GetInventory403Response) *NullableGetInventory403Response {
	return &NullableGetInventory403Response{value: val, isSet: true}
}

func (v NullableGetInventory403Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInventory403Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
