// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package monitoring

import (
	"encoding/json"
	"fmt"
)

// Metric the model 'Metric'.
type Metric string

// List of Metric.
const (
	METRIC_AVG_BUILD_TIME     Metric = "avg_build_time"
	METRIC_SSD_USAGE          Metric = "ssd_usage"
	METRIC_RAM_SEARCH_USAGE   Metric = "ram_search_usage"
	METRIC_RAM_INDEXING_USAGE Metric = "ram_indexing_usage"
	METRIC_CPU_USAGE          Metric = "cpu_usage"
	METRIC_STAR               Metric = "*"
)

// All allowed values of Metric enum.
var AllowedMetricEnumValues = []Metric{
	"avg_build_time",
	"ssd_usage",
	"ram_search_usage",
	"ram_indexing_usage",
	"cpu_usage",
	"*",
}

func (v *Metric) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Metric': %w", string(src), err)
	}
	enumTypeValue := Metric(value)
	for _, existing := range AllowedMetricEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Metric", value)
}

// NewMetricFromValue returns a pointer to a valid Metric
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewMetricFromValue(v string) (*Metric, error) {
	ev := Metric(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Metric: valid values are %v", v, AllowedMetricEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Metric) IsValid() bool {
	for _, existing := range AllowedMetricEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Metric value.
func (v Metric) Ptr() *Metric {
	return &v
}
