// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package monitoring

import (
	"encoding/json"
	"fmt"
)

// GetServers403Response struct for GetServers403Response.
type GetServers403Response struct {
	Reason *string `json:"reason,omitempty"`
}

type GetServers403ResponseOption func(f *GetServers403Response)

func WithGetServers403ResponseReason(val string) GetServers403ResponseOption {
	return func(f *GetServers403Response) {
		f.Reason = &val
	}
}

// NewGetServers403Response instantiates a new GetServers403Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewGetServers403Response(opts ...GetServers403ResponseOption) *GetServers403Response {
	this := &GetServers403Response{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyGetServers403Response return a pointer to an empty GetServers403Response object.
func NewEmptyGetServers403Response() *GetServers403Response {
	return &GetServers403Response{}
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *GetServers403Response) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetServers403Response) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *GetServers403Response) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *GetServers403Response) SetReason(v string) *GetServers403Response {
	o.Reason = &v
	return o
}

func (o GetServers403Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal GetServers403Response: %w", err)
	}

	return serialized, nil
}

func (o GetServers403Response) String() string {
	out := ""
	out += fmt.Sprintf("  reason=%v\n", o.Reason)
	return fmt.Sprintf("GetServers403Response {\n%s}", out)
}

type NullableGetServers403Response struct {
	value *GetServers403Response
	isSet bool
}

func (v NullableGetServers403Response) Get() *GetServers403Response {
	return v.value
}

func (v *NullableGetServers403Response) Set(val *GetServers403Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServers403Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServers403Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServers403Response(val *GetServers403Response) *NullableGetServers403Response {
	return &NullableGetServers403Response{value: val, isSet: true}
}

func (v NullableGetServers403Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableGetServers403Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
