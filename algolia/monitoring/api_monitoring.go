// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package monitoring

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

func (r *ApiCustomDeleteRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomDeleteRequest represents the request with all the parameters for the API call.
type ApiCustomDeleteRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomDeleteRequest creates an instance of the ApiCustomDeleteRequest to be used for the API call.
func (c *APIClient) NewApiCustomDeleteRequest(path string) ApiCustomDeleteRequest {
	return ApiCustomDeleteRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomDeleteRequest and returns the request for chaining.
func (r ApiCustomDeleteRequest) WithParameters(parameters map[string]any) ApiCustomDeleteRequest {
	r.parameters = parameters
	return r
}

/*
CustomDelete calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomDeleteRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomDeleteWithHTTPInfo(r ApiCustomDeleteRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomDelete`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodDelete, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomDelete casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomDeleteRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomDelete(r ApiCustomDeleteRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomDeleteWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomGetRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomGetRequest represents the request with all the parameters for the API call.
type ApiCustomGetRequest struct {
	path       string
	parameters map[string]any
}

// NewApiCustomGetRequest creates an instance of the ApiCustomGetRequest to be used for the API call.
func (c *APIClient) NewApiCustomGetRequest(path string) ApiCustomGetRequest {
	return ApiCustomGetRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomGetRequest and returns the request for chaining.
func (r ApiCustomGetRequest) WithParameters(parameters map[string]any) ApiCustomGetRequest {
	r.parameters = parameters
	return r
}

/*
CustomGet calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomGetRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomGetWithHTTPInfo(r ApiCustomGetRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomGet`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomGet casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomGetRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@return map[string]any
*/
func (c *APIClient) CustomGet(r ApiCustomGetRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomGetWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPostRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPostRequest represents the request with all the parameters for the API call.
type ApiCustomPostRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPostRequest creates an instance of the ApiCustomPostRequest to be used for the API call.
func (c *APIClient) NewApiCustomPostRequest(path string) ApiCustomPostRequest {
	return ApiCustomPostRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithParameters(parameters map[string]any) ApiCustomPostRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPostRequest and returns the request for chaining.
func (r ApiCustomPostRequest) WithBody(body map[string]any) ApiCustomPostRequest {
	r.body = body
	return r
}

/*
CustomPost calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomPostRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	  @param body map[string]any - Parameters to send with the custom request.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomPostWithHTTPInfo(r ApiCustomPostRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPost`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPost, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPost casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPostRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPost(r ApiCustomPostRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPostWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiCustomPutRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["path"]; ok {
		err = json.Unmarshal(v, &r.path)
		if err != nil {
			err = json.Unmarshal(b, &r.path)
			if err != nil {
				return fmt.Errorf("cannot unmarshal path: %w", err)
			}
		}
	}
	if v, ok := req["parameters"]; ok {
		err = json.Unmarshal(v, &r.parameters)
		if err != nil {
			err = json.Unmarshal(b, &r.parameters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal parameters: %w", err)
			}
		}
	}
	if v, ok := req["body"]; ok {
		err = json.Unmarshal(v, &r.body)
		if err != nil {
			err = json.Unmarshal(b, &r.body)
			if err != nil {
				return fmt.Errorf("cannot unmarshal body: %w", err)
			}
		}
	}

	return nil
}

// ApiCustomPutRequest represents the request with all the parameters for the API call.
type ApiCustomPutRequest struct {
	path       string
	parameters map[string]any
	body       map[string]any
}

// NewApiCustomPutRequest creates an instance of the ApiCustomPutRequest to be used for the API call.
func (c *APIClient) NewApiCustomPutRequest(path string) ApiCustomPutRequest {
	return ApiCustomPutRequest{
		path: path,
	}
}

// WithParameters adds the parameters to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithParameters(parameters map[string]any) ApiCustomPutRequest {
	r.parameters = parameters
	return r
}

// WithBody adds the body to the ApiCustomPutRequest and returns the request for chaining.
func (r ApiCustomPutRequest) WithBody(body map[string]any) ApiCustomPutRequest {
	r.body = body
	return r
}

/*
CustomPut calls the API and returns the raw response from it.

	  This method allow you to send requests to the Algolia REST API.


	Request can be constructed by NewApiCustomPutRequest with parameters below.
	  @param path string - Path of the endpoint, anything after \"/1\" must be specified.
	  @param parameters map[string]any - Query parameters to apply to the current query.
	  @param body map[string]any - Parameters to send with the custom request.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) CustomPutWithHTTPInfo(r ApiCustomPutRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(r.path))

	if r.path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPut`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(r.parameters) {
		for k, v := range r.parameters {
			options.QueryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	// body params
	if utils.IsNilOrEmpty(r.body) {
		postBody = "{}"
	} else {
		postBody = r.body
	}
	req, err := c.prepareRequest(options.Context, requestPath, http.MethodPut, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
CustomPut casts the HTTP response body to a defined struct.

This method allow you to send requests to the Algolia REST API.

Request can be constructed by NewApiCustomPutRequest with parameters below.

	@param path string - Path of the endpoint, anything after \"/1\" must be specified.
	@param parameters map[string]any - Query parameters to apply to the current query.
	@param body map[string]any - Parameters to send with the custom request.
	@return map[string]any
*/
func (c *APIClient) CustomPut(r ApiCustomPutRequest, opts ...utils.RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPutWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetClusterIncidentsRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["clusters"]; ok {
		err = json.Unmarshal(v, &r.clusters)
		if err != nil {
			err = json.Unmarshal(b, &r.clusters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal clusters: %w", err)
			}
		}
	}

	return nil
}

// ApiGetClusterIncidentsRequest represents the request with all the parameters for the API call.
type ApiGetClusterIncidentsRequest struct {
	clusters string
}

// NewApiGetClusterIncidentsRequest creates an instance of the ApiGetClusterIncidentsRequest to be used for the API call.
func (c *APIClient) NewApiGetClusterIncidentsRequest(clusters string) ApiGetClusterIncidentsRequest {
	return ApiGetClusterIncidentsRequest{
		clusters: clusters,
	}
}

/*
GetClusterIncidents calls the API and returns the raw response from it.

	  Retrieves known incidents for the selected clusters.


	Request can be constructed by NewApiGetClusterIncidentsRequest with parameters below.
	  @param clusters string - Subset of clusters, separated by comma.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetClusterIncidentsWithHTTPInfo(r ApiGetClusterIncidentsRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/incidents/{clusters}"
	requestPath = strings.ReplaceAll(requestPath, "{clusters}", url.PathEscape(utils.ParameterToString(r.clusters)))

	if r.clusters == "" {
		return nil, nil, reportError("Parameter `clusters` is required when calling `GetClusterIncidents`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetClusterIncidents casts the HTTP response body to a defined struct.

Retrieves known incidents for the selected clusters.

Request can be constructed by NewApiGetClusterIncidentsRequest with parameters below.

	@param clusters string - Subset of clusters, separated by comma.
	@return IncidentsResponse
*/
func (c *APIClient) GetClusterIncidents(r ApiGetClusterIncidentsRequest, opts ...utils.RequestOption) (*IncidentsResponse, error) {
	var returnValue *IncidentsResponse

	res, resBody, err := c.GetClusterIncidentsWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetClusterStatusRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["clusters"]; ok {
		err = json.Unmarshal(v, &r.clusters)
		if err != nil {
			err = json.Unmarshal(b, &r.clusters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal clusters: %w", err)
			}
		}
	}

	return nil
}

// ApiGetClusterStatusRequest represents the request with all the parameters for the API call.
type ApiGetClusterStatusRequest struct {
	clusters string
}

// NewApiGetClusterStatusRequest creates an instance of the ApiGetClusterStatusRequest to be used for the API call.
func (c *APIClient) NewApiGetClusterStatusRequest(clusters string) ApiGetClusterStatusRequest {
	return ApiGetClusterStatusRequest{
		clusters: clusters,
	}
}

/*
GetClusterStatus calls the API and returns the raw response from it.

	  Retrieves the status of selected clusters.


	Request can be constructed by NewApiGetClusterStatusRequest with parameters below.
	  @param clusters string - Subset of clusters, separated by comma.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetClusterStatusWithHTTPInfo(r ApiGetClusterStatusRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/status/{clusters}"
	requestPath = strings.ReplaceAll(requestPath, "{clusters}", url.PathEscape(utils.ParameterToString(r.clusters)))

	if r.clusters == "" {
		return nil, nil, reportError("Parameter `clusters` is required when calling `GetClusterStatus`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetClusterStatus casts the HTTP response body to a defined struct.

Retrieves the status of selected clusters.

Request can be constructed by NewApiGetClusterStatusRequest with parameters below.

	@param clusters string - Subset of clusters, separated by comma.
	@return StatusResponse
*/
func (c *APIClient) GetClusterStatus(r ApiGetClusterStatusRequest, opts ...utils.RequestOption) (*StatusResponse, error) {
	var returnValue *StatusResponse

	res, resBody, err := c.GetClusterStatusWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

/*
GetIncidents calls the API and returns the raw response from it.

	  Retrieves known incidents for all clusters.


	Request can be constructed by NewApiGetIncidentsRequest with parameters below.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetIncidentsWithHTTPInfo(opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/incidents"

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetIncidents casts the HTTP response body to a defined struct.

Retrieves known incidents for all clusters.

Request can be constructed by NewApiGetIncidentsRequest with parameters below.

	@return IncidentsResponse
*/
func (c *APIClient) GetIncidents(opts ...utils.RequestOption) (*IncidentsResponse, error) {
	var returnValue *IncidentsResponse

	res, resBody, err := c.GetIncidentsWithHTTPInfo(opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetIndexingTimeRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["clusters"]; ok {
		err = json.Unmarshal(v, &r.clusters)
		if err != nil {
			err = json.Unmarshal(b, &r.clusters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal clusters: %w", err)
			}
		}
	}

	return nil
}

// ApiGetIndexingTimeRequest represents the request with all the parameters for the API call.
type ApiGetIndexingTimeRequest struct {
	clusters string
}

// NewApiGetIndexingTimeRequest creates an instance of the ApiGetIndexingTimeRequest to be used for the API call.
func (c *APIClient) NewApiGetIndexingTimeRequest(clusters string) ApiGetIndexingTimeRequest {
	return ApiGetIndexingTimeRequest{
		clusters: clusters,
	}
}

/*
GetIndexingTime calls the API and returns the raw response from it.

	  Retrieves average times for indexing operations for selected clusters.


	Request can be constructed by NewApiGetIndexingTimeRequest with parameters below.
	  @param clusters string - Subset of clusters, separated by comma.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetIndexingTimeWithHTTPInfo(r ApiGetIndexingTimeRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/indexing/{clusters}"
	requestPath = strings.ReplaceAll(requestPath, "{clusters}", url.PathEscape(utils.ParameterToString(r.clusters)))

	if r.clusters == "" {
		return nil, nil, reportError("Parameter `clusters` is required when calling `GetIndexingTime`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetIndexingTime casts the HTTP response body to a defined struct.

Retrieves average times for indexing operations for selected clusters.

Request can be constructed by NewApiGetIndexingTimeRequest with parameters below.

	@param clusters string - Subset of clusters, separated by comma.
	@return IndexingTimeResponse
*/
func (c *APIClient) GetIndexingTime(r ApiGetIndexingTimeRequest, opts ...utils.RequestOption) (*IndexingTimeResponse, error) {
	var returnValue *IndexingTimeResponse

	res, resBody, err := c.GetIndexingTimeWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetLatencyRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["clusters"]; ok {
		err = json.Unmarshal(v, &r.clusters)
		if err != nil {
			err = json.Unmarshal(b, &r.clusters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal clusters: %w", err)
			}
		}
	}

	return nil
}

// ApiGetLatencyRequest represents the request with all the parameters for the API call.
type ApiGetLatencyRequest struct {
	clusters string
}

// NewApiGetLatencyRequest creates an instance of the ApiGetLatencyRequest to be used for the API call.
func (c *APIClient) NewApiGetLatencyRequest(clusters string) ApiGetLatencyRequest {
	return ApiGetLatencyRequest{
		clusters: clusters,
	}
}

/*
GetLatency calls the API and returns the raw response from it.

	  Retrieves the average latency for search requests for selected clusters.


	Request can be constructed by NewApiGetLatencyRequest with parameters below.
	  @param clusters string - Subset of clusters, separated by comma.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetLatencyWithHTTPInfo(r ApiGetLatencyRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/latency/{clusters}"
	requestPath = strings.ReplaceAll(requestPath, "{clusters}", url.PathEscape(utils.ParameterToString(r.clusters)))

	if r.clusters == "" {
		return nil, nil, reportError("Parameter `clusters` is required when calling `GetLatency`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetLatency casts the HTTP response body to a defined struct.

Retrieves the average latency for search requests for selected clusters.

Request can be constructed by NewApiGetLatencyRequest with parameters below.

	@param clusters string - Subset of clusters, separated by comma.
	@return LatencyResponse
*/
func (c *APIClient) GetLatency(r ApiGetLatencyRequest, opts ...utils.RequestOption) (*LatencyResponse, error) {
	var returnValue *LatencyResponse

	res, resBody, err := c.GetLatencyWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetMetricsRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["metric"]; ok {
		err = json.Unmarshal(v, &r.metric)
		if err != nil {
			err = json.Unmarshal(b, &r.metric)
			if err != nil {
				return fmt.Errorf("cannot unmarshal metric: %w", err)
			}
		}
	}
	if v, ok := req["period"]; ok {
		err = json.Unmarshal(v, &r.period)
		if err != nil {
			err = json.Unmarshal(b, &r.period)
			if err != nil {
				return fmt.Errorf("cannot unmarshal period: %w", err)
			}
		}
	}

	return nil
}

// ApiGetMetricsRequest represents the request with all the parameters for the API call.
type ApiGetMetricsRequest struct {
	metric Metric
	period Period
}

// NewApiGetMetricsRequest creates an instance of the ApiGetMetricsRequest to be used for the API call.
func (c *APIClient) NewApiGetMetricsRequest(metric Metric, period Period) ApiGetMetricsRequest {
	return ApiGetMetricsRequest{
		metric: metric,
		period: period,
	}
}

/*
GetMetrics calls the API and returns the raw response from it.

	Retrieves metrics related to your Algolia infrastructure, aggregated over a selected time window.

Access to this API is available as part of the [Premium or Elevate plans](https://www.algolia.com/pricing).
You must authenticate requests with the `x-algolia-application-id` and `x-algolia-api-key` headers (using the Monitoring API key).

	Request can be constructed by NewApiGetMetricsRequest with parameters below.
	  @param metric Metric - Metric to report.  For more information about the individual metrics, see the description of the API response. To include all metrics, use `*`.
	  @param period Period - Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetMetricsWithHTTPInfo(r ApiGetMetricsRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/infrastructure/{metric}/period/{period}"
	requestPath = strings.ReplaceAll(requestPath, "{metric}", url.PathEscape(utils.ParameterToString(r.metric)))
	requestPath = strings.ReplaceAll(requestPath, "{period}", url.PathEscape(utils.ParameterToString(r.period)))

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetMetrics casts the HTTP response body to a defined struct.

Retrieves metrics related to your Algolia infrastructure, aggregated over a selected time window.

Access to this API is available as part of the [Premium or Elevate plans](https://www.algolia.com/pricing).
You must authenticate requests with the `x-algolia-application-id` and `x-algolia-api-key` headers (using the Monitoring API key).

Request can be constructed by NewApiGetMetricsRequest with parameters below.

	@param metric Metric - Metric to report.  For more information about the individual metrics, see the description of the API response. To include all metrics, use `*`.
	@param period Period - Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.
	@return InfrastructureResponse
*/
func (c *APIClient) GetMetrics(r ApiGetMetricsRequest, opts ...utils.RequestOption) (*InfrastructureResponse, error) {
	var returnValue *InfrastructureResponse

	res, resBody, err := c.GetMetricsWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

func (r *ApiGetReachabilityRequest) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
	if v, ok := req["clusters"]; ok {
		err = json.Unmarshal(v, &r.clusters)
		if err != nil {
			err = json.Unmarshal(b, &r.clusters)
			if err != nil {
				return fmt.Errorf("cannot unmarshal clusters: %w", err)
			}
		}
	}

	return nil
}

// ApiGetReachabilityRequest represents the request with all the parameters for the API call.
type ApiGetReachabilityRequest struct {
	clusters string
}

// NewApiGetReachabilityRequest creates an instance of the ApiGetReachabilityRequest to be used for the API call.
func (c *APIClient) NewApiGetReachabilityRequest(clusters string) ApiGetReachabilityRequest {
	return ApiGetReachabilityRequest{
		clusters: clusters,
	}
}

/*
GetReachability calls the API and returns the raw response from it.

	  Test whether clusters are reachable or not.


	Request can be constructed by NewApiGetReachabilityRequest with parameters below.
	  @param clusters string - Subset of clusters, separated by comma.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetReachabilityWithHTTPInfo(r ApiGetReachabilityRequest, opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/reachability/{clusters}/probes"
	requestPath = strings.ReplaceAll(requestPath, "{clusters}", url.PathEscape(utils.ParameterToString(r.clusters)))

	if r.clusters == "" {
		return nil, nil, reportError("Parameter `clusters` is required when calling `GetReachability`.")
	}

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetReachability casts the HTTP response body to a defined struct.

Test whether clusters are reachable or not.

Request can be constructed by NewApiGetReachabilityRequest with parameters below.

	@param clusters string - Subset of clusters, separated by comma.
	@return map[string]map[string]bool
*/
func (c *APIClient) GetReachability(r ApiGetReachabilityRequest, opts ...utils.RequestOption) (*map[string]map[string]bool, error) {
	var returnValue *map[string]map[string]bool

	res, resBody, err := c.GetReachabilityWithHTTPInfo(r, opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

/*
GetServers calls the API and returns the raw response from it.

	Retrieves the servers that belong to clusters.

The response depends on whether you authenticate your API request:

- With authentication, the response lists the servers assigned to your
Algolia application's cluster.

- Without authentication, the response lists the servers for all Algolia
clusters.

	Request can be constructed by NewApiGetServersRequest with parameters below.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetServersWithHTTPInfo(opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/inventory/servers"

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetServers casts the HTTP response body to a defined struct.

Retrieves the servers that belong to clusters.

The response depends on whether you authenticate your API request:

- With authentication, the response lists the servers assigned to your
Algolia application's cluster.

- Without authentication, the response lists the servers for all Algolia
clusters.

Request can be constructed by NewApiGetServersRequest with parameters below.

	@return InventoryResponse
*/
func (c *APIClient) GetServers(opts ...utils.RequestOption) (*InventoryResponse, error) {
	var returnValue *InventoryResponse

	res, resBody, err := c.GetServersWithHTTPInfo(opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

/*
GetStatus calls the API and returns the raw response from it.

	  Retrieves the status of all Algolia clusters and instances.


	Request can be constructed by NewApiGetStatusRequest with parameters below.
	@param opts ...Option - Optional parameters for the API call
	@return *http.Response - The raw response from the API
	@return []byte - The raw response body from the API
	@return error - An error if the API call fails
*/
func (c *APIClient) GetStatusWithHTTPInfo(opts ...utils.RequestOption) (*http.Response, []byte, error) {
	requestPath := "/1/status"

	options := utils.Options{
		Context:      context.Background(),
		QueryParams:  url.Values{},
		HeaderParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.Apply(&options)
	}

	var postBody any

	req, err := c.prepareRequest(options.Context, requestPath, http.MethodGet, postBody, options.HeaderParams, options.QueryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false)
}

/*
GetStatus casts the HTTP response body to a defined struct.

Retrieves the status of all Algolia clusters and instances.

Request can be constructed by NewApiGetStatusRequest with parameters below.

	@return StatusResponse
*/
func (c *APIClient) GetStatus(opts ...utils.RequestOption) (*StatusResponse, error) {
	var returnValue *StatusResponse

	res, resBody, err := c.GetStatusWithHTTPInfo(opts...)
	if err != nil {
		return returnValue, err
	}
	if res == nil {
		return returnValue, reportError("res is nil")
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
			Message: string(resBody),
			Status:  res.StatusCode,
		}

		var v ErrorBase
		err = c.decode(&v, resBody)
		if err != nil {
			newErr.Message = err.Error()
			return returnValue, newErr
		}

		return returnValue, newErr
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}
