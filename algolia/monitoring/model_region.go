// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package monitoring

import (
	"encoding/json"
	"fmt"
)

// Region Region where the cluster is located.
type Region string

// List of Region.
const (
	REGION_AU  Region = "au"
	REGION_BR  Region = "br"
	REGION_CA  Region = "ca"
	REGION_DE  Region = "de"
	REGION_EU  Region = "eu"
	REGION_HK  Region = "hk"
	REGION_IN  Region = "in"
	REGION_JP  Region = "jp"
	REGION_SG  Region = "sg"
	REGION_UAE Region = "uae"
	REGION_UK  Region = "uk"
	REGION_USC Region = "usc"
	REGION_USE Region = "use"
	REGION_USW Region = "usw"
	REGION_ZA  Region = "za"
)

// All allowed values of Region enum.
var AllowedRegionEnumValues = []Region{
	"au",
	"br",
	"ca",
	"de",
	"eu",
	"hk",
	"in",
	"jp",
	"sg",
	"uae",
	"uk",
	"usc",
	"use",
	"usw",
	"za",
}

func (v *Region) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Region': %w", string(src), err)
	}
	enumTypeValue := Region(value)
	for _, existing := range AllowedRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Region", value)
}

// NewRegionFromValue returns a pointer to a valid Region
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRegionFromValue(v string) (*Region, error) {
	ev := Region(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Region: valid values are %v", v, AllowedRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Region) IsValid() bool {
	for _, existing := range AllowedRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Region value.
func (v Region) Ptr() *Region {
	return &v
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
