// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// External struct for External.
type External struct {
	// Composition Index name.
	Index    string                        `json:"index"`
	Params   *BaseInjectionQueryParameters `json:"params,omitempty"`
	Ordering *ExternalOrdering             `json:"ordering,omitempty"`
}

type ExternalOption func(f *External)

func WithExternalParams(val BaseInjectionQueryParameters) ExternalOption {
	return func(f *External) {
		f.Params = &val
	}
}

func WithExternalOrdering(val ExternalOrdering) ExternalOption {
	return func(f *External) {
		f.Ordering = &val
	}
}

// NewExternal instantiates a new External object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewExternal(index string, opts ...ExternalOption) *External {
	this := &External{}
	this.Index = index
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyExternal return a pointer to an empty External object.
func NewEmptyExternal() *External {
	return &External{}
}

// GetIndex returns the Index field value.
func (o *External) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *External) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *External) SetIndex(v string) *External {
	o.Index = v
	return o
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *External) GetParams() BaseInjectionQueryParameters {
	if o == nil || o.Params == nil {
		var ret BaseInjectionQueryParameters
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *External) GetParamsOk() (*BaseInjectionQueryParameters, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *External) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given BaseInjectionQueryParameters and assigns it to the Params field.
func (o *External) SetParams(v *BaseInjectionQueryParameters) *External {
	o.Params = v
	return o
}

// GetOrdering returns the Ordering field value if set, zero value otherwise.
func (o *External) GetOrdering() ExternalOrdering {
	if o == nil || o.Ordering == nil {
		var ret ExternalOrdering
		return ret
	}
	return *o.Ordering
}

// GetOrderingOk returns a tuple with the Ordering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *External) GetOrderingOk() (*ExternalOrdering, bool) {
	if o == nil || o.Ordering == nil {
		return nil, false
	}
	return o.Ordering, true
}

// HasOrdering returns a boolean if a field has been set.
func (o *External) HasOrdering() bool {
	if o != nil && o.Ordering != nil {
		return true
	}

	return false
}

// SetOrdering gets a reference to the given ExternalOrdering and assigns it to the Ordering field.
func (o *External) SetOrdering(v ExternalOrdering) *External {
	o.Ordering = &v
	return o
}

func (o External) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["index"] = o.Index
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.Ordering != nil {
		toSerialize["ordering"] = o.Ordering
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal External: %w", err)
	}

	return serialized, nil
}

func (o External) String() string {
	out := ""
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  params=%v\n", o.Params)
	out += fmt.Sprintf("  ordering=%v\n", o.Ordering)
	return fmt.Sprintf("External {\n%s}", out)
}
