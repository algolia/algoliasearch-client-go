// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// InjectedItemSource - struct for InjectedItemSource.
type InjectedItemSource struct {
	ExternalSource *ExternalSource
	SearchSource   *SearchSource
}

// SearchSourceAsInjectedItemSource is a convenience function that returns SearchSource wrapped in InjectedItemSource.
func SearchSourceAsInjectedItemSource(v *SearchSource) *InjectedItemSource {
	return &InjectedItemSource{
		SearchSource: v,
	}
}

// ExternalSourceAsInjectedItemSource is a convenience function that returns ExternalSource wrapped in InjectedItemSource.
func ExternalSourceAsInjectedItemSource(v *ExternalSource) *InjectedItemSource {
	return &InjectedItemSource{
		ExternalSource: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *InjectedItemSource) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into SearchSource
	err = json.Unmarshal(data, &dst.SearchSource)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.SearchSource = nil
	}
	// try to unmarshal data into ExternalSource
	err = json.Unmarshal(data, &dst.ExternalSource)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.ExternalSource = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(InjectedItemSource)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src InjectedItemSource) MarshalJSON() ([]byte, error) {
	if src.ExternalSource != nil {
		serialized, err := json.Marshal(&src.ExternalSource)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ExternalSource of InjectedItemSource: %w", err)
		}

		return serialized, nil
	}

	if src.SearchSource != nil {
		serialized, err := json.Marshal(&src.SearchSource)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SearchSource of InjectedItemSource: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj InjectedItemSource) GetActualInstance() any {
	if obj.ExternalSource != nil {
		return *obj.ExternalSource
	}

	if obj.SearchSource != nil {
		return *obj.SearchSource
	}

	// all schemas are nil
	return nil
}
