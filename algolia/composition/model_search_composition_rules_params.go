// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// SearchCompositionRulesParams Composition Rules search parameters.
type SearchCompositionRulesParams struct {
	// Search query for rules.
	Query     *string    `json:"query,omitempty"`
	Anchoring *Anchoring `json:"anchoring,omitempty"`
	// Only return composition rules that match the context (exact match).
	Context *string `json:"context,omitempty"`
	// Requested page of the API response.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
	Page *int32 `json:"page,omitempty"`
	// Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
	HitsPerPage *int32 `json:"hitsPerPage,omitempty"`
	// If `true`, return only enabled composition rules. If `false`, return only inactive composition rules. By default, _all_ composition rules are returned.
	Enabled utils.Nullable[bool] `json:"enabled,omitempty"`
}

type SearchCompositionRulesParamsOption func(f *SearchCompositionRulesParams)

func WithSearchCompositionRulesParamsQuery(val string) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.Query = &val
	}
}

func WithSearchCompositionRulesParamsAnchoring(val Anchoring) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.Anchoring = &val
	}
}

func WithSearchCompositionRulesParamsContext(val string) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.Context = &val
	}
}

func WithSearchCompositionRulesParamsPage(val int32) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.Page = &val
	}
}

func WithSearchCompositionRulesParamsHitsPerPage(val int32) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.HitsPerPage = &val
	}
}

func WithSearchCompositionRulesParamsEnabled(val utils.Nullable[bool]) SearchCompositionRulesParamsOption {
	return func(f *SearchCompositionRulesParams) {
		f.Enabled = val
	}
}

// NewSearchCompositionRulesParams instantiates a new SearchCompositionRulesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchCompositionRulesParams(opts ...SearchCompositionRulesParamsOption) *SearchCompositionRulesParams {
	this := &SearchCompositionRulesParams{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySearchCompositionRulesParams return a pointer to an empty SearchCompositionRulesParams object.
func NewEmptySearchCompositionRulesParams() *SearchCompositionRulesParams {
	return &SearchCompositionRulesParams{}
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchCompositionRulesParams) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompositionRulesParams) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SearchCompositionRulesParams) SetQuery(v string) *SearchCompositionRulesParams {
	o.Query = &v
	return o
}

// GetAnchoring returns the Anchoring field value if set, zero value otherwise.
func (o *SearchCompositionRulesParams) GetAnchoring() Anchoring {
	if o == nil || o.Anchoring == nil {
		var ret Anchoring
		return ret
	}
	return *o.Anchoring
}

// GetAnchoringOk returns a tuple with the Anchoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompositionRulesParams) GetAnchoringOk() (*Anchoring, bool) {
	if o == nil || o.Anchoring == nil {
		return nil, false
	}
	return o.Anchoring, true
}

// HasAnchoring returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasAnchoring() bool {
	if o != nil && o.Anchoring != nil {
		return true
	}

	return false
}

// SetAnchoring gets a reference to the given Anchoring and assigns it to the Anchoring field.
func (o *SearchCompositionRulesParams) SetAnchoring(v Anchoring) *SearchCompositionRulesParams {
	o.Anchoring = &v
	return o
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SearchCompositionRulesParams) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompositionRulesParams) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *SearchCompositionRulesParams) SetContext(v string) *SearchCompositionRulesParams {
	o.Context = &v
	return o
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchCompositionRulesParams) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompositionRulesParams) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *SearchCompositionRulesParams) SetPage(v int32) *SearchCompositionRulesParams {
	o.Page = &v
	return o
}

// GetHitsPerPage returns the HitsPerPage field value if set, zero value otherwise.
func (o *SearchCompositionRulesParams) GetHitsPerPage() int32 {
	if o == nil || o.HitsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.HitsPerPage
}

// GetHitsPerPageOk returns a tuple with the HitsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCompositionRulesParams) GetHitsPerPageOk() (*int32, bool) {
	if o == nil || o.HitsPerPage == nil {
		return nil, false
	}
	return o.HitsPerPage, true
}

// HasHitsPerPage returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasHitsPerPage() bool {
	if o != nil && o.HitsPerPage != nil {
		return true
	}

	return false
}

// SetHitsPerPage gets a reference to the given int32 and assigns it to the HitsPerPage field.
func (o *SearchCompositionRulesParams) SetHitsPerPage(v int32) *SearchCompositionRulesParams {
	o.HitsPerPage = &v
	return o
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchCompositionRulesParams) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *SearchCompositionRulesParams) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *SearchCompositionRulesParams) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given utils.Nullable[bool] and assigns it to the Enabled field.
func (o *SearchCompositionRulesParams) SetEnabled(v bool) *SearchCompositionRulesParams {
	o.Enabled.Set(&v)
	return o
}

// SetEnabledNil sets the value for Enabled to be an explicit nil.
func (o *SearchCompositionRulesParams) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil.
func (o *SearchCompositionRulesParams) UnsetEnabled() {
	o.Enabled.Unset()
}

func (o SearchCompositionRulesParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Anchoring != nil {
		toSerialize["anchoring"] = o.Anchoring
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.HitsPerPage != nil {
		toSerialize["hitsPerPage"] = o.HitsPerPage
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchCompositionRulesParams: %w", err)
	}

	return serialized, nil
}

func (o SearchCompositionRulesParams) String() string {
	out := ""
	out += fmt.Sprintf("  query=%v\n", o.Query)
	out += fmt.Sprintf("  anchoring=%v\n", o.Anchoring)
	out += fmt.Sprintf("  context=%v\n", o.Context)
	out += fmt.Sprintf("  page=%v\n", o.Page)
	out += fmt.Sprintf("  hitsPerPage=%v\n", o.HitsPerPage)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	return fmt.Sprintf("SearchCompositionRulesParams {\n%s}", out)
}
