// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// RulesBatchCompositionAction - struct for RulesBatchCompositionAction.
type RulesBatchCompositionAction struct {
	CompositionRule             *CompositionRule
	DeleteCompositionRuleAction *DeleteCompositionRuleAction
}

// CompositionRuleAsRulesBatchCompositionAction is a convenience function that returns CompositionRule wrapped in RulesBatchCompositionAction.
func CompositionRuleAsRulesBatchCompositionAction(v *CompositionRule) *RulesBatchCompositionAction {
	return &RulesBatchCompositionAction{
		CompositionRule: v,
	}
}

// DeleteCompositionRuleActionAsRulesBatchCompositionAction is a convenience function that returns DeleteCompositionRuleAction wrapped in RulesBatchCompositionAction.
func DeleteCompositionRuleActionAsRulesBatchCompositionAction(v *DeleteCompositionRuleAction) *RulesBatchCompositionAction {
	return &RulesBatchCompositionAction{
		DeleteCompositionRuleAction: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *RulesBatchCompositionAction) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into CompositionRule
	err = json.Unmarshal(data, &dst.CompositionRule)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.CompositionRule = nil
	}
	// try to unmarshal data into DeleteCompositionRuleAction
	err = json.Unmarshal(data, &dst.DeleteCompositionRuleAction)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.DeleteCompositionRuleAction = nil
	}

	return fmt.Errorf("data failed to match schemas in oneOf(RulesBatchCompositionAction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src RulesBatchCompositionAction) MarshalJSON() ([]byte, error) {
	if src.CompositionRule != nil {
		serialized, err := json.Marshal(&src.CompositionRule)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of CompositionRule of RulesBatchCompositionAction: %w", err)
		}

		return serialized, nil
	}

	if src.DeleteCompositionRuleAction != nil {
		serialized, err := json.Marshal(&src.DeleteCompositionRuleAction)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of DeleteCompositionRuleAction of RulesBatchCompositionAction: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj RulesBatchCompositionAction) GetActualInstance() any {
	if obj.CompositionRule != nil {
		return *obj.CompositionRule
	}

	if obj.DeleteCompositionRuleAction != nil {
		return *obj.DeleteCompositionRuleAction
	}

	// all schemas are nil
	return nil
}
