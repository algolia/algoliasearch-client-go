// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// CompositionRuleConsequence Effect of the rule.
type CompositionRuleConsequence struct {
	Behavior CompositionBehavior `json:"behavior"`
}

// NewCompositionRuleConsequence instantiates a new CompositionRuleConsequence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCompositionRuleConsequence(behavior CompositionBehavior) *CompositionRuleConsequence {
	this := &CompositionRuleConsequence{}
	this.Behavior = behavior
	return this
}

// NewEmptyCompositionRuleConsequence return a pointer to an empty CompositionRuleConsequence object.
func NewEmptyCompositionRuleConsequence() *CompositionRuleConsequence {
	return &CompositionRuleConsequence{}
}

// GetBehavior returns the Behavior field value.
func (o *CompositionRuleConsequence) GetBehavior() CompositionBehavior {
	if o == nil {
		var ret CompositionBehavior
		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *CompositionRuleConsequence) GetBehaviorOk() (*CompositionBehavior, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Behavior, true
}

// SetBehavior sets field value.
func (o *CompositionRuleConsequence) SetBehavior(v *CompositionBehavior) *CompositionRuleConsequence {
	o.Behavior = *v
	return o
}

func (o CompositionRuleConsequence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["behavior"] = o.Behavior
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CompositionRuleConsequence: %w", err)
	}

	return serialized, nil
}

func (o CompositionRuleConsequence) String() string {
	out := ""
	out += fmt.Sprintf("  behavior=%v\n", o.Behavior)
	return fmt.Sprintf("CompositionRuleConsequence {\n%s}", out)
}
