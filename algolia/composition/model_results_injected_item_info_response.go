// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// ResultsInjectedItemInfoResponse struct for ResultsInjectedItemInfoResponse.
type ResultsInjectedItemInfoResponse struct {
	Key                  string                                        `json:"key"`
	AppliedRules         []ResultsInjectedItemAppliedRulesInfoResponse `json:"appliedRules,omitempty"`
	AdditionalProperties map[string]any
}

type _ResultsInjectedItemInfoResponse ResultsInjectedItemInfoResponse

type ResultsInjectedItemInfoResponseOption func(f *ResultsInjectedItemInfoResponse)

func WithResultsInjectedItemInfoResponseAppliedRules(val []ResultsInjectedItemAppliedRulesInfoResponse) ResultsInjectedItemInfoResponseOption {
	return func(f *ResultsInjectedItemInfoResponse) {
		f.AppliedRules = val
	}
}

// NewResultsInjectedItemInfoResponse instantiates a new ResultsInjectedItemInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewResultsInjectedItemInfoResponse(key string, opts ...ResultsInjectedItemInfoResponseOption) *ResultsInjectedItemInfoResponse {
	this := &ResultsInjectedItemInfoResponse{}
	this.Key = key
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyResultsInjectedItemInfoResponse return a pointer to an empty ResultsInjectedItemInfoResponse object.
func NewEmptyResultsInjectedItemInfoResponse() *ResultsInjectedItemInfoResponse {
	return &ResultsInjectedItemInfoResponse{}
}

// GetKey returns the Key field value.
func (o *ResultsInjectedItemInfoResponse) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ResultsInjectedItemInfoResponse) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value.
func (o *ResultsInjectedItemInfoResponse) SetKey(v string) *ResultsInjectedItemInfoResponse {
	o.Key = v
	return o
}

// GetAppliedRules returns the AppliedRules field value if set, zero value otherwise.
func (o *ResultsInjectedItemInfoResponse) GetAppliedRules() []ResultsInjectedItemAppliedRulesInfoResponse {
	if o == nil || o.AppliedRules == nil {
		var ret []ResultsInjectedItemAppliedRulesInfoResponse
		return ret
	}
	return o.AppliedRules
}

// GetAppliedRulesOk returns a tuple with the AppliedRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsInjectedItemInfoResponse) GetAppliedRulesOk() ([]ResultsInjectedItemAppliedRulesInfoResponse, bool) {
	if o == nil || o.AppliedRules == nil {
		return nil, false
	}
	return o.AppliedRules, true
}

// HasAppliedRules returns a boolean if a field has been set.
func (o *ResultsInjectedItemInfoResponse) HasAppliedRules() bool {
	if o != nil && o.AppliedRules != nil {
		return true
	}

	return false
}

// SetAppliedRules gets a reference to the given []ResultsInjectedItemAppliedRulesInfoResponse and assigns it to the AppliedRules field.
func (o *ResultsInjectedItemInfoResponse) SetAppliedRules(v []ResultsInjectedItemAppliedRulesInfoResponse) *ResultsInjectedItemInfoResponse {
	o.AppliedRules = v
	return o
}

func (o *ResultsInjectedItemInfoResponse) SetAdditionalProperty(key string, value any) *ResultsInjectedItemInfoResponse {
	if o.AdditionalProperties == nil {
		o.AdditionalProperties = make(map[string]any)
	}

	o.AdditionalProperties[key] = value

	return o
}

func (o ResultsInjectedItemInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.AppliedRules != nil {
		toSerialize["appliedRules"] = o.AppliedRules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ResultsInjectedItemInfoResponse: %w", err)
	}

	return serialized, nil
}

func (o *ResultsInjectedItemInfoResponse) UnmarshalJSON(bytes []byte) error {
	varResultsInjectedItemInfoResponse := _ResultsInjectedItemInfoResponse{}

	err := json.Unmarshal(bytes, &varResultsInjectedItemInfoResponse)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ResultsInjectedItemInfoResponse: %w", err)
	}

	*o = ResultsInjectedItemInfoResponse(varResultsInjectedItemInfoResponse)

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
	if err != nil {
		return fmt.Errorf("failed to unmarshal additionalProperties in ResultsInjectedItemInfoResponse: %w", err)
	}

	delete(additionalProperties, "key")
	delete(additionalProperties, "appliedRules")
	o.AdditionalProperties = additionalProperties

	return nil
}

func (o ResultsInjectedItemInfoResponse) String() string {
	out := ""
	out += fmt.Sprintf("  key=%v\n", o.Key)
	out += fmt.Sprintf("  appliedRules=%v\n", o.AppliedRules)
	for key, value := range o.AdditionalProperties {
		out += fmt.Sprintf("  %s=%v\n", key, value)
	}
	return fmt.Sprintf("ResultsInjectedItemInfoResponse {\n%s}", out)
}
