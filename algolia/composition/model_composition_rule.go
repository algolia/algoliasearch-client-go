// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// CompositionRule struct for CompositionRule.
type CompositionRule struct {
	// Composition rule unique identifier.
	ObjectID string `json:"objectID"`
	// Conditions that trigger a composition rule.
	Conditions  []Condition                `json:"conditions"`
	Consequence CompositionRuleConsequence `json:"consequence"`
	// Description of the rule's purpose to help you distinguish between different rules.
	Description *string `json:"description,omitempty"`
	// Whether the rule is active.
	Enabled *bool `json:"enabled,omitempty"`
	// Time periods when the rule is active.
	Validity []TimeRange `json:"validity,omitempty"`
	// A list of tags.
	Tags []string `json:"tags,omitempty"`
}

type CompositionRuleOption func(f *CompositionRule)

func WithCompositionRuleDescription(val string) CompositionRuleOption {
	return func(f *CompositionRule) {
		f.Description = &val
	}
}

func WithCompositionRuleEnabled(val bool) CompositionRuleOption {
	return func(f *CompositionRule) {
		f.Enabled = &val
	}
}

func WithCompositionRuleValidity(val []TimeRange) CompositionRuleOption {
	return func(f *CompositionRule) {
		f.Validity = val
	}
}

func WithCompositionRuleTags(val []string) CompositionRuleOption {
	return func(f *CompositionRule) {
		f.Tags = val
	}
}

// NewCompositionRule instantiates a new CompositionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCompositionRule(objectID string, conditions []Condition, consequence CompositionRuleConsequence, opts ...CompositionRuleOption) *CompositionRule {
	this := &CompositionRule{}
	this.ObjectID = objectID
	this.Conditions = conditions
	this.Consequence = consequence
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyCompositionRule return a pointer to an empty CompositionRule object.
func NewEmptyCompositionRule() *CompositionRule {
	return &CompositionRule{}
}

// GetObjectID returns the ObjectID field value.
func (o *CompositionRule) GetObjectID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetObjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectID, true
}

// SetObjectID sets field value.
func (o *CompositionRule) SetObjectID(v string) *CompositionRule {
	o.ObjectID = v
	return o
}

// GetConditions returns the Conditions field value.
func (o *CompositionRule) GetConditions() []Condition {
	if o == nil {
		var ret []Condition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetConditionsOk() ([]Condition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value.
func (o *CompositionRule) SetConditions(v []Condition) *CompositionRule {
	o.Conditions = v
	return o
}

// GetConsequence returns the Consequence field value.
func (o *CompositionRule) GetConsequence() CompositionRuleConsequence {
	if o == nil {
		var ret CompositionRuleConsequence
		return ret
	}

	return o.Consequence
}

// GetConsequenceOk returns a tuple with the Consequence field value
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetConsequenceOk() (*CompositionRuleConsequence, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consequence, true
}

// SetConsequence sets field value.
func (o *CompositionRule) SetConsequence(v *CompositionRuleConsequence) *CompositionRule {
	o.Consequence = *v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CompositionRule) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CompositionRule) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CompositionRule) SetDescription(v string) *CompositionRule {
	o.Description = &v
	return o
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CompositionRule) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CompositionRule) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CompositionRule) SetEnabled(v bool) *CompositionRule {
	o.Enabled = &v
	return o
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *CompositionRule) GetValidity() []TimeRange {
	if o == nil || o.Validity == nil {
		var ret []TimeRange
		return ret
	}
	return o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetValidityOk() ([]TimeRange, bool) {
	if o == nil || o.Validity == nil {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *CompositionRule) HasValidity() bool {
	if o != nil && o.Validity != nil {
		return true
	}

	return false
}

// SetValidity gets a reference to the given []TimeRange and assigns it to the Validity field.
func (o *CompositionRule) SetValidity(v []TimeRange) *CompositionRule {
	o.Validity = v
	return o
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CompositionRule) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionRule) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CompositionRule) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CompositionRule) SetTags(v []string) *CompositionRule {
	o.Tags = v
	return o
}

func (o CompositionRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["objectID"] = o.ObjectID
	toSerialize["conditions"] = o.Conditions
	toSerialize["consequence"] = o.Consequence
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Validity != nil {
		toSerialize["validity"] = o.Validity
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CompositionRule: %w", err)
	}

	return serialized, nil
}

func (o CompositionRule) String() string {
	out := ""
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	out += fmt.Sprintf("  conditions=%v\n", o.Conditions)
	out += fmt.Sprintf("  consequence=%v\n", o.Consequence)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	out += fmt.Sprintf("  validity=%v\n", o.Validity)
	out += fmt.Sprintf("  tags=%v\n", o.Tags)
	return fmt.Sprintf("CompositionRule {\n%s}", out)
}
