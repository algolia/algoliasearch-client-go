// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// BatchCompositionAction - struct for BatchCompositionAction.
type BatchCompositionAction struct {
	Composition             *Composition
	DeleteCompositionAction *DeleteCompositionAction
}

// CompositionAsBatchCompositionAction is a convenience function that returns Composition wrapped in BatchCompositionAction.
func CompositionAsBatchCompositionAction(v *Composition) *BatchCompositionAction {
	return &BatchCompositionAction{
		Composition: v,
	}
}

// DeleteCompositionActionAsBatchCompositionAction is a convenience function that returns DeleteCompositionAction wrapped in BatchCompositionAction.
func DeleteCompositionActionAsBatchCompositionAction(v *DeleteCompositionAction) *BatchCompositionAction {
	return &BatchCompositionAction{
		DeleteCompositionAction: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *BatchCompositionAction) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Composition
	err = json.Unmarshal(data, &dst.Composition)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.Composition = nil
	}
	// try to unmarshal data into DeleteCompositionAction
	err = json.Unmarshal(data, &dst.DeleteCompositionAction)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.DeleteCompositionAction = nil
	}

	return fmt.Errorf("data failed to match schemas in oneOf(BatchCompositionAction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src BatchCompositionAction) MarshalJSON() ([]byte, error) {
	if src.Composition != nil {
		serialized, err := json.Marshal(&src.Composition)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Composition of BatchCompositionAction: %w", err)
		}

		return serialized, nil
	}

	if src.DeleteCompositionAction != nil {
		serialized, err := json.Marshal(&src.DeleteCompositionAction)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of DeleteCompositionAction of BatchCompositionAction: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj BatchCompositionAction) GetActualInstance() any {
	if obj.Composition != nil {
		return *obj.Composition
	}

	if obj.DeleteCompositionAction != nil {
		return *obj.DeleteCompositionAction
	}

	// all schemas are nil
	return nil
}
