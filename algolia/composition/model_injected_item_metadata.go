// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// InjectedItemMetadata Used to add metadata to the results of the injectedItem.
type InjectedItemMetadata struct {
	Hits *InjectedItemHitsMetadata `json:"hits,omitempty"`
}

type InjectedItemMetadataOption func(f *InjectedItemMetadata)

func WithInjectedItemMetadataHits(val InjectedItemHitsMetadata) InjectedItemMetadataOption {
	return func(f *InjectedItemMetadata) {
		f.Hits = &val
	}
}

// NewInjectedItemMetadata instantiates a new InjectedItemMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewInjectedItemMetadata(opts ...InjectedItemMetadataOption) *InjectedItemMetadata {
	this := &InjectedItemMetadata{}
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyInjectedItemMetadata return a pointer to an empty InjectedItemMetadata object.
func NewEmptyInjectedItemMetadata() *InjectedItemMetadata {
	return &InjectedItemMetadata{}
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *InjectedItemMetadata) GetHits() InjectedItemHitsMetadata {
	if o == nil || o.Hits == nil {
		var ret InjectedItemHitsMetadata

		return ret
	}

	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InjectedItemMetadata) GetHitsOk() (*InjectedItemHitsMetadata, bool) {
	if o == nil || o.Hits == nil {
		return nil, false
	}

	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *InjectedItemMetadata) HasHits() bool {
	if o != nil && o.Hits != nil {
		return true
	}

	return false
}

// SetHits gets a reference to the given InjectedItemHitsMetadata and assigns it to the Hits field.
func (o *InjectedItemMetadata) SetHits(v *InjectedItemHitsMetadata) *InjectedItemMetadata {
	o.Hits = v

	return o
}

func (o InjectedItemMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Hits != nil {
		toSerialize["hits"] = o.Hits
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal InjectedItemMetadata: %w", err)
	}

	return serialized, nil
}

func (o InjectedItemMetadata) String() string {
	out := ""
	out += fmt.Sprintf("  hits=%v\n", o.Hits)

	return fmt.Sprintf("InjectedItemMetadata {\n%s}", out)
}
