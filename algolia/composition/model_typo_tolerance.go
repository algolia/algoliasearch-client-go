// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// TypoTolerance - Whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance) is enabled and how it is applied.  If typo tolerance is true, `min`, or `strict`, [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation) are also active.
type TypoTolerance struct {
	TypoToleranceEnum *TypoToleranceEnum
	Bool              *bool
}

// TypoToleranceEnumAsTypoTolerance is a convenience function that returns TypoToleranceEnum wrapped in TypoTolerance.
func TypoToleranceEnumAsTypoTolerance(v TypoToleranceEnum) *TypoTolerance {
	return &TypoTolerance{
		TypoToleranceEnum: &v,
	}
}

// boolAsTypoTolerance is a convenience function that returns bool wrapped in TypoTolerance.
func BoolAsTypoTolerance(v bool) *TypoTolerance {
	return &TypoTolerance{
		Bool: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *TypoTolerance) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into TypoToleranceEnum
	err = json.Unmarshal(data, &dst.TypoToleranceEnum)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.TypoToleranceEnum = nil
	}
	// try to unmarshal data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.Bool = nil
	}

	return fmt.Errorf("data failed to match schemas in oneOf(TypoTolerance)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src TypoTolerance) MarshalJSON() ([]byte, error) {
	if src.TypoToleranceEnum != nil {
		serialized, err := json.Marshal(&src.TypoToleranceEnum)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of TypoToleranceEnum of TypoTolerance: %w", err)
		}

		return serialized, nil
	}

	if src.Bool != nil {
		serialized, err := json.Marshal(&src.Bool)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Bool of TypoTolerance: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj TypoTolerance) GetActualInstance() any {
	if obj.TypoToleranceEnum != nil {
		return *obj.TypoToleranceEnum
	}

	if obj.Bool != nil {
		return *obj.Bool
	}

	// all schemas are nil
	return nil
}
