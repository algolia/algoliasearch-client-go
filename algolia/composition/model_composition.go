// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// Composition struct for Composition.
type Composition struct {
	// Composition unique identifier.
	ObjectID string `json:"objectID"`
	// Composition name.
	Name string `json:"name"`
	// Composition description.
	Description *string             `json:"description,omitempty"`
	Behavior    CompositionBehavior `json:"behavior"`
}

type CompositionOption func(f *Composition)

func WithCompositionDescription(val string) CompositionOption {
	return func(f *Composition) {
		f.Description = &val
	}
}

// NewComposition instantiates a new Composition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewComposition(objectID string, name string, behavior CompositionBehavior, opts ...CompositionOption) *Composition {
	this := &Composition{}
	this.ObjectID = objectID
	this.Name = name

	this.Behavior = behavior
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyComposition return a pointer to an empty Composition object.
func NewEmptyComposition() *Composition {
	return &Composition{}
}

// GetObjectID returns the ObjectID field value.
func (o *Composition) GetObjectID() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value
// and a boolean to check if the value has been set.
func (o *Composition) GetObjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.ObjectID, true
}

// SetObjectID sets field value.
func (o *Composition) SetObjectID(v string) *Composition {
	o.ObjectID = v

	return o
}

// GetName returns the Name field value.
func (o *Composition) GetName() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Composition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Name, true
}

// SetName sets field value.
func (o *Composition) SetName(v string) *Composition {
	o.Name = v

	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Composition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string

		return ret
	}

	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Composition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}

	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Composition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Composition) SetDescription(v string) *Composition {
	o.Description = &v

	return o
}

// GetBehavior returns the Behavior field value.
func (o *Composition) GetBehavior() CompositionBehavior {
	if o == nil {
		var ret CompositionBehavior

		return ret
	}

	return o.Behavior
}

// GetBehaviorOk returns a tuple with the Behavior field value
// and a boolean to check if the value has been set.
func (o *Composition) GetBehaviorOk() (*CompositionBehavior, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Behavior, true
}

// SetBehavior sets field value.
func (o *Composition) SetBehavior(v *CompositionBehavior) *Composition {
	o.Behavior = *v

	return o
}

func (o Composition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["objectID"] = o.ObjectID

	toSerialize["name"] = o.Name
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}

	toSerialize["behavior"] = o.Behavior

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Composition: %w", err)
	}

	return serialized, nil
}

func (o Composition) String() string {
	out := ""
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  behavior=%v\n", o.Behavior)

	return fmt.Sprintf("Composition {\n%s}", out)
}
