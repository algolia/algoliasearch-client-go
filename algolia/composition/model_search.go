// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// Search struct for Search.
type Search struct {
	// Composition Index name.
	Index  string                        `json:"index"`
	Params *BaseInjectionQueryParameters `json:"params,omitempty"`
}

type SearchOption func(f *Search)

func WithSearchParams(val BaseInjectionQueryParameters) SearchOption {
	return func(f *Search) {
		f.Params = &val
	}
}

// NewSearch instantiates a new Search object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearch(index string, opts ...SearchOption) *Search {
	this := &Search{}
	this.Index = index
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySearch return a pointer to an empty Search object.
func NewEmptySearch() *Search {
	return &Search{}
}

// GetIndex returns the Index field value.
func (o *Search) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *Search) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value.
func (o *Search) SetIndex(v string) *Search {
	o.Index = v
	return o
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *Search) GetParams() BaseInjectionQueryParameters {
	if o == nil || o.Params == nil {
		var ret BaseInjectionQueryParameters
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetParamsOk() (*BaseInjectionQueryParameters, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *Search) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given BaseInjectionQueryParameters and assigns it to the Params field.
func (o *Search) SetParams(v *BaseInjectionQueryParameters) *Search {
	o.Params = v
	return o
}

func (o Search) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["index"] = o.Index
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Search: %w", err)
	}

	return serialized, nil
}

func (o Search) String() string {
	out := ""
	out += fmt.Sprintf("  index=%v\n", o.Index)
	out += fmt.Sprintf("  params=%v\n", o.Params)
	return fmt.Sprintf("Search {\n%s}", out)
}
