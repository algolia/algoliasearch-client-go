// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// Injection struct for Injection.
type Injection struct {
	Main Main `json:"main"`
	// list of injected items of the current Composition.
	InjectedItems []InjectedItem `json:"injectedItems,omitempty"`
}

type InjectionOption func(f *Injection)

func WithInjectionInjectedItems(val []InjectedItem) InjectionOption {
	return func(f *Injection) {
		f.InjectedItems = val
	}
}

// NewInjection instantiates a new Injection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewInjection(main Main, opts ...InjectionOption) *Injection {
	this := &Injection{}
	this.Main = main
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyInjection return a pointer to an empty Injection object.
func NewEmptyInjection() *Injection {
	return &Injection{}
}

// GetMain returns the Main field value.
func (o *Injection) GetMain() Main {
	if o == nil {
		var ret Main
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *Injection) GetMainOk() (*Main, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value.
func (o *Injection) SetMain(v *Main) *Injection {
	o.Main = *v
	return o
}

// GetInjectedItems returns the InjectedItems field value if set, zero value otherwise.
func (o *Injection) GetInjectedItems() []InjectedItem {
	if o == nil || o.InjectedItems == nil {
		var ret []InjectedItem
		return ret
	}
	return o.InjectedItems
}

// GetInjectedItemsOk returns a tuple with the InjectedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Injection) GetInjectedItemsOk() ([]InjectedItem, bool) {
	if o == nil || o.InjectedItems == nil {
		return nil, false
	}
	return o.InjectedItems, true
}

// HasInjectedItems returns a boolean if a field has been set.
func (o *Injection) HasInjectedItems() bool {
	if o != nil && o.InjectedItems != nil {
		return true
	}

	return false
}

// SetInjectedItems gets a reference to the given []InjectedItem and assigns it to the InjectedItems field.
func (o *Injection) SetInjectedItems(v []InjectedItem) *Injection {
	o.InjectedItems = v
	return o
}

func (o Injection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["main"] = o.Main
	if o.InjectedItems != nil {
		toSerialize["injectedItems"] = o.InjectedItems
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Injection: %w", err)
	}

	return serialized, nil
}

func (o Injection) String() string {
	out := ""
	out += fmt.Sprintf("  main=%v\n", o.Main)
	out += fmt.Sprintf("  injectedItems=%v\n", o.InjectedItems)
	return fmt.Sprintf("Injection {\n%s}", out)
}
