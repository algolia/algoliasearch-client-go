// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// ExternalInjectedItem struct for ExternalInjectedItem.
type ExternalInjectedItem struct {
	Items []ExternalInjection `json:"items"`
}

// NewExternalInjectedItem instantiates a new ExternalInjectedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewExternalInjectedItem(items []ExternalInjection) *ExternalInjectedItem {
	this := &ExternalInjectedItem{}
	this.Items = items

	return this
}

// NewEmptyExternalInjectedItem return a pointer to an empty ExternalInjectedItem object.
func NewEmptyExternalInjectedItem() *ExternalInjectedItem {
	return &ExternalInjectedItem{}
}

// GetItems returns the Items field value.
func (o *ExternalInjectedItem) GetItems() []ExternalInjection {
	if o == nil {
		var ret []ExternalInjection

		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ExternalInjectedItem) GetItemsOk() ([]ExternalInjection, bool) {
	if o == nil {
		return nil, false
	}

	return o.Items, true
}

// SetItems sets field value.
func (o *ExternalInjectedItem) SetItems(v []ExternalInjection) *ExternalInjectedItem {
	o.Items = v

	return o
}

func (o ExternalInjectedItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["items"] = o.Items

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ExternalInjectedItem: %w", err)
	}

	return serialized, nil
}

func (o ExternalInjectedItem) String() string {
	out := ""
	out += fmt.Sprintf("  items=%v\n", o.Items)

	return fmt.Sprintf("ExternalInjectedItem {\n%s}", out)
}
