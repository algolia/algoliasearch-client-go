// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// SearchSource Injected items will originate from a search request performed on the specified index.
type SearchSource struct {
	Search Search `json:"search"`
}

// NewSearchSource instantiates a new SearchSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchSource(search Search) *SearchSource {
	this := &SearchSource{}
	this.Search = search
	return this
}

// NewEmptySearchSource return a pointer to an empty SearchSource object.
func NewEmptySearchSource() *SearchSource {
	return &SearchSource{}
}

// GetSearch returns the Search field value.
func (o *SearchSource) GetSearch() Search {
	if o == nil {
		var ret Search
		return ret
	}

	return o.Search
}

// GetSearchOk returns a tuple with the Search field value
// and a boolean to check if the value has been set.
func (o *SearchSource) GetSearchOk() (*Search, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Search, true
}

// SetSearch sets field value.
func (o *SearchSource) SetSearch(v *Search) *SearchSource {
	o.Search = *v
	return o
}

func (o SearchSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["search"] = o.Search
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchSource: %w", err)
	}

	return serialized, nil
}

func (o SearchSource) String() string {
	out := ""
	out += fmt.Sprintf("  search=%v\n", o.Search)
	return fmt.Sprintf("SearchSource {\n%s}", out)
}
