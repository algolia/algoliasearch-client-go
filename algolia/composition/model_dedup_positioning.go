// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// DedupPositioning Deduplication positioning configures how a duplicate result should be resolved between an injected item and main search results. Current configuration supports: - 'highest': always select the item in the highest position, and remove duplicates that appear lower in the results. - 'highestInjected': duplicate result will be moved to its highest possible injected position, but not higher.    If a duplicate appears higher in main search results, it will be removed to stay it's intended group position (which could be lower than main).
type DedupPositioning string

// List of dedupPositioning.
const (
	DEDUP_POSITIONING_HIGHEST          DedupPositioning = "highest"
	DEDUP_POSITIONING_HIGHEST_INJECTED DedupPositioning = "highestInjected"
)

// All allowed values of DedupPositioning enum.
var AllowedDedupPositioningEnumValues = []DedupPositioning{
	"highest",
	"highestInjected",
}

// NewDedupPositioningFromValue returns a pointer to a valid DedupPositioning.
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewDedupPositioningFromValue(v string) (*DedupPositioning, error) {
	ev := DedupPositioning(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DedupPositioning: valid values are %v", v, AllowedDedupPositioningEnumValues)
	}
}

func (v *DedupPositioning) UnmarshalJSON(src []byte) error {
	var value string

	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'DedupPositioning': %w", string(src), err)
	}

	enumTypeValue := DedupPositioning(value)
	for _, existing := range AllowedDedupPositioningEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue

			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DedupPositioning", value)
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v DedupPositioning) IsValid() bool {
	for _, existing := range AllowedDedupPositioningEnumValues {
		if existing == v {
			return true
		}
	}

	return false
}

// Ptr returns reference to dedupPositioning value.
func (v DedupPositioning) Ptr() *DedupPositioning {
	return &v
}
