// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// CompositionBehavior struct for CompositionBehavior.
type CompositionBehavior struct {
	Injection Injection `json:"injection"`
}

// NewCompositionBehavior instantiates a new CompositionBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewCompositionBehavior(injection Injection) *CompositionBehavior {
	this := &CompositionBehavior{}
	this.Injection = injection

	return this
}

// NewEmptyCompositionBehavior return a pointer to an empty CompositionBehavior object.
func NewEmptyCompositionBehavior() *CompositionBehavior {
	return &CompositionBehavior{}
}

// GetInjection returns the Injection field value.
func (o *CompositionBehavior) GetInjection() Injection {
	if o == nil {
		var ret Injection

		return ret
	}

	return o.Injection
}

// GetInjectionOk returns a tuple with the Injection field value
// and a boolean to check if the value has been set.
func (o *CompositionBehavior) GetInjectionOk() (*Injection, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Injection, true
}

// SetInjection sets field value.
func (o *CompositionBehavior) SetInjection(v *Injection) *CompositionBehavior {
	o.Injection = *v

	return o
}

func (o CompositionBehavior) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["injection"] = o.Injection

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal CompositionBehavior: %w", err)
	}

	return serialized, nil
}

func (o CompositionBehavior) String() string {
	out := ""
	out += fmt.Sprintf("  injection=%v\n", o.Injection)

	return fmt.Sprintf("CompositionBehavior {\n%s}", out)
}
