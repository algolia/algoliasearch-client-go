// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// InjectedItem struct for InjectedItem.
type InjectedItem struct {
	// injected Item unique identifier.
	Key      string                `json:"key"`
	Source   InjectedItemSource    `json:"source"`
	Position int32                 `json:"position"`
	Length   int32                 `json:"length"`
	Metadata *InjectedItemMetadata `json:"metadata,omitempty"`
}

type InjectedItemOption func(f *InjectedItem)

func WithInjectedItemMetadata(val InjectedItemMetadata) InjectedItemOption {
	return func(f *InjectedItem) {
		f.Metadata = &val
	}
}

// NewInjectedItem instantiates a new InjectedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewInjectedItem(key string, source InjectedItemSource, position int32, length int32, opts ...InjectedItemOption) *InjectedItem {
	this := &InjectedItem{}
	this.Key = key
	this.Source = source
	this.Position = position
	this.Length = length
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyInjectedItem return a pointer to an empty InjectedItem object.
func NewEmptyInjectedItem() *InjectedItem {
	return &InjectedItem{}
}

// GetKey returns the Key field value.
func (o *InjectedItem) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *InjectedItem) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value.
func (o *InjectedItem) SetKey(v string) *InjectedItem {
	o.Key = v
	return o
}

// GetSource returns the Source field value.
func (o *InjectedItem) GetSource() InjectedItemSource {
	if o == nil {
		var ret InjectedItemSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *InjectedItem) GetSourceOk() (*InjectedItemSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value.
func (o *InjectedItem) SetSource(v *InjectedItemSource) *InjectedItem {
	o.Source = *v
	return o
}

// GetPosition returns the Position field value.
func (o *InjectedItem) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *InjectedItem) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value.
func (o *InjectedItem) SetPosition(v int32) *InjectedItem {
	o.Position = v
	return o
}

// GetLength returns the Length field value.
func (o *InjectedItem) GetLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *InjectedItem) GetLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value.
func (o *InjectedItem) SetLength(v int32) *InjectedItem {
	o.Length = v
	return o
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InjectedItem) GetMetadata() InjectedItemMetadata {
	if o == nil || o.Metadata == nil {
		var ret InjectedItemMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InjectedItem) GetMetadataOk() (*InjectedItemMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InjectedItem) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given InjectedItemMetadata and assigns it to the Metadata field.
func (o *InjectedItem) SetMetadata(v *InjectedItemMetadata) *InjectedItem {
	o.Metadata = v
	return o
}

func (o InjectedItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["key"] = o.Key
	toSerialize["source"] = o.Source
	toSerialize["position"] = o.Position
	toSerialize["length"] = o.Length
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal InjectedItem: %w", err)
	}

	return serialized, nil
}

func (o InjectedItem) String() string {
	out := ""
	out += fmt.Sprintf("  key=%v\n", o.Key)
	out += fmt.Sprintf("  source=%v\n", o.Source)
	out += fmt.Sprintf("  position=%v\n", o.Position)
	out += fmt.Sprintf("  length=%v\n", o.Length)
	out += fmt.Sprintf("  metadata=%v\n", o.Metadata)
	return fmt.Sprintf("InjectedItem {\n%s}", out)
}
