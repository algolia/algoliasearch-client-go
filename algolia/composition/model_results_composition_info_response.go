// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// ResultsCompositionInfoResponse struct for ResultsCompositionInfoResponse.
type ResultsCompositionInfoResponse struct {
	InjectedItems []ResultsInjectedItemInfoResponse `json:"injectedItems"`
}

// NewResultsCompositionInfoResponse instantiates a new ResultsCompositionInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewResultsCompositionInfoResponse(injectedItems []ResultsInjectedItemInfoResponse) *ResultsCompositionInfoResponse {
	this := &ResultsCompositionInfoResponse{}
	this.InjectedItems = injectedItems
	return this
}

// NewEmptyResultsCompositionInfoResponse return a pointer to an empty ResultsCompositionInfoResponse object.
func NewEmptyResultsCompositionInfoResponse() *ResultsCompositionInfoResponse {
	return &ResultsCompositionInfoResponse{}
}

// GetInjectedItems returns the InjectedItems field value.
func (o *ResultsCompositionInfoResponse) GetInjectedItems() []ResultsInjectedItemInfoResponse {
	if o == nil {
		var ret []ResultsInjectedItemInfoResponse
		return ret
	}

	return o.InjectedItems
}

// GetInjectedItemsOk returns a tuple with the InjectedItems field value
// and a boolean to check if the value has been set.
func (o *ResultsCompositionInfoResponse) GetInjectedItemsOk() ([]ResultsInjectedItemInfoResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.InjectedItems, true
}

// SetInjectedItems sets field value.
func (o *ResultsCompositionInfoResponse) SetInjectedItems(v []ResultsInjectedItemInfoResponse) *ResultsCompositionInfoResponse {
	o.InjectedItems = v
	return o
}

func (o ResultsCompositionInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["injectedItems"] = o.InjectedItems
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ResultsCompositionInfoResponse: %w", err)
	}

	return serialized, nil
}

func (o ResultsCompositionInfoResponse) String() string {
	out := ""
	out += fmt.Sprintf("  injectedItems=%v\n", o.InjectedItems)
	return fmt.Sprintf("ResultsCompositionInfoResponse {\n%s}", out)
}
