// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// ExternalInjection struct for ExternalInjection.
type ExternalInjection struct {
	// An objectID injected into an external source.
	ObjectID string `json:"objectID"`
	// User-defined key-values that will be added to the injected item in the response. This is identical to Hits metadata defined in Composition or Composition Rule, with the benefit of being set at runtime.
	Metadata map[string]any `json:"metadata,omitempty"`
}

type ExternalInjectionOption func(f *ExternalInjection)

func WithExternalInjectionMetadata(val map[string]any) ExternalInjectionOption {
	return func(f *ExternalInjection) {
		f.Metadata = val
	}
}

// NewExternalInjection instantiates a new ExternalInjection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewExternalInjection(objectID string, opts ...ExternalInjectionOption) *ExternalInjection {
	this := &ExternalInjection{}

	this.ObjectID = objectID
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyExternalInjection return a pointer to an empty ExternalInjection object.
func NewEmptyExternalInjection() *ExternalInjection {
	return &ExternalInjection{}
}

// GetObjectID returns the ObjectID field value.
func (o *ExternalInjection) GetObjectID() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.ObjectID
}

// GetObjectIDOk returns a tuple with the ObjectID field value
// and a boolean to check if the value has been set.
func (o *ExternalInjection) GetObjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.ObjectID, true
}

// SetObjectID sets field value.
func (o *ExternalInjection) SetObjectID(v string) *ExternalInjection {
	o.ObjectID = v

	return o
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ExternalInjection) GetMetadata() map[string]any {
	if o == nil || o.Metadata == nil {
		var ret map[string]any

		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalInjection) GetMetadataOk() (map[string]any, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}

	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ExternalInjection) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]any and assigns it to the Metadata field.
func (o *ExternalInjection) SetMetadata(v map[string]any) *ExternalInjection {
	o.Metadata = v

	return o
}

func (o ExternalInjection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}

	toSerialize["objectID"] = o.ObjectID
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ExternalInjection: %w", err)
	}

	return serialized, nil
}

func (o ExternalInjection) String() string {
	out := ""
	out += fmt.Sprintf("  objectID=%v\n", o.ObjectID)
	out += fmt.Sprintf("  metadata=%v\n", o.Metadata)

	return fmt.Sprintf("ExternalInjection {\n%s}", out)
}
