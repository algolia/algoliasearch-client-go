// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// SearchForFacetValuesResults struct for SearchForFacetValuesResults.
type SearchForFacetValuesResults struct {
	IndexName string `json:"indexName"`
	// Matching facet values.
	FacetHits []FacetHits `json:"facetHits"`
	// Whether the facet count is exhaustive (true) or approximate (false). For more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).
	ExhaustiveFacetsCount bool `json:"exhaustiveFacetsCount"`
	// Time the server took to process the request, in milliseconds.
	ProcessingTimeMS *int32 `json:"processingTimeMS,omitempty"`
}

type SearchForFacetValuesResultsOption func(f *SearchForFacetValuesResults)

func WithSearchForFacetValuesResultsProcessingTimeMS(val int32) SearchForFacetValuesResultsOption {
	return func(f *SearchForFacetValuesResults) {
		f.ProcessingTimeMS = &val
	}
}

// NewSearchForFacetValuesResults instantiates a new SearchForFacetValuesResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchForFacetValuesResults(indexName string, facetHits []FacetHits, exhaustiveFacetsCount bool, opts ...SearchForFacetValuesResultsOption) *SearchForFacetValuesResults {
	this := &SearchForFacetValuesResults{}
	this.IndexName = indexName
	this.FacetHits = facetHits
	this.ExhaustiveFacetsCount = exhaustiveFacetsCount
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySearchForFacetValuesResults return a pointer to an empty SearchForFacetValuesResults object.
func NewEmptySearchForFacetValuesResults() *SearchForFacetValuesResults {
	return &SearchForFacetValuesResults{}
}

// GetIndexName returns the IndexName field value.
func (o *SearchForFacetValuesResults) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetValuesResults) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value.
func (o *SearchForFacetValuesResults) SetIndexName(v string) *SearchForFacetValuesResults {
	o.IndexName = v
	return o
}

// GetFacetHits returns the FacetHits field value.
func (o *SearchForFacetValuesResults) GetFacetHits() []FacetHits {
	if o == nil {
		var ret []FacetHits
		return ret
	}

	return o.FacetHits
}

// GetFacetHitsOk returns a tuple with the FacetHits field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetValuesResults) GetFacetHitsOk() ([]FacetHits, bool) {
	if o == nil {
		return nil, false
	}
	return o.FacetHits, true
}

// SetFacetHits sets field value.
func (o *SearchForFacetValuesResults) SetFacetHits(v []FacetHits) *SearchForFacetValuesResults {
	o.FacetHits = v
	return o
}

// GetExhaustiveFacetsCount returns the ExhaustiveFacetsCount field value.
func (o *SearchForFacetValuesResults) GetExhaustiveFacetsCount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExhaustiveFacetsCount
}

// GetExhaustiveFacetsCountOk returns a tuple with the ExhaustiveFacetsCount field value
// and a boolean to check if the value has been set.
func (o *SearchForFacetValuesResults) GetExhaustiveFacetsCountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExhaustiveFacetsCount, true
}

// SetExhaustiveFacetsCount sets field value.
func (o *SearchForFacetValuesResults) SetExhaustiveFacetsCount(v bool) *SearchForFacetValuesResults {
	o.ExhaustiveFacetsCount = v
	return o
}

// GetProcessingTimeMS returns the ProcessingTimeMS field value if set, zero value otherwise.
func (o *SearchForFacetValuesResults) GetProcessingTimeMS() int32 {
	if o == nil || o.ProcessingTimeMS == nil {
		var ret int32
		return ret
	}
	return *o.ProcessingTimeMS
}

// GetProcessingTimeMSOk returns a tuple with the ProcessingTimeMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchForFacetValuesResults) GetProcessingTimeMSOk() (*int32, bool) {
	if o == nil || o.ProcessingTimeMS == nil {
		return nil, false
	}
	return o.ProcessingTimeMS, true
}

// HasProcessingTimeMS returns a boolean if a field has been set.
func (o *SearchForFacetValuesResults) HasProcessingTimeMS() bool {
	if o != nil && o.ProcessingTimeMS != nil {
		return true
	}

	return false
}

// SetProcessingTimeMS gets a reference to the given int32 and assigns it to the ProcessingTimeMS field.
func (o *SearchForFacetValuesResults) SetProcessingTimeMS(v int32) *SearchForFacetValuesResults {
	o.ProcessingTimeMS = &v
	return o
}

func (o SearchForFacetValuesResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if true {
		toSerialize["facetHits"] = o.FacetHits
	}
	if true {
		toSerialize["exhaustiveFacetsCount"] = o.ExhaustiveFacetsCount
	}
	if o.ProcessingTimeMS != nil {
		toSerialize["processingTimeMS"] = o.ProcessingTimeMS
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchForFacetValuesResults: %w", err)
	}

	return serialized, nil
}

func (o SearchForFacetValuesResults) String() string {
	out := ""
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  facetHits=%v\n", o.FacetHits)
	out += fmt.Sprintf("  exhaustiveFacetsCount=%v\n", o.ExhaustiveFacetsCount)
	out += fmt.Sprintf("  processingTimeMS=%v\n", o.ProcessingTimeMS)
	return fmt.Sprintf("SearchForFacetValuesResults {\n%s}", out)
}
