// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// ExternalOrdering the model 'ExternalOrdering'.
type ExternalOrdering string

// List of externalOrdering.
const (
	EXTERNAL_ORDERING_DEFAULT      ExternalOrdering = "default"
	EXTERNAL_ORDERING_USER_DEFINED ExternalOrdering = "userDefined"
)

// All allowed values of ExternalOrdering enum.
var AllowedExternalOrderingEnumValues = []ExternalOrdering{
	"default",
	"userDefined",
}

// NewExternalOrderingFromValue returns a pointer to a valid ExternalOrdering.
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewExternalOrderingFromValue(v string) (*ExternalOrdering, error) {
	ev := ExternalOrdering(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalOrdering: valid values are %v", v, AllowedExternalOrderingEnumValues)
	}
}

func (v *ExternalOrdering) UnmarshalJSON(src []byte) error {
	var value string

	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'ExternalOrdering': %w", string(src), err)
	}

	enumTypeValue := ExternalOrdering(value)
	for _, existing := range AllowedExternalOrderingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue

			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalOrdering", value)
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v ExternalOrdering) IsValid() bool {
	for _, existing := range AllowedExternalOrderingEnumValues {
		if existing == v {
			return true
		}
	}

	return false
}

// Ptr returns reference to externalOrdering value.
func (v ExternalOrdering) Ptr() *ExternalOrdering {
	return &v
}
