// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// BaseInjectionQueryParameters struct for BaseInjectionQueryParameters.
type BaseInjectionQueryParameters struct {
	// Whether to support phrase matching and excluding words from search queries Use the `advancedSyntaxFeatures` parameter to control which feature is supported.
	AdvancedSyntax *bool `json:"advancedSyntax,omitempty"`
	// Advanced search syntax features you want to support - `exactPhrase`.   Phrases in quotes must match exactly.   For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\" - `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine` matches records that contain \"search\" but not \"engine\" This setting only has an effect if `advancedSyntax` is true.
	AdvancedSyntaxFeatures []AdvancedSyntaxFeatures `json:"advancedSyntaxFeatures,omitempty"`
	// Whether to allow typos on numbers in the search query Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers.
	AllowTyposOnNumericTokens *bool `json:"allowTyposOnNumericTokens,omitempty"`
	// Determine which plurals and synonyms should be considered an exact matches By default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching. For example - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)) - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches - `singleWordSynonym`.   Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches - `multiWordsSynonym`.   Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.
	AlternativesAsExact []AlternativesAsExact `json:"alternativesAsExact,omitempty"`
	// Whether this search will be included in Analytics.
	Analytics *bool `json:"analytics,omitempty"`
	// Whether the best matching attribute should be determined by minimum proximity This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.
	AttributeCriteriaComputedByMinProximity *bool `json:"attributeCriteriaComputedByMinProximity,omitempty"`
	// Attributes to highlight By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js).
	AttributesToHighlight []string `json:"attributesToHighlight,omitempty"`
	// Attributes to include in the API response To reduce the size of your response, you can retrieve only some of the attributes. Attribute names are case-sensitive - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included.
	AttributesToRetrieve []string `json:"attributesToRetrieve,omitempty"`
	// Attributes for which to enable snippets. Attribute names are case-sensitive Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
	AttributesToSnippet []string `json:"attributesToSnippet,omitempty"`
	// Whether to include a `queryID` attribute in the response The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started).
	ClickAnalytics *bool `json:"clickAnalytics,omitempty"`
	// Whether to split compound words in the query into their building blocks For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian. Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).
	DecompoundQuery *bool `json:"decompoundQuery,omitempty"`
	// Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes). Attribute names are case-sensitive This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking.
	DisableExactOnAttributes []string `json:"disableExactOnAttributes,omitempty"`
	// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance). Attribute names are case-sensitive Returning only exact matches can help when - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.
	DisableTypoToleranceOnAttributes []string  `json:"disableTypoToleranceOnAttributes,omitempty"`
	Distinct                         *Distinct `json:"distinct,omitempty"`
	// Whether to enable A/B testing for this search.
	EnableABTest *bool `json:"enableABTest,omitempty"`
	// Whether to enable Personalization.
	EnablePersonalization *bool `json:"enablePersonalization,omitempty"`
	// Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking) This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
	EnableReRanking *bool `json:"enableReRanking,omitempty"`
	// Whether to enable rules.
	EnableRules            *bool                   `json:"enableRules,omitempty"`
	ExactOnSingleWordQuery *ExactOnSingleWordQuery `json:"exactOnSingleWordQuery,omitempty"`
	FacetFilters           *FacetFilters           `json:"facetFilters,omitempty"`
	// Filter expression to only include items that match the filter criteria in the response.  You can use these filter expressions:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering).
	Filters *string `json:"filters,omitempty"`
	// Whether the search response should include detailed ranking information.
	GetRankingInfo *bool `json:"getRankingInfo,omitempty"`
	// HTML tag to insert after the highlighted parts in all highlighted results and snippets.
	HighlightPostTag *string `json:"highlightPostTag,omitempty"`
	// HTML tag to insert before the highlighted parts in all highlighted results and snippets.
	HighlightPreTag *string        `json:"highlightPreTag,omitempty"`
	IgnorePlurals   *IgnorePlurals `json:"ignorePlurals,omitempty"`
	// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
	MaxFacetHits *int32 `json:"maxFacetHits,omitempty"`
	// Minimum proximity score for two matching words This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.
	MinProximity *int32 `json:"minProximity,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor1Typo *int32 `json:"minWordSizefor1Typo,omitempty"`
	// Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
	MinWordSizefor2Typos *int32 `json:"minWordSizefor2Typos,omitempty"`
	// ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches) - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
	NaturalLanguages []SupportedLanguage           `json:"naturalLanguages,omitempty"`
	NumericFilters   *NumericFilters               `json:"numericFilters,omitempty"`
	OptionalFilters  *OptionalFilters              `json:"optionalFilters,omitempty"`
	OptionalWords    utils.Nullable[OptionalWords] `json:"optionalWords,omitempty"`
	// Whether to include this search when calculating processing-time percentiles.
	PercentileComputation *bool `json:"percentileComputation,omitempty"`
	// Impact that Personalization should have on this search The higher this value is, the more Personalization determines the ranking compared to other factors. For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
	PersonalizationImpact *int32 `json:"personalizationImpact,omitempty"`
	// Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations).
	QueryLanguages         []SupportedLanguage     `json:"queryLanguages,omitempty"`
	QueryType              *QueryType              `json:"queryType,omitempty"`
	RemoveStopWords        *RemoveStopWords        `json:"removeStopWords,omitempty"`
	RemoveWordsIfNoResults *RemoveWordsIfNoResults `json:"removeWordsIfNoResults,omitempty"`
	// Whether to replace a highlighted word with the matched synonym By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
	ReplaceSynonymsInHighlight *bool `json:"replaceSynonymsInHighlight,omitempty"`
	// Properties to include in the API response of search and browse requests By default, all response properties are included. To reduce the response size, you can select which properties should be included An empty list may lead to an empty API response (except properties you can't exclude) You can't exclude these properties: `message`, `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true Your search depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also depend on other properties, for example, for pagination. Before restricting the response size, check the impact on your search experience.
	ResponseFields []string `json:"responseFields,omitempty"`
	// Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted.
	RestrictHighlightAndSnippetArrays *bool `json:"restrictHighlightAndSnippetArrays,omitempty"`
	// Restricts a search to a subset of your searchable attributes. Attribute names are case-sensitive.
	RestrictSearchableAttributes []string `json:"restrictSearchableAttributes,omitempty"`
	// Assigns a rule context to the search query [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
	RuleContexts []string `json:"ruleContexts,omitempty"`
	// String used as an ellipsis indicator when a snippet is truncated.
	SnippetEllipsisText *string `json:"snippetEllipsisText,omitempty"`
	// Whether to take into account an index's synonyms for this search.
	Synonyms      *bool          `json:"synonyms,omitempty"`
	TypoTolerance *TypoTolerance `json:"typoTolerance,omitempty"`
}

type BaseInjectionQueryParametersOption func(f *BaseInjectionQueryParameters)

func WithBaseInjectionQueryParametersAdvancedSyntax(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AdvancedSyntax = &val
	}
}

func WithBaseInjectionQueryParametersAdvancedSyntaxFeatures(val []AdvancedSyntaxFeatures) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AdvancedSyntaxFeatures = val
	}
}

func WithBaseInjectionQueryParametersAllowTyposOnNumericTokens(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AllowTyposOnNumericTokens = &val
	}
}

func WithBaseInjectionQueryParametersAlternativesAsExact(val []AlternativesAsExact) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AlternativesAsExact = val
	}
}

func WithBaseInjectionQueryParametersAnalytics(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.Analytics = &val
	}
}

func WithBaseInjectionQueryParametersAttributeCriteriaComputedByMinProximity(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AttributeCriteriaComputedByMinProximity = &val
	}
}

func WithBaseInjectionQueryParametersAttributesToHighlight(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AttributesToHighlight = val
	}
}

func WithBaseInjectionQueryParametersAttributesToRetrieve(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AttributesToRetrieve = val
	}
}

func WithBaseInjectionQueryParametersAttributesToSnippet(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.AttributesToSnippet = val
	}
}

func WithBaseInjectionQueryParametersClickAnalytics(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.ClickAnalytics = &val
	}
}

func WithBaseInjectionQueryParametersDecompoundQuery(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.DecompoundQuery = &val
	}
}

func WithBaseInjectionQueryParametersDisableExactOnAttributes(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.DisableExactOnAttributes = val
	}
}

func WithBaseInjectionQueryParametersDisableTypoToleranceOnAttributes(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.DisableTypoToleranceOnAttributes = val
	}
}

func WithBaseInjectionQueryParametersDistinct(val Distinct) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.Distinct = &val
	}
}

func WithBaseInjectionQueryParametersEnableABTest(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.EnableABTest = &val
	}
}

func WithBaseInjectionQueryParametersEnablePersonalization(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.EnablePersonalization = &val
	}
}

func WithBaseInjectionQueryParametersEnableReRanking(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.EnableReRanking = &val
	}
}

func WithBaseInjectionQueryParametersEnableRules(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.EnableRules = &val
	}
}

func WithBaseInjectionQueryParametersExactOnSingleWordQuery(val ExactOnSingleWordQuery) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.ExactOnSingleWordQuery = &val
	}
}

func WithBaseInjectionQueryParametersFacetFilters(val FacetFilters) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.FacetFilters = &val
	}
}

func WithBaseInjectionQueryParametersFilters(val string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.Filters = &val
	}
}

func WithBaseInjectionQueryParametersGetRankingInfo(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.GetRankingInfo = &val
	}
}

func WithBaseInjectionQueryParametersHighlightPostTag(val string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.HighlightPostTag = &val
	}
}

func WithBaseInjectionQueryParametersHighlightPreTag(val string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.HighlightPreTag = &val
	}
}

func WithBaseInjectionQueryParametersIgnorePlurals(val IgnorePlurals) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.IgnorePlurals = &val
	}
}

func WithBaseInjectionQueryParametersMaxFacetHits(val int32) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.MaxFacetHits = &val
	}
}

func WithBaseInjectionQueryParametersMinProximity(val int32) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.MinProximity = &val
	}
}

func WithBaseInjectionQueryParametersMinWordSizefor1Typo(val int32) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.MinWordSizefor1Typo = &val
	}
}

func WithBaseInjectionQueryParametersMinWordSizefor2Typos(val int32) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.MinWordSizefor2Typos = &val
	}
}

func WithBaseInjectionQueryParametersNaturalLanguages(val []SupportedLanguage) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.NaturalLanguages = val
	}
}

func WithBaseInjectionQueryParametersNumericFilters(val NumericFilters) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.NumericFilters = &val
	}
}

func WithBaseInjectionQueryParametersOptionalFilters(val OptionalFilters) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.OptionalFilters = &val
	}
}

func WithBaseInjectionQueryParametersOptionalWords(val utils.Nullable[OptionalWords]) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.OptionalWords = val
	}
}

func WithBaseInjectionQueryParametersPercentileComputation(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.PercentileComputation = &val
	}
}

func WithBaseInjectionQueryParametersPersonalizationImpact(val int32) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.PersonalizationImpact = &val
	}
}

func WithBaseInjectionQueryParametersQueryLanguages(val []SupportedLanguage) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.QueryLanguages = val
	}
}

func WithBaseInjectionQueryParametersQueryType(val QueryType) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.QueryType = &val
	}
}

func WithBaseInjectionQueryParametersRemoveStopWords(val RemoveStopWords) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.RemoveStopWords = &val
	}
}

func WithBaseInjectionQueryParametersRemoveWordsIfNoResults(val RemoveWordsIfNoResults) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.RemoveWordsIfNoResults = &val
	}
}

func WithBaseInjectionQueryParametersReplaceSynonymsInHighlight(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.ReplaceSynonymsInHighlight = &val
	}
}

func WithBaseInjectionQueryParametersResponseFields(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.ResponseFields = val
	}
}

func WithBaseInjectionQueryParametersRestrictHighlightAndSnippetArrays(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.RestrictHighlightAndSnippetArrays = &val
	}
}

func WithBaseInjectionQueryParametersRestrictSearchableAttributes(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.RestrictSearchableAttributes = val
	}
}

func WithBaseInjectionQueryParametersRuleContexts(val []string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.RuleContexts = val
	}
}

func WithBaseInjectionQueryParametersSnippetEllipsisText(val string) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.SnippetEllipsisText = &val
	}
}

func WithBaseInjectionQueryParametersSynonyms(val bool) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.Synonyms = &val
	}
}

func WithBaseInjectionQueryParametersTypoTolerance(val TypoTolerance) BaseInjectionQueryParametersOption {
	return func(f *BaseInjectionQueryParameters) {
		f.TypoTolerance = &val
	}
}

// NewBaseInjectionQueryParameters instantiates a new BaseInjectionQueryParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewBaseInjectionQueryParameters(opts ...BaseInjectionQueryParametersOption) *BaseInjectionQueryParameters {
	this := &BaseInjectionQueryParameters{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyBaseInjectionQueryParameters return a pointer to an empty BaseInjectionQueryParameters object.
func NewEmptyBaseInjectionQueryParameters() *BaseInjectionQueryParameters {
	return &BaseInjectionQueryParameters{}
}

// GetAdvancedSyntax returns the AdvancedSyntax field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAdvancedSyntax() bool {
	if o == nil || o.AdvancedSyntax == nil {
		var ret bool
		return ret
	}
	return *o.AdvancedSyntax
}

// GetAdvancedSyntaxOk returns a tuple with the AdvancedSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAdvancedSyntaxOk() (*bool, bool) {
	if o == nil || o.AdvancedSyntax == nil {
		return nil, false
	}
	return o.AdvancedSyntax, true
}

// HasAdvancedSyntax returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAdvancedSyntax() bool {
	if o != nil && o.AdvancedSyntax != nil {
		return true
	}

	return false
}

// SetAdvancedSyntax gets a reference to the given bool and assigns it to the AdvancedSyntax field.
func (o *BaseInjectionQueryParameters) SetAdvancedSyntax(v bool) *BaseInjectionQueryParameters {
	o.AdvancedSyntax = &v
	return o
}

// GetAdvancedSyntaxFeatures returns the AdvancedSyntaxFeatures field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAdvancedSyntaxFeatures() []AdvancedSyntaxFeatures {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		var ret []AdvancedSyntaxFeatures
		return ret
	}
	return o.AdvancedSyntaxFeatures
}

// GetAdvancedSyntaxFeaturesOk returns a tuple with the AdvancedSyntaxFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAdvancedSyntaxFeaturesOk() ([]AdvancedSyntaxFeatures, bool) {
	if o == nil || o.AdvancedSyntaxFeatures == nil {
		return nil, false
	}
	return o.AdvancedSyntaxFeatures, true
}

// HasAdvancedSyntaxFeatures returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAdvancedSyntaxFeatures() bool {
	if o != nil && o.AdvancedSyntaxFeatures != nil {
		return true
	}

	return false
}

// SetAdvancedSyntaxFeatures gets a reference to the given []AdvancedSyntaxFeatures and assigns it to the AdvancedSyntaxFeatures field.
func (o *BaseInjectionQueryParameters) SetAdvancedSyntaxFeatures(v []AdvancedSyntaxFeatures) *BaseInjectionQueryParameters {
	o.AdvancedSyntaxFeatures = v
	return o
}

// GetAllowTyposOnNumericTokens returns the AllowTyposOnNumericTokens field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAllowTyposOnNumericTokens() bool {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		var ret bool
		return ret
	}
	return *o.AllowTyposOnNumericTokens
}

// GetAllowTyposOnNumericTokensOk returns a tuple with the AllowTyposOnNumericTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAllowTyposOnNumericTokensOk() (*bool, bool) {
	if o == nil || o.AllowTyposOnNumericTokens == nil {
		return nil, false
	}
	return o.AllowTyposOnNumericTokens, true
}

// HasAllowTyposOnNumericTokens returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAllowTyposOnNumericTokens() bool {
	if o != nil && o.AllowTyposOnNumericTokens != nil {
		return true
	}

	return false
}

// SetAllowTyposOnNumericTokens gets a reference to the given bool and assigns it to the AllowTyposOnNumericTokens field.
func (o *BaseInjectionQueryParameters) SetAllowTyposOnNumericTokens(v bool) *BaseInjectionQueryParameters {
	o.AllowTyposOnNumericTokens = &v
	return o
}

// GetAlternativesAsExact returns the AlternativesAsExact field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAlternativesAsExact() []AlternativesAsExact {
	if o == nil || o.AlternativesAsExact == nil {
		var ret []AlternativesAsExact
		return ret
	}
	return o.AlternativesAsExact
}

// GetAlternativesAsExactOk returns a tuple with the AlternativesAsExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAlternativesAsExactOk() ([]AlternativesAsExact, bool) {
	if o == nil || o.AlternativesAsExact == nil {
		return nil, false
	}
	return o.AlternativesAsExact, true
}

// HasAlternativesAsExact returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAlternativesAsExact() bool {
	if o != nil && o.AlternativesAsExact != nil {
		return true
	}

	return false
}

// SetAlternativesAsExact gets a reference to the given []AlternativesAsExact and assigns it to the AlternativesAsExact field.
func (o *BaseInjectionQueryParameters) SetAlternativesAsExact(v []AlternativesAsExact) *BaseInjectionQueryParameters {
	o.AlternativesAsExact = v
	return o
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAnalytics() bool {
	if o == nil || o.Analytics == nil {
		var ret bool
		return ret
	}
	return *o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAnalyticsOk() (*bool, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given bool and assigns it to the Analytics field.
func (o *BaseInjectionQueryParameters) SetAnalytics(v bool) *BaseInjectionQueryParameters {
	o.Analytics = &v
	return o
}

// GetAttributeCriteriaComputedByMinProximity returns the AttributeCriteriaComputedByMinProximity field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAttributeCriteriaComputedByMinProximity() bool {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		var ret bool
		return ret
	}
	return *o.AttributeCriteriaComputedByMinProximity
}

// GetAttributeCriteriaComputedByMinProximityOk returns a tuple with the AttributeCriteriaComputedByMinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAttributeCriteriaComputedByMinProximityOk() (*bool, bool) {
	if o == nil || o.AttributeCriteriaComputedByMinProximity == nil {
		return nil, false
	}
	return o.AttributeCriteriaComputedByMinProximity, true
}

// HasAttributeCriteriaComputedByMinProximity returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAttributeCriteriaComputedByMinProximity() bool {
	if o != nil && o.AttributeCriteriaComputedByMinProximity != nil {
		return true
	}

	return false
}

// SetAttributeCriteriaComputedByMinProximity gets a reference to the given bool and assigns it to the AttributeCriteriaComputedByMinProximity field.
func (o *BaseInjectionQueryParameters) SetAttributeCriteriaComputedByMinProximity(v bool) *BaseInjectionQueryParameters {
	o.AttributeCriteriaComputedByMinProximity = &v
	return o
}

// GetAttributesToHighlight returns the AttributesToHighlight field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAttributesToHighlight() []string {
	if o == nil || o.AttributesToHighlight == nil {
		var ret []string
		return ret
	}
	return o.AttributesToHighlight
}

// GetAttributesToHighlightOk returns a tuple with the AttributesToHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAttributesToHighlightOk() ([]string, bool) {
	if o == nil || o.AttributesToHighlight == nil {
		return nil, false
	}
	return o.AttributesToHighlight, true
}

// HasAttributesToHighlight returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAttributesToHighlight() bool {
	if o != nil && o.AttributesToHighlight != nil {
		return true
	}

	return false
}

// SetAttributesToHighlight gets a reference to the given []string and assigns it to the AttributesToHighlight field.
func (o *BaseInjectionQueryParameters) SetAttributesToHighlight(v []string) *BaseInjectionQueryParameters {
	o.AttributesToHighlight = v
	return o
}

// GetAttributesToRetrieve returns the AttributesToRetrieve field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAttributesToRetrieve() []string {
	if o == nil || o.AttributesToRetrieve == nil {
		var ret []string
		return ret
	}
	return o.AttributesToRetrieve
}

// GetAttributesToRetrieveOk returns a tuple with the AttributesToRetrieve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAttributesToRetrieveOk() ([]string, bool) {
	if o == nil || o.AttributesToRetrieve == nil {
		return nil, false
	}
	return o.AttributesToRetrieve, true
}

// HasAttributesToRetrieve returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAttributesToRetrieve() bool {
	if o != nil && o.AttributesToRetrieve != nil {
		return true
	}

	return false
}

// SetAttributesToRetrieve gets a reference to the given []string and assigns it to the AttributesToRetrieve field.
func (o *BaseInjectionQueryParameters) SetAttributesToRetrieve(v []string) *BaseInjectionQueryParameters {
	o.AttributesToRetrieve = v
	return o
}

// GetAttributesToSnippet returns the AttributesToSnippet field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetAttributesToSnippet() []string {
	if o == nil || o.AttributesToSnippet == nil {
		var ret []string
		return ret
	}
	return o.AttributesToSnippet
}

// GetAttributesToSnippetOk returns a tuple with the AttributesToSnippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetAttributesToSnippetOk() ([]string, bool) {
	if o == nil || o.AttributesToSnippet == nil {
		return nil, false
	}
	return o.AttributesToSnippet, true
}

// HasAttributesToSnippet returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasAttributesToSnippet() bool {
	if o != nil && o.AttributesToSnippet != nil {
		return true
	}

	return false
}

// SetAttributesToSnippet gets a reference to the given []string and assigns it to the AttributesToSnippet field.
func (o *BaseInjectionQueryParameters) SetAttributesToSnippet(v []string) *BaseInjectionQueryParameters {
	o.AttributesToSnippet = v
	return o
}

// GetClickAnalytics returns the ClickAnalytics field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetClickAnalytics() bool {
	if o == nil || o.ClickAnalytics == nil {
		var ret bool
		return ret
	}
	return *o.ClickAnalytics
}

// GetClickAnalyticsOk returns a tuple with the ClickAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetClickAnalyticsOk() (*bool, bool) {
	if o == nil || o.ClickAnalytics == nil {
		return nil, false
	}
	return o.ClickAnalytics, true
}

// HasClickAnalytics returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasClickAnalytics() bool {
	if o != nil && o.ClickAnalytics != nil {
		return true
	}

	return false
}

// SetClickAnalytics gets a reference to the given bool and assigns it to the ClickAnalytics field.
func (o *BaseInjectionQueryParameters) SetClickAnalytics(v bool) *BaseInjectionQueryParameters {
	o.ClickAnalytics = &v
	return o
}

// GetDecompoundQuery returns the DecompoundQuery field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetDecompoundQuery() bool {
	if o == nil || o.DecompoundQuery == nil {
		var ret bool
		return ret
	}
	return *o.DecompoundQuery
}

// GetDecompoundQueryOk returns a tuple with the DecompoundQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetDecompoundQueryOk() (*bool, bool) {
	if o == nil || o.DecompoundQuery == nil {
		return nil, false
	}
	return o.DecompoundQuery, true
}

// HasDecompoundQuery returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasDecompoundQuery() bool {
	if o != nil && o.DecompoundQuery != nil {
		return true
	}

	return false
}

// SetDecompoundQuery gets a reference to the given bool and assigns it to the DecompoundQuery field.
func (o *BaseInjectionQueryParameters) SetDecompoundQuery(v bool) *BaseInjectionQueryParameters {
	o.DecompoundQuery = &v
	return o
}

// GetDisableExactOnAttributes returns the DisableExactOnAttributes field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetDisableExactOnAttributes() []string {
	if o == nil || o.DisableExactOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableExactOnAttributes
}

// GetDisableExactOnAttributesOk returns a tuple with the DisableExactOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetDisableExactOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableExactOnAttributes == nil {
		return nil, false
	}
	return o.DisableExactOnAttributes, true
}

// HasDisableExactOnAttributes returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasDisableExactOnAttributes() bool {
	if o != nil && o.DisableExactOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableExactOnAttributes gets a reference to the given []string and assigns it to the DisableExactOnAttributes field.
func (o *BaseInjectionQueryParameters) SetDisableExactOnAttributes(v []string) *BaseInjectionQueryParameters {
	o.DisableExactOnAttributes = v
	return o
}

// GetDisableTypoToleranceOnAttributes returns the DisableTypoToleranceOnAttributes field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetDisableTypoToleranceOnAttributes() []string {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		var ret []string
		return ret
	}
	return o.DisableTypoToleranceOnAttributes
}

// GetDisableTypoToleranceOnAttributesOk returns a tuple with the DisableTypoToleranceOnAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetDisableTypoToleranceOnAttributesOk() ([]string, bool) {
	if o == nil || o.DisableTypoToleranceOnAttributes == nil {
		return nil, false
	}
	return o.DisableTypoToleranceOnAttributes, true
}

// HasDisableTypoToleranceOnAttributes returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasDisableTypoToleranceOnAttributes() bool {
	if o != nil && o.DisableTypoToleranceOnAttributes != nil {
		return true
	}

	return false
}

// SetDisableTypoToleranceOnAttributes gets a reference to the given []string and assigns it to the DisableTypoToleranceOnAttributes field.
func (o *BaseInjectionQueryParameters) SetDisableTypoToleranceOnAttributes(v []string) *BaseInjectionQueryParameters {
	o.DisableTypoToleranceOnAttributes = v
	return o
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetDistinct() Distinct {
	if o == nil || o.Distinct == nil {
		var ret Distinct
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetDistinctOk() (*Distinct, bool) {
	if o == nil || o.Distinct == nil {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasDistinct() bool {
	if o != nil && o.Distinct != nil {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given Distinct and assigns it to the Distinct field.
func (o *BaseInjectionQueryParameters) SetDistinct(v *Distinct) *BaseInjectionQueryParameters {
	o.Distinct = v
	return o
}

// GetEnableABTest returns the EnableABTest field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetEnableABTest() bool {
	if o == nil || o.EnableABTest == nil {
		var ret bool
		return ret
	}
	return *o.EnableABTest
}

// GetEnableABTestOk returns a tuple with the EnableABTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetEnableABTestOk() (*bool, bool) {
	if o == nil || o.EnableABTest == nil {
		return nil, false
	}
	return o.EnableABTest, true
}

// HasEnableABTest returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasEnableABTest() bool {
	if o != nil && o.EnableABTest != nil {
		return true
	}

	return false
}

// SetEnableABTest gets a reference to the given bool and assigns it to the EnableABTest field.
func (o *BaseInjectionQueryParameters) SetEnableABTest(v bool) *BaseInjectionQueryParameters {
	o.EnableABTest = &v
	return o
}

// GetEnablePersonalization returns the EnablePersonalization field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetEnablePersonalization() bool {
	if o == nil || o.EnablePersonalization == nil {
		var ret bool
		return ret
	}
	return *o.EnablePersonalization
}

// GetEnablePersonalizationOk returns a tuple with the EnablePersonalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetEnablePersonalizationOk() (*bool, bool) {
	if o == nil || o.EnablePersonalization == nil {
		return nil, false
	}
	return o.EnablePersonalization, true
}

// HasEnablePersonalization returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasEnablePersonalization() bool {
	if o != nil && o.EnablePersonalization != nil {
		return true
	}

	return false
}

// SetEnablePersonalization gets a reference to the given bool and assigns it to the EnablePersonalization field.
func (o *BaseInjectionQueryParameters) SetEnablePersonalization(v bool) *BaseInjectionQueryParameters {
	o.EnablePersonalization = &v
	return o
}

// GetEnableReRanking returns the EnableReRanking field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetEnableReRanking() bool {
	if o == nil || o.EnableReRanking == nil {
		var ret bool
		return ret
	}
	return *o.EnableReRanking
}

// GetEnableReRankingOk returns a tuple with the EnableReRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetEnableReRankingOk() (*bool, bool) {
	if o == nil || o.EnableReRanking == nil {
		return nil, false
	}
	return o.EnableReRanking, true
}

// HasEnableReRanking returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasEnableReRanking() bool {
	if o != nil && o.EnableReRanking != nil {
		return true
	}

	return false
}

// SetEnableReRanking gets a reference to the given bool and assigns it to the EnableReRanking field.
func (o *BaseInjectionQueryParameters) SetEnableReRanking(v bool) *BaseInjectionQueryParameters {
	o.EnableReRanking = &v
	return o
}

// GetEnableRules returns the EnableRules field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetEnableRules() bool {
	if o == nil || o.EnableRules == nil {
		var ret bool
		return ret
	}
	return *o.EnableRules
}

// GetEnableRulesOk returns a tuple with the EnableRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetEnableRulesOk() (*bool, bool) {
	if o == nil || o.EnableRules == nil {
		return nil, false
	}
	return o.EnableRules, true
}

// HasEnableRules returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasEnableRules() bool {
	if o != nil && o.EnableRules != nil {
		return true
	}

	return false
}

// SetEnableRules gets a reference to the given bool and assigns it to the EnableRules field.
func (o *BaseInjectionQueryParameters) SetEnableRules(v bool) *BaseInjectionQueryParameters {
	o.EnableRules = &v
	return o
}

// GetExactOnSingleWordQuery returns the ExactOnSingleWordQuery field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetExactOnSingleWordQuery() ExactOnSingleWordQuery {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		var ret ExactOnSingleWordQuery
		return ret
	}
	return *o.ExactOnSingleWordQuery
}

// GetExactOnSingleWordQueryOk returns a tuple with the ExactOnSingleWordQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetExactOnSingleWordQueryOk() (*ExactOnSingleWordQuery, bool) {
	if o == nil || o.ExactOnSingleWordQuery == nil {
		return nil, false
	}
	return o.ExactOnSingleWordQuery, true
}

// HasExactOnSingleWordQuery returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasExactOnSingleWordQuery() bool {
	if o != nil && o.ExactOnSingleWordQuery != nil {
		return true
	}

	return false
}

// SetExactOnSingleWordQuery gets a reference to the given ExactOnSingleWordQuery and assigns it to the ExactOnSingleWordQuery field.
func (o *BaseInjectionQueryParameters) SetExactOnSingleWordQuery(v ExactOnSingleWordQuery) *BaseInjectionQueryParameters {
	o.ExactOnSingleWordQuery = &v
	return o
}

// GetFacetFilters returns the FacetFilters field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetFacetFilters() FacetFilters {
	if o == nil || o.FacetFilters == nil {
		var ret FacetFilters
		return ret
	}
	return *o.FacetFilters
}

// GetFacetFiltersOk returns a tuple with the FacetFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetFacetFiltersOk() (*FacetFilters, bool) {
	if o == nil || o.FacetFilters == nil {
		return nil, false
	}
	return o.FacetFilters, true
}

// HasFacetFilters returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasFacetFilters() bool {
	if o != nil && o.FacetFilters != nil {
		return true
	}

	return false
}

// SetFacetFilters gets a reference to the given FacetFilters and assigns it to the FacetFilters field.
func (o *BaseInjectionQueryParameters) SetFacetFilters(v *FacetFilters) *BaseInjectionQueryParameters {
	o.FacetFilters = v
	return o
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetFilters() string {
	if o == nil || o.Filters == nil {
		var ret string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetFiltersOk() (*string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given string and assigns it to the Filters field.
func (o *BaseInjectionQueryParameters) SetFilters(v string) *BaseInjectionQueryParameters {
	o.Filters = &v
	return o
}

// GetGetRankingInfo returns the GetRankingInfo field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetGetRankingInfo() bool {
	if o == nil || o.GetRankingInfo == nil {
		var ret bool
		return ret
	}
	return *o.GetRankingInfo
}

// GetGetRankingInfoOk returns a tuple with the GetRankingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetGetRankingInfoOk() (*bool, bool) {
	if o == nil || o.GetRankingInfo == nil {
		return nil, false
	}
	return o.GetRankingInfo, true
}

// HasGetRankingInfo returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasGetRankingInfo() bool {
	if o != nil && o.GetRankingInfo != nil {
		return true
	}

	return false
}

// SetGetRankingInfo gets a reference to the given bool and assigns it to the GetRankingInfo field.
func (o *BaseInjectionQueryParameters) SetGetRankingInfo(v bool) *BaseInjectionQueryParameters {
	o.GetRankingInfo = &v
	return o
}

// GetHighlightPostTag returns the HighlightPostTag field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetHighlightPostTag() string {
	if o == nil || o.HighlightPostTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPostTag
}

// GetHighlightPostTagOk returns a tuple with the HighlightPostTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetHighlightPostTagOk() (*string, bool) {
	if o == nil || o.HighlightPostTag == nil {
		return nil, false
	}
	return o.HighlightPostTag, true
}

// HasHighlightPostTag returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasHighlightPostTag() bool {
	if o != nil && o.HighlightPostTag != nil {
		return true
	}

	return false
}

// SetHighlightPostTag gets a reference to the given string and assigns it to the HighlightPostTag field.
func (o *BaseInjectionQueryParameters) SetHighlightPostTag(v string) *BaseInjectionQueryParameters {
	o.HighlightPostTag = &v
	return o
}

// GetHighlightPreTag returns the HighlightPreTag field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetHighlightPreTag() string {
	if o == nil || o.HighlightPreTag == nil {
		var ret string
		return ret
	}
	return *o.HighlightPreTag
}

// GetHighlightPreTagOk returns a tuple with the HighlightPreTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetHighlightPreTagOk() (*string, bool) {
	if o == nil || o.HighlightPreTag == nil {
		return nil, false
	}
	return o.HighlightPreTag, true
}

// HasHighlightPreTag returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasHighlightPreTag() bool {
	if o != nil && o.HighlightPreTag != nil {
		return true
	}

	return false
}

// SetHighlightPreTag gets a reference to the given string and assigns it to the HighlightPreTag field.
func (o *BaseInjectionQueryParameters) SetHighlightPreTag(v string) *BaseInjectionQueryParameters {
	o.HighlightPreTag = &v
	return o
}

// GetIgnorePlurals returns the IgnorePlurals field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetIgnorePlurals() IgnorePlurals {
	if o == nil || o.IgnorePlurals == nil {
		var ret IgnorePlurals
		return ret
	}
	return *o.IgnorePlurals
}

// GetIgnorePluralsOk returns a tuple with the IgnorePlurals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetIgnorePluralsOk() (*IgnorePlurals, bool) {
	if o == nil || o.IgnorePlurals == nil {
		return nil, false
	}
	return o.IgnorePlurals, true
}

// HasIgnorePlurals returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasIgnorePlurals() bool {
	if o != nil && o.IgnorePlurals != nil {
		return true
	}

	return false
}

// SetIgnorePlurals gets a reference to the given IgnorePlurals and assigns it to the IgnorePlurals field.
func (o *BaseInjectionQueryParameters) SetIgnorePlurals(v *IgnorePlurals) *BaseInjectionQueryParameters {
	o.IgnorePlurals = v
	return o
}

// GetMaxFacetHits returns the MaxFacetHits field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetMaxFacetHits() int32 {
	if o == nil || o.MaxFacetHits == nil {
		var ret int32
		return ret
	}
	return *o.MaxFacetHits
}

// GetMaxFacetHitsOk returns a tuple with the MaxFacetHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetMaxFacetHitsOk() (*int32, bool) {
	if o == nil || o.MaxFacetHits == nil {
		return nil, false
	}
	return o.MaxFacetHits, true
}

// HasMaxFacetHits returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasMaxFacetHits() bool {
	if o != nil && o.MaxFacetHits != nil {
		return true
	}

	return false
}

// SetMaxFacetHits gets a reference to the given int32 and assigns it to the MaxFacetHits field.
func (o *BaseInjectionQueryParameters) SetMaxFacetHits(v int32) *BaseInjectionQueryParameters {
	o.MaxFacetHits = &v
	return o
}

// GetMinProximity returns the MinProximity field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetMinProximity() int32 {
	if o == nil || o.MinProximity == nil {
		var ret int32
		return ret
	}
	return *o.MinProximity
}

// GetMinProximityOk returns a tuple with the MinProximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetMinProximityOk() (*int32, bool) {
	if o == nil || o.MinProximity == nil {
		return nil, false
	}
	return o.MinProximity, true
}

// HasMinProximity returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasMinProximity() bool {
	if o != nil && o.MinProximity != nil {
		return true
	}

	return false
}

// SetMinProximity gets a reference to the given int32 and assigns it to the MinProximity field.
func (o *BaseInjectionQueryParameters) SetMinProximity(v int32) *BaseInjectionQueryParameters {
	o.MinProximity = &v
	return o
}

// GetMinWordSizefor1Typo returns the MinWordSizefor1Typo field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetMinWordSizefor1Typo() int32 {
	if o == nil || o.MinWordSizefor1Typo == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor1Typo
}

// GetMinWordSizefor1TypoOk returns a tuple with the MinWordSizefor1Typo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetMinWordSizefor1TypoOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor1Typo == nil {
		return nil, false
	}
	return o.MinWordSizefor1Typo, true
}

// HasMinWordSizefor1Typo returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasMinWordSizefor1Typo() bool {
	if o != nil && o.MinWordSizefor1Typo != nil {
		return true
	}

	return false
}

// SetMinWordSizefor1Typo gets a reference to the given int32 and assigns it to the MinWordSizefor1Typo field.
func (o *BaseInjectionQueryParameters) SetMinWordSizefor1Typo(v int32) *BaseInjectionQueryParameters {
	o.MinWordSizefor1Typo = &v
	return o
}

// GetMinWordSizefor2Typos returns the MinWordSizefor2Typos field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetMinWordSizefor2Typos() int32 {
	if o == nil || o.MinWordSizefor2Typos == nil {
		var ret int32
		return ret
	}
	return *o.MinWordSizefor2Typos
}

// GetMinWordSizefor2TyposOk returns a tuple with the MinWordSizefor2Typos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetMinWordSizefor2TyposOk() (*int32, bool) {
	if o == nil || o.MinWordSizefor2Typos == nil {
		return nil, false
	}
	return o.MinWordSizefor2Typos, true
}

// HasMinWordSizefor2Typos returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasMinWordSizefor2Typos() bool {
	if o != nil && o.MinWordSizefor2Typos != nil {
		return true
	}

	return false
}

// SetMinWordSizefor2Typos gets a reference to the given int32 and assigns it to the MinWordSizefor2Typos field.
func (o *BaseInjectionQueryParameters) SetMinWordSizefor2Typos(v int32) *BaseInjectionQueryParameters {
	o.MinWordSizefor2Typos = &v
	return o
}

// GetNaturalLanguages returns the NaturalLanguages field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetNaturalLanguages() []SupportedLanguage {
	if o == nil || o.NaturalLanguages == nil {
		var ret []SupportedLanguage
		return ret
	}
	return o.NaturalLanguages
}

// GetNaturalLanguagesOk returns a tuple with the NaturalLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetNaturalLanguagesOk() ([]SupportedLanguage, bool) {
	if o == nil || o.NaturalLanguages == nil {
		return nil, false
	}
	return o.NaturalLanguages, true
}

// HasNaturalLanguages returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasNaturalLanguages() bool {
	if o != nil && o.NaturalLanguages != nil {
		return true
	}

	return false
}

// SetNaturalLanguages gets a reference to the given []SupportedLanguage and assigns it to the NaturalLanguages field.
func (o *BaseInjectionQueryParameters) SetNaturalLanguages(v []SupportedLanguage) *BaseInjectionQueryParameters {
	o.NaturalLanguages = v
	return o
}

// GetNumericFilters returns the NumericFilters field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetNumericFilters() NumericFilters {
	if o == nil || o.NumericFilters == nil {
		var ret NumericFilters
		return ret
	}
	return *o.NumericFilters
}

// GetNumericFiltersOk returns a tuple with the NumericFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetNumericFiltersOk() (*NumericFilters, bool) {
	if o == nil || o.NumericFilters == nil {
		return nil, false
	}
	return o.NumericFilters, true
}

// HasNumericFilters returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasNumericFilters() bool {
	if o != nil && o.NumericFilters != nil {
		return true
	}

	return false
}

// SetNumericFilters gets a reference to the given NumericFilters and assigns it to the NumericFilters field.
func (o *BaseInjectionQueryParameters) SetNumericFilters(v *NumericFilters) *BaseInjectionQueryParameters {
	o.NumericFilters = v
	return o
}

// GetOptionalFilters returns the OptionalFilters field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetOptionalFilters() OptionalFilters {
	if o == nil || o.OptionalFilters == nil {
		var ret OptionalFilters
		return ret
	}
	return *o.OptionalFilters
}

// GetOptionalFiltersOk returns a tuple with the OptionalFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetOptionalFiltersOk() (*OptionalFilters, bool) {
	if o == nil || o.OptionalFilters == nil {
		return nil, false
	}
	return o.OptionalFilters, true
}

// HasOptionalFilters returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasOptionalFilters() bool {
	if o != nil && o.OptionalFilters != nil {
		return true
	}

	return false
}

// SetOptionalFilters gets a reference to the given OptionalFilters and assigns it to the OptionalFilters field.
func (o *BaseInjectionQueryParameters) SetOptionalFilters(v *OptionalFilters) *BaseInjectionQueryParameters {
	o.OptionalFilters = v
	return o
}

// GetOptionalWords returns the OptionalWords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseInjectionQueryParameters) GetOptionalWords() OptionalWords {
	if o == nil || o.OptionalWords.Get() == nil {
		var ret OptionalWords
		return ret
	}
	return *o.OptionalWords.Get()
}

// GetOptionalWordsOk returns a tuple with the OptionalWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
func (o *BaseInjectionQueryParameters) GetOptionalWordsOk() (*OptionalWords, bool) {
	if o == nil {
		return nil, false
	}
	return o.OptionalWords.Get(), o.OptionalWords.IsSet()
}

// HasOptionalWords returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasOptionalWords() bool {
	if o != nil && o.OptionalWords.IsSet() {
		return true
	}

	return false
}

// SetOptionalWords gets a reference to the given utils.Nullable[OptionalWords] and assigns it to the OptionalWords field.
func (o *BaseInjectionQueryParameters) SetOptionalWords(v *OptionalWords) *BaseInjectionQueryParameters {
	o.OptionalWords.Set(v)
	return o
}

// SetOptionalWordsNil sets the value for OptionalWords to be an explicit nil.
func (o *BaseInjectionQueryParameters) SetOptionalWordsNil() {
	o.OptionalWords.Set(nil)
}

// UnsetOptionalWords ensures that no value is present for OptionalWords, not even an explicit nil.
func (o *BaseInjectionQueryParameters) UnsetOptionalWords() {
	o.OptionalWords.Unset()
}

// GetPercentileComputation returns the PercentileComputation field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetPercentileComputation() bool {
	if o == nil || o.PercentileComputation == nil {
		var ret bool
		return ret
	}
	return *o.PercentileComputation
}

// GetPercentileComputationOk returns a tuple with the PercentileComputation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetPercentileComputationOk() (*bool, bool) {
	if o == nil || o.PercentileComputation == nil {
		return nil, false
	}
	return o.PercentileComputation, true
}

// HasPercentileComputation returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasPercentileComputation() bool {
	if o != nil && o.PercentileComputation != nil {
		return true
	}

	return false
}

// SetPercentileComputation gets a reference to the given bool and assigns it to the PercentileComputation field.
func (o *BaseInjectionQueryParameters) SetPercentileComputation(v bool) *BaseInjectionQueryParameters {
	o.PercentileComputation = &v
	return o
}

// GetPersonalizationImpact returns the PersonalizationImpact field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetPersonalizationImpact() int32 {
	if o == nil || o.PersonalizationImpact == nil {
		var ret int32
		return ret
	}
	return *o.PersonalizationImpact
}

// GetPersonalizationImpactOk returns a tuple with the PersonalizationImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetPersonalizationImpactOk() (*int32, bool) {
	if o == nil || o.PersonalizationImpact == nil {
		return nil, false
	}
	return o.PersonalizationImpact, true
}

// HasPersonalizationImpact returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasPersonalizationImpact() bool {
	if o != nil && o.PersonalizationImpact != nil {
		return true
	}

	return false
}

// SetPersonalizationImpact gets a reference to the given int32 and assigns it to the PersonalizationImpact field.
func (o *BaseInjectionQueryParameters) SetPersonalizationImpact(v int32) *BaseInjectionQueryParameters {
	o.PersonalizationImpact = &v
	return o
}

// GetQueryLanguages returns the QueryLanguages field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetQueryLanguages() []SupportedLanguage {
	if o == nil || o.QueryLanguages == nil {
		var ret []SupportedLanguage
		return ret
	}
	return o.QueryLanguages
}

// GetQueryLanguagesOk returns a tuple with the QueryLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetQueryLanguagesOk() ([]SupportedLanguage, bool) {
	if o == nil || o.QueryLanguages == nil {
		return nil, false
	}
	return o.QueryLanguages, true
}

// HasQueryLanguages returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasQueryLanguages() bool {
	if o != nil && o.QueryLanguages != nil {
		return true
	}

	return false
}

// SetQueryLanguages gets a reference to the given []SupportedLanguage and assigns it to the QueryLanguages field.
func (o *BaseInjectionQueryParameters) SetQueryLanguages(v []SupportedLanguage) *BaseInjectionQueryParameters {
	o.QueryLanguages = v
	return o
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetQueryType() QueryType {
	if o == nil || o.QueryType == nil {
		var ret QueryType
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetQueryTypeOk() (*QueryType, bool) {
	if o == nil || o.QueryType == nil {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasQueryType() bool {
	if o != nil && o.QueryType != nil {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given QueryType and assigns it to the QueryType field.
func (o *BaseInjectionQueryParameters) SetQueryType(v QueryType) *BaseInjectionQueryParameters {
	o.QueryType = &v
	return o
}

// GetRemoveStopWords returns the RemoveStopWords field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetRemoveStopWords() RemoveStopWords {
	if o == nil || o.RemoveStopWords == nil {
		var ret RemoveStopWords
		return ret
	}
	return *o.RemoveStopWords
}

// GetRemoveStopWordsOk returns a tuple with the RemoveStopWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetRemoveStopWordsOk() (*RemoveStopWords, bool) {
	if o == nil || o.RemoveStopWords == nil {
		return nil, false
	}
	return o.RemoveStopWords, true
}

// HasRemoveStopWords returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasRemoveStopWords() bool {
	if o != nil && o.RemoveStopWords != nil {
		return true
	}

	return false
}

// SetRemoveStopWords gets a reference to the given RemoveStopWords and assigns it to the RemoveStopWords field.
func (o *BaseInjectionQueryParameters) SetRemoveStopWords(v *RemoveStopWords) *BaseInjectionQueryParameters {
	o.RemoveStopWords = v
	return o
}

// GetRemoveWordsIfNoResults returns the RemoveWordsIfNoResults field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetRemoveWordsIfNoResults() RemoveWordsIfNoResults {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		var ret RemoveWordsIfNoResults
		return ret
	}
	return *o.RemoveWordsIfNoResults
}

// GetRemoveWordsIfNoResultsOk returns a tuple with the RemoveWordsIfNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetRemoveWordsIfNoResultsOk() (*RemoveWordsIfNoResults, bool) {
	if o == nil || o.RemoveWordsIfNoResults == nil {
		return nil, false
	}
	return o.RemoveWordsIfNoResults, true
}

// HasRemoveWordsIfNoResults returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasRemoveWordsIfNoResults() bool {
	if o != nil && o.RemoveWordsIfNoResults != nil {
		return true
	}

	return false
}

// SetRemoveWordsIfNoResults gets a reference to the given RemoveWordsIfNoResults and assigns it to the RemoveWordsIfNoResults field.
func (o *BaseInjectionQueryParameters) SetRemoveWordsIfNoResults(v RemoveWordsIfNoResults) *BaseInjectionQueryParameters {
	o.RemoveWordsIfNoResults = &v
	return o
}

// GetReplaceSynonymsInHighlight returns the ReplaceSynonymsInHighlight field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetReplaceSynonymsInHighlight() bool {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceSynonymsInHighlight
}

// GetReplaceSynonymsInHighlightOk returns a tuple with the ReplaceSynonymsInHighlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetReplaceSynonymsInHighlightOk() (*bool, bool) {
	if o == nil || o.ReplaceSynonymsInHighlight == nil {
		return nil, false
	}
	return o.ReplaceSynonymsInHighlight, true
}

// HasReplaceSynonymsInHighlight returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasReplaceSynonymsInHighlight() bool {
	if o != nil && o.ReplaceSynonymsInHighlight != nil {
		return true
	}

	return false
}

// SetReplaceSynonymsInHighlight gets a reference to the given bool and assigns it to the ReplaceSynonymsInHighlight field.
func (o *BaseInjectionQueryParameters) SetReplaceSynonymsInHighlight(v bool) *BaseInjectionQueryParameters {
	o.ReplaceSynonymsInHighlight = &v
	return o
}

// GetResponseFields returns the ResponseFields field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetResponseFields() []string {
	if o == nil || o.ResponseFields == nil {
		var ret []string
		return ret
	}
	return o.ResponseFields
}

// GetResponseFieldsOk returns a tuple with the ResponseFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetResponseFieldsOk() ([]string, bool) {
	if o == nil || o.ResponseFields == nil {
		return nil, false
	}
	return o.ResponseFields, true
}

// HasResponseFields returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasResponseFields() bool {
	if o != nil && o.ResponseFields != nil {
		return true
	}

	return false
}

// SetResponseFields gets a reference to the given []string and assigns it to the ResponseFields field.
func (o *BaseInjectionQueryParameters) SetResponseFields(v []string) *BaseInjectionQueryParameters {
	o.ResponseFields = v
	return o
}

// GetRestrictHighlightAndSnippetArrays returns the RestrictHighlightAndSnippetArrays field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetRestrictHighlightAndSnippetArrays() bool {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		var ret bool
		return ret
	}
	return *o.RestrictHighlightAndSnippetArrays
}

// GetRestrictHighlightAndSnippetArraysOk returns a tuple with the RestrictHighlightAndSnippetArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetRestrictHighlightAndSnippetArraysOk() (*bool, bool) {
	if o == nil || o.RestrictHighlightAndSnippetArrays == nil {
		return nil, false
	}
	return o.RestrictHighlightAndSnippetArrays, true
}

// HasRestrictHighlightAndSnippetArrays returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasRestrictHighlightAndSnippetArrays() bool {
	if o != nil && o.RestrictHighlightAndSnippetArrays != nil {
		return true
	}

	return false
}

// SetRestrictHighlightAndSnippetArrays gets a reference to the given bool and assigns it to the RestrictHighlightAndSnippetArrays field.
func (o *BaseInjectionQueryParameters) SetRestrictHighlightAndSnippetArrays(v bool) *BaseInjectionQueryParameters {
	o.RestrictHighlightAndSnippetArrays = &v
	return o
}

// GetRestrictSearchableAttributes returns the RestrictSearchableAttributes field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetRestrictSearchableAttributes() []string {
	if o == nil || o.RestrictSearchableAttributes == nil {
		var ret []string
		return ret
	}
	return o.RestrictSearchableAttributes
}

// GetRestrictSearchableAttributesOk returns a tuple with the RestrictSearchableAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetRestrictSearchableAttributesOk() ([]string, bool) {
	if o == nil || o.RestrictSearchableAttributes == nil {
		return nil, false
	}
	return o.RestrictSearchableAttributes, true
}

// HasRestrictSearchableAttributes returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasRestrictSearchableAttributes() bool {
	if o != nil && o.RestrictSearchableAttributes != nil {
		return true
	}

	return false
}

// SetRestrictSearchableAttributes gets a reference to the given []string and assigns it to the RestrictSearchableAttributes field.
func (o *BaseInjectionQueryParameters) SetRestrictSearchableAttributes(v []string) *BaseInjectionQueryParameters {
	o.RestrictSearchableAttributes = v
	return o
}

// GetRuleContexts returns the RuleContexts field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetRuleContexts() []string {
	if o == nil || o.RuleContexts == nil {
		var ret []string
		return ret
	}
	return o.RuleContexts
}

// GetRuleContextsOk returns a tuple with the RuleContexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetRuleContextsOk() ([]string, bool) {
	if o == nil || o.RuleContexts == nil {
		return nil, false
	}
	return o.RuleContexts, true
}

// HasRuleContexts returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasRuleContexts() bool {
	if o != nil && o.RuleContexts != nil {
		return true
	}

	return false
}

// SetRuleContexts gets a reference to the given []string and assigns it to the RuleContexts field.
func (o *BaseInjectionQueryParameters) SetRuleContexts(v []string) *BaseInjectionQueryParameters {
	o.RuleContexts = v
	return o
}

// GetSnippetEllipsisText returns the SnippetEllipsisText field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetSnippetEllipsisText() string {
	if o == nil || o.SnippetEllipsisText == nil {
		var ret string
		return ret
	}
	return *o.SnippetEllipsisText
}

// GetSnippetEllipsisTextOk returns a tuple with the SnippetEllipsisText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetSnippetEllipsisTextOk() (*string, bool) {
	if o == nil || o.SnippetEllipsisText == nil {
		return nil, false
	}
	return o.SnippetEllipsisText, true
}

// HasSnippetEllipsisText returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasSnippetEllipsisText() bool {
	if o != nil && o.SnippetEllipsisText != nil {
		return true
	}

	return false
}

// SetSnippetEllipsisText gets a reference to the given string and assigns it to the SnippetEllipsisText field.
func (o *BaseInjectionQueryParameters) SetSnippetEllipsisText(v string) *BaseInjectionQueryParameters {
	o.SnippetEllipsisText = &v
	return o
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetSynonyms() bool {
	if o == nil || o.Synonyms == nil {
		var ret bool
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetSynonymsOk() (*bool, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given bool and assigns it to the Synonyms field.
func (o *BaseInjectionQueryParameters) SetSynonyms(v bool) *BaseInjectionQueryParameters {
	o.Synonyms = &v
	return o
}

// GetTypoTolerance returns the TypoTolerance field value if set, zero value otherwise.
func (o *BaseInjectionQueryParameters) GetTypoTolerance() TypoTolerance {
	if o == nil || o.TypoTolerance == nil {
		var ret TypoTolerance
		return ret
	}
	return *o.TypoTolerance
}

// GetTypoToleranceOk returns a tuple with the TypoTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseInjectionQueryParameters) GetTypoToleranceOk() (*TypoTolerance, bool) {
	if o == nil || o.TypoTolerance == nil {
		return nil, false
	}
	return o.TypoTolerance, true
}

// HasTypoTolerance returns a boolean if a field has been set.
func (o *BaseInjectionQueryParameters) HasTypoTolerance() bool {
	if o != nil && o.TypoTolerance != nil {
		return true
	}

	return false
}

// SetTypoTolerance gets a reference to the given TypoTolerance and assigns it to the TypoTolerance field.
func (o *BaseInjectionQueryParameters) SetTypoTolerance(v *TypoTolerance) *BaseInjectionQueryParameters {
	o.TypoTolerance = v
	return o
}

func (o BaseInjectionQueryParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.AdvancedSyntax != nil {
		toSerialize["advancedSyntax"] = o.AdvancedSyntax
	}
	if o.AdvancedSyntaxFeatures != nil {
		toSerialize["advancedSyntaxFeatures"] = o.AdvancedSyntaxFeatures
	}
	if o.AllowTyposOnNumericTokens != nil {
		toSerialize["allowTyposOnNumericTokens"] = o.AllowTyposOnNumericTokens
	}
	if o.AlternativesAsExact != nil {
		toSerialize["alternativesAsExact"] = o.AlternativesAsExact
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.AttributeCriteriaComputedByMinProximity != nil {
		toSerialize["attributeCriteriaComputedByMinProximity"] = o.AttributeCriteriaComputedByMinProximity
	}
	if o.AttributesToHighlight != nil {
		toSerialize["attributesToHighlight"] = o.AttributesToHighlight
	}
	if o.AttributesToRetrieve != nil {
		toSerialize["attributesToRetrieve"] = o.AttributesToRetrieve
	}
	if o.AttributesToSnippet != nil {
		toSerialize["attributesToSnippet"] = o.AttributesToSnippet
	}
	if o.ClickAnalytics != nil {
		toSerialize["clickAnalytics"] = o.ClickAnalytics
	}
	if o.DecompoundQuery != nil {
		toSerialize["decompoundQuery"] = o.DecompoundQuery
	}
	if o.DisableExactOnAttributes != nil {
		toSerialize["disableExactOnAttributes"] = o.DisableExactOnAttributes
	}
	if o.DisableTypoToleranceOnAttributes != nil {
		toSerialize["disableTypoToleranceOnAttributes"] = o.DisableTypoToleranceOnAttributes
	}
	if o.Distinct != nil {
		toSerialize["distinct"] = o.Distinct
	}
	if o.EnableABTest != nil {
		toSerialize["enableABTest"] = o.EnableABTest
	}
	if o.EnablePersonalization != nil {
		toSerialize["enablePersonalization"] = o.EnablePersonalization
	}
	if o.EnableReRanking != nil {
		toSerialize["enableReRanking"] = o.EnableReRanking
	}
	if o.EnableRules != nil {
		toSerialize["enableRules"] = o.EnableRules
	}
	if o.ExactOnSingleWordQuery != nil {
		toSerialize["exactOnSingleWordQuery"] = o.ExactOnSingleWordQuery
	}
	if o.FacetFilters != nil {
		toSerialize["facetFilters"] = o.FacetFilters
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.GetRankingInfo != nil {
		toSerialize["getRankingInfo"] = o.GetRankingInfo
	}
	if o.HighlightPostTag != nil {
		toSerialize["highlightPostTag"] = o.HighlightPostTag
	}
	if o.HighlightPreTag != nil {
		toSerialize["highlightPreTag"] = o.HighlightPreTag
	}
	if o.IgnorePlurals != nil {
		toSerialize["ignorePlurals"] = o.IgnorePlurals
	}
	if o.MaxFacetHits != nil {
		toSerialize["maxFacetHits"] = o.MaxFacetHits
	}
	if o.MinProximity != nil {
		toSerialize["minProximity"] = o.MinProximity
	}
	if o.MinWordSizefor1Typo != nil {
		toSerialize["minWordSizefor1Typo"] = o.MinWordSizefor1Typo
	}
	if o.MinWordSizefor2Typos != nil {
		toSerialize["minWordSizefor2Typos"] = o.MinWordSizefor2Typos
	}
	if o.NaturalLanguages != nil {
		toSerialize["naturalLanguages"] = o.NaturalLanguages
	}
	if o.NumericFilters != nil {
		toSerialize["numericFilters"] = o.NumericFilters
	}
	if o.OptionalFilters != nil {
		toSerialize["optionalFilters"] = o.OptionalFilters
	}
	if o.OptionalWords.IsSet() {
		toSerialize["optionalWords"] = o.OptionalWords.Get()
	}
	if o.PercentileComputation != nil {
		toSerialize["percentileComputation"] = o.PercentileComputation
	}
	if o.PersonalizationImpact != nil {
		toSerialize["personalizationImpact"] = o.PersonalizationImpact
	}
	if o.QueryLanguages != nil {
		toSerialize["queryLanguages"] = o.QueryLanguages
	}
	if o.QueryType != nil {
		toSerialize["queryType"] = o.QueryType
	}
	if o.RemoveStopWords != nil {
		toSerialize["removeStopWords"] = o.RemoveStopWords
	}
	if o.RemoveWordsIfNoResults != nil {
		toSerialize["removeWordsIfNoResults"] = o.RemoveWordsIfNoResults
	}
	if o.ReplaceSynonymsInHighlight != nil {
		toSerialize["replaceSynonymsInHighlight"] = o.ReplaceSynonymsInHighlight
	}
	if o.ResponseFields != nil {
		toSerialize["responseFields"] = o.ResponseFields
	}
	if o.RestrictHighlightAndSnippetArrays != nil {
		toSerialize["restrictHighlightAndSnippetArrays"] = o.RestrictHighlightAndSnippetArrays
	}
	if o.RestrictSearchableAttributes != nil {
		toSerialize["restrictSearchableAttributes"] = o.RestrictSearchableAttributes
	}
	if o.RuleContexts != nil {
		toSerialize["ruleContexts"] = o.RuleContexts
	}
	if o.SnippetEllipsisText != nil {
		toSerialize["snippetEllipsisText"] = o.SnippetEllipsisText
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.TypoTolerance != nil {
		toSerialize["typoTolerance"] = o.TypoTolerance
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal BaseInjectionQueryParameters: %w", err)
	}

	return serialized, nil
}

func (o BaseInjectionQueryParameters) String() string {
	out := ""
	out += fmt.Sprintf("  advancedSyntax=%v\n", o.AdvancedSyntax)
	out += fmt.Sprintf("  advancedSyntaxFeatures=%v\n", o.AdvancedSyntaxFeatures)
	out += fmt.Sprintf("  allowTyposOnNumericTokens=%v\n", o.AllowTyposOnNumericTokens)
	out += fmt.Sprintf("  alternativesAsExact=%v\n", o.AlternativesAsExact)
	out += fmt.Sprintf("  analytics=%v\n", o.Analytics)
	out += fmt.Sprintf("  attributeCriteriaComputedByMinProximity=%v\n", o.AttributeCriteriaComputedByMinProximity)
	out += fmt.Sprintf("  attributesToHighlight=%v\n", o.AttributesToHighlight)
	out += fmt.Sprintf("  attributesToRetrieve=%v\n", o.AttributesToRetrieve)
	out += fmt.Sprintf("  attributesToSnippet=%v\n", o.AttributesToSnippet)
	out += fmt.Sprintf("  clickAnalytics=%v\n", o.ClickAnalytics)
	out += fmt.Sprintf("  decompoundQuery=%v\n", o.DecompoundQuery)
	out += fmt.Sprintf("  disableExactOnAttributes=%v\n", o.DisableExactOnAttributes)
	out += fmt.Sprintf("  disableTypoToleranceOnAttributes=%v\n", o.DisableTypoToleranceOnAttributes)
	out += fmt.Sprintf("  distinct=%v\n", o.Distinct)
	out += fmt.Sprintf("  enableABTest=%v\n", o.EnableABTest)
	out += fmt.Sprintf("  enablePersonalization=%v\n", o.EnablePersonalization)
	out += fmt.Sprintf("  enableReRanking=%v\n", o.EnableReRanking)
	out += fmt.Sprintf("  enableRules=%v\n", o.EnableRules)
	out += fmt.Sprintf("  exactOnSingleWordQuery=%v\n", o.ExactOnSingleWordQuery)
	out += fmt.Sprintf("  facetFilters=%v\n", o.FacetFilters)
	out += fmt.Sprintf("  filters=%v\n", o.Filters)
	out += fmt.Sprintf("  getRankingInfo=%v\n", o.GetRankingInfo)
	out += fmt.Sprintf("  highlightPostTag=%v\n", o.HighlightPostTag)
	out += fmt.Sprintf("  highlightPreTag=%v\n", o.HighlightPreTag)
	out += fmt.Sprintf("  ignorePlurals=%v\n", o.IgnorePlurals)
	out += fmt.Sprintf("  maxFacetHits=%v\n", o.MaxFacetHits)
	out += fmt.Sprintf("  minProximity=%v\n", o.MinProximity)
	out += fmt.Sprintf("  minWordSizefor1Typo=%v\n", o.MinWordSizefor1Typo)
	out += fmt.Sprintf("  minWordSizefor2Typos=%v\n", o.MinWordSizefor2Typos)
	out += fmt.Sprintf("  naturalLanguages=%v\n", o.NaturalLanguages)
	out += fmt.Sprintf("  numericFilters=%v\n", o.NumericFilters)
	out += fmt.Sprintf("  optionalFilters=%v\n", o.OptionalFilters)
	out += fmt.Sprintf("  optionalWords=%v\n", o.OptionalWords)
	out += fmt.Sprintf("  percentileComputation=%v\n", o.PercentileComputation)
	out += fmt.Sprintf("  personalizationImpact=%v\n", o.PersonalizationImpact)
	out += fmt.Sprintf("  queryLanguages=%v\n", o.QueryLanguages)
	out += fmt.Sprintf("  queryType=%v\n", o.QueryType)
	out += fmt.Sprintf("  removeStopWords=%v\n", o.RemoveStopWords)
	out += fmt.Sprintf("  removeWordsIfNoResults=%v\n", o.RemoveWordsIfNoResults)
	out += fmt.Sprintf("  replaceSynonymsInHighlight=%v\n", o.ReplaceSynonymsInHighlight)
	out += fmt.Sprintf("  responseFields=%v\n", o.ResponseFields)
	out += fmt.Sprintf("  restrictHighlightAndSnippetArrays=%v\n", o.RestrictHighlightAndSnippetArrays)
	out += fmt.Sprintf("  restrictSearchableAttributes=%v\n", o.RestrictSearchableAttributes)
	out += fmt.Sprintf("  ruleContexts=%v\n", o.RuleContexts)
	out += fmt.Sprintf("  snippetEllipsisText=%v\n", o.SnippetEllipsisText)
	out += fmt.Sprintf("  synonyms=%v\n", o.Synonyms)
	out += fmt.Sprintf("  typoTolerance=%v\n", o.TypoTolerance)
	return fmt.Sprintf("BaseInjectionQueryParameters {\n%s}", out)
}
