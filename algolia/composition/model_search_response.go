// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// SearchResponse struct for SearchResponse.
type SearchResponse struct {
	Compositions *CompositionsSearchResponse `json:"compositions,omitempty"`
	// Search results.
	Results              []SearchResultsItem `json:"results"`
	AdditionalProperties map[string]any
}

type _SearchResponse SearchResponse

type SearchResponseOption func(f *SearchResponse)

func WithSearchResponseCompositions(val CompositionsSearchResponse) SearchResponseOption {
	return func(f *SearchResponse) {
		f.Compositions = &val
	}
}

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSearchResponse(results []SearchResultsItem, opts ...SearchResponseOption) *SearchResponse {
	this := &SearchResponse{}
	this.Results = results
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySearchResponse return a pointer to an empty SearchResponse object.
func NewEmptySearchResponse() *SearchResponse {
	return &SearchResponse{}
}

// GetCompositions returns the Compositions field value if set, zero value otherwise.
func (o *SearchResponse) GetCompositions() CompositionsSearchResponse {
	if o == nil || o.Compositions == nil {
		var ret CompositionsSearchResponse
		return ret
	}
	return *o.Compositions
}

// GetCompositionsOk returns a tuple with the Compositions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetCompositionsOk() (*CompositionsSearchResponse, bool) {
	if o == nil || o.Compositions == nil {
		return nil, false
	}
	return o.Compositions, true
}

// HasCompositions returns a boolean if a field has been set.
func (o *SearchResponse) HasCompositions() bool {
	if o != nil && o.Compositions != nil {
		return true
	}

	return false
}

// SetCompositions gets a reference to the given CompositionsSearchResponse and assigns it to the Compositions field.
func (o *SearchResponse) SetCompositions(v *CompositionsSearchResponse) *SearchResponse {
	o.Compositions = v
	return o
}

// GetResults returns the Results field value.
func (o *SearchResponse) GetResults() []SearchResultsItem {
	if o == nil {
		var ret []SearchResultsItem
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetResultsOk() ([]SearchResultsItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value.
func (o *SearchResponse) SetResults(v []SearchResultsItem) *SearchResponse {
	o.Results = v
	return o
}

func (o *SearchResponse) SetAdditionalProperty(key string, value any) *SearchResponse {
	if o.AdditionalProperties == nil {
		o.AdditionalProperties = make(map[string]any)
	}

	o.AdditionalProperties[key] = value

	return o
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Compositions != nil {
		toSerialize["compositions"] = o.Compositions
	}
	if true {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SearchResponse: %w", err)
	}

	return serialized, nil
}

func (o *SearchResponse) UnmarshalJSON(bytes []byte) error {
	varSearchResponse := _SearchResponse{}

	err := json.Unmarshal(bytes, &varSearchResponse)
	if err != nil {
		return fmt.Errorf("failed to unmarshal SearchResponse: %w", err)
	}

	*o = SearchResponse(varSearchResponse)

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
	if err != nil {
		return fmt.Errorf("failed to unmarshal additionalProperties in SearchResponse: %w", err)
	}

	delete(additionalProperties, "compositions")
	delete(additionalProperties, "results")
	o.AdditionalProperties = additionalProperties

	return nil
}

func (o SearchResponse) String() string {
	out := ""
	out += fmt.Sprintf("  compositions=%v\n", o.Compositions)
	out += fmt.Sprintf("  results=%v\n", o.Results)
	for key, value := range o.AdditionalProperties {
		out += fmt.Sprintf("  %s=%v\n", key, value)
	}
	return fmt.Sprintf("SearchResponse {\n%s}", out)
}
