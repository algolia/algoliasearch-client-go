// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package composition

import (
	"encoding/json"
	"fmt"
)

// InjectedItemHitsMetadata Adds the provided metadata to each injected hit via an `_extra` attribute.
type InjectedItemHitsMetadata struct {
	// When true, the `_injectedItemKey` field is set in the `_extra` object of each affected hit.
	AddItemKey *bool `json:"addItemKey,omitempty"`
	// The user-defined key-value pairs that will be placed in the `_extra` field of each affected hit.
	Extra map[string]any `json:"extra,omitempty"`
}

type InjectedItemHitsMetadataOption func(f *InjectedItemHitsMetadata)

func WithInjectedItemHitsMetadataAddItemKey(val bool) InjectedItemHitsMetadataOption {
	return func(f *InjectedItemHitsMetadata) {
		f.AddItemKey = &val
	}
}

func WithInjectedItemHitsMetadataExtra(val map[string]any) InjectedItemHitsMetadataOption {
	return func(f *InjectedItemHitsMetadata) {
		f.Extra = val
	}
}

// NewInjectedItemHitsMetadata instantiates a new InjectedItemHitsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewInjectedItemHitsMetadata(opts ...InjectedItemHitsMetadataOption) *InjectedItemHitsMetadata {
	this := &InjectedItemHitsMetadata{}
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyInjectedItemHitsMetadata return a pointer to an empty InjectedItemHitsMetadata object.
func NewEmptyInjectedItemHitsMetadata() *InjectedItemHitsMetadata {
	return &InjectedItemHitsMetadata{}
}

// GetAddItemKey returns the AddItemKey field value if set, zero value otherwise.
func (o *InjectedItemHitsMetadata) GetAddItemKey() bool {
	if o == nil || o.AddItemKey == nil {
		var ret bool

		return ret
	}

	return *o.AddItemKey
}

// GetAddItemKeyOk returns a tuple with the AddItemKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InjectedItemHitsMetadata) GetAddItemKeyOk() (*bool, bool) {
	if o == nil || o.AddItemKey == nil {
		return nil, false
	}

	return o.AddItemKey, true
}

// HasAddItemKey returns a boolean if a field has been set.
func (o *InjectedItemHitsMetadata) HasAddItemKey() bool {
	if o != nil && o.AddItemKey != nil {
		return true
	}

	return false
}

// SetAddItemKey gets a reference to the given bool and assigns it to the AddItemKey field.
func (o *InjectedItemHitsMetadata) SetAddItemKey(v bool) *InjectedItemHitsMetadata {
	o.AddItemKey = &v

	return o
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *InjectedItemHitsMetadata) GetExtra() map[string]any {
	if o == nil || o.Extra == nil {
		var ret map[string]any

		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InjectedItemHitsMetadata) GetExtraOk() (map[string]any, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}

	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *InjectedItemHitsMetadata) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]any and assigns it to the Extra field.
func (o *InjectedItemHitsMetadata) SetExtra(v map[string]any) *InjectedItemHitsMetadata {
	o.Extra = v

	return o
}

func (o InjectedItemHitsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.AddItemKey != nil {
		toSerialize["addItemKey"] = o.AddItemKey
	}

	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal InjectedItemHitsMetadata: %w", err)
	}

	return serialized, nil
}

func (o InjectedItemHitsMetadata) String() string {
	out := ""
	out += fmt.Sprintf("  addItemKey=%v\n", o.AddItemKey)
	out += fmt.Sprintf("  extra=%v\n", o.Extra)

	return fmt.Sprintf("InjectedItemHitsMetadata {\n%s}", out)
}
