// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// PushTaskPayload struct for PushTaskPayload.
type PushTaskPayload struct {
	Action  Action            `json:"action"`
	Records []PushTaskRecords `json:"records"`
}

// NewPushTaskPayload instantiates a new PushTaskPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewPushTaskPayload(action Action, records []PushTaskRecords) *PushTaskPayload {
	this := &PushTaskPayload{}
	this.Action = action
	this.Records = records
	return this
}

// NewEmptyPushTaskPayload return a pointer to an empty PushTaskPayload object.
func NewEmptyPushTaskPayload() *PushTaskPayload {
	return &PushTaskPayload{}
}

// GetAction returns the Action field value.
func (o *PushTaskPayload) GetAction() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PushTaskPayload) GetActionOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value.
func (o *PushTaskPayload) SetAction(v Action) *PushTaskPayload {
	o.Action = v
	return o
}

// GetRecords returns the Records field value.
func (o *PushTaskPayload) GetRecords() []PushTaskRecords {
	if o == nil {
		var ret []PushTaskRecords
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *PushTaskPayload) GetRecordsOk() ([]PushTaskRecords, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value.
func (o *PushTaskPayload) SetRecords(v []PushTaskRecords) *PushTaskPayload {
	o.Records = v
	return o
}

func (o PushTaskPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["records"] = o.Records
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal PushTaskPayload: %w", err)
	}

	return serialized, nil
}

func (o PushTaskPayload) String() string {
	out := ""
	out += fmt.Sprintf("  action=%v\n", o.Action)
	out += fmt.Sprintf("  records=%v\n", o.Records)
	return fmt.Sprintf("PushTaskPayload {\n%s}", out)
}
