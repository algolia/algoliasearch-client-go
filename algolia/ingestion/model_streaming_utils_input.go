// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// StreamingUtilsInput Input for a `streaming` task whose source is of type `ga4BigqueryExport` and for which extracted data is continuously streamed.
type StreamingUtilsInput struct {
	Mapping MappingInput `json:"mapping"`
}

// NewStreamingUtilsInput instantiates a new StreamingUtilsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewStreamingUtilsInput(mapping MappingInput) *StreamingUtilsInput {
	this := &StreamingUtilsInput{}
	this.Mapping = mapping
	return this
}

// NewEmptyStreamingUtilsInput return a pointer to an empty StreamingUtilsInput object.
func NewEmptyStreamingUtilsInput() *StreamingUtilsInput {
	return &StreamingUtilsInput{}
}

// GetMapping returns the Mapping field value.
func (o *StreamingUtilsInput) GetMapping() MappingInput {
	if o == nil {
		var ret MappingInput
		return ret
	}

	return o.Mapping
}

// GetMappingOk returns a tuple with the Mapping field value
// and a boolean to check if the value has been set.
func (o *StreamingUtilsInput) GetMappingOk() (*MappingInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mapping, true
}

// SetMapping sets field value.
func (o *StreamingUtilsInput) SetMapping(v *MappingInput) *StreamingUtilsInput {
	o.Mapping = *v
	return o
}

func (o StreamingUtilsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["mapping"] = o.Mapping
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal StreamingUtilsInput: %w", err)
	}

	return serialized, nil
}

func (o StreamingUtilsInput) String() string {
	out := ""
	out += fmt.Sprintf("  mapping=%v\n", o.Mapping)
	return fmt.Sprintf("StreamingUtilsInput {\n%s}", out)
}

type NullableStreamingUtilsInput struct {
	value *StreamingUtilsInput
	isSet bool
}

func (v NullableStreamingUtilsInput) Get() *StreamingUtilsInput {
	return v.value
}

func (v *NullableStreamingUtilsInput) Set(val *StreamingUtilsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingUtilsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingUtilsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingUtilsInput(val *StreamingUtilsInput) *NullableStreamingUtilsInput {
	return &NullableStreamingUtilsInput{value: val, isSet: true}
}

func (v NullableStreamingUtilsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableStreamingUtilsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
