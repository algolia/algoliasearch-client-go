// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationCreate API request body for creating a transformation.
type TransformationCreate struct {
	// It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.
	// Deprecated
	Code *string `json:"code,omitempty"`
	// The uniquely identified name of your transformation.
	Name  string               `json:"name"`
	Type  *TransformationType  `json:"type,omitempty"`
	Input *TransformationInput `json:"input,omitempty"`
	// A descriptive name for your transformation of what it does.
	Description *string `json:"description,omitempty"`
	// The authentications associated with the current transformation.
	AuthenticationIDs []string `json:"authenticationIDs,omitempty"`
}

type TransformationCreateOption func(f *TransformationCreate)

func WithTransformationCreateCode(val string) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.Code = &val
	}
}

func WithTransformationCreateType(val TransformationType) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.Type = &val
	}
}

func WithTransformationCreateInput(val TransformationInput) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.Input = &val
	}
}

func WithTransformationCreateDescription(val string) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.Description = &val
	}
}

func WithTransformationCreateAuthenticationIDs(val []string) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.AuthenticationIDs = val
	}
}

// NewTransformationCreate instantiates a new TransformationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformationCreate(name string, opts ...TransformationCreateOption) *TransformationCreate {
	this := &TransformationCreate{}

	this.Name = name
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyTransformationCreate return a pointer to an empty TransformationCreate object.
func NewEmptyTransformationCreate() *TransformationCreate {
	return &TransformationCreate{}
}

// GetCode returns the Code field value if set, zero value otherwise.
// Deprecated.
func (o *TransformationCreate) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string

		return ret
	}

	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated.
func (o *TransformationCreate) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}

	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TransformationCreate) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
// Deprecated.
func (o *TransformationCreate) SetCode(v string) *TransformationCreate {
	o.Code = &v

	return o
}

// GetName returns the Name field value.
func (o *TransformationCreate) GetName() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Name, true
}

// SetName sets field value.
func (o *TransformationCreate) SetName(v string) *TransformationCreate {
	o.Name = v

	return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransformationCreate) GetType() TransformationType {
	if o == nil || o.Type == nil {
		var ret TransformationType

		return ret
	}

	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetTypeOk() (*TransformationType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}

	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransformationCreate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given TransformationType and assigns it to the Type field.
func (o *TransformationCreate) SetType(v TransformationType) *TransformationCreate {
	o.Type = &v

	return o
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TransformationCreate) GetInput() TransformationInput {
	if o == nil || o.Input == nil {
		var ret TransformationInput

		return ret
	}

	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetInputOk() (*TransformationInput, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}

	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TransformationCreate) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given TransformationInput and assigns it to the Input field.
func (o *TransformationCreate) SetInput(v *TransformationInput) *TransformationCreate {
	o.Input = v

	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransformationCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string

		return ret
	}

	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}

	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransformationCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransformationCreate) SetDescription(v string) *TransformationCreate {
	o.Description = &v

	return o
}

// GetAuthenticationIDs returns the AuthenticationIDs field value if set, zero value otherwise.
func (o *TransformationCreate) GetAuthenticationIDs() []string {
	if o == nil || o.AuthenticationIDs == nil {
		var ret []string

		return ret
	}

	return o.AuthenticationIDs
}

// GetAuthenticationIDsOk returns a tuple with the AuthenticationIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetAuthenticationIDsOk() ([]string, bool) {
	if o == nil || o.AuthenticationIDs == nil {
		return nil, false
	}

	return o.AuthenticationIDs, true
}

// HasAuthenticationIDs returns a boolean if a field has been set.
func (o *TransformationCreate) HasAuthenticationIDs() bool {
	if o != nil && o.AuthenticationIDs != nil {
		return true
	}

	return false
}

// SetAuthenticationIDs gets a reference to the given []string and assigns it to the AuthenticationIDs field.
func (o *TransformationCreate) SetAuthenticationIDs(v []string) *TransformationCreate {
	o.AuthenticationIDs = v

	return o
}

func (o TransformationCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}

	toSerialize["name"] = o.Name
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	if o.Input != nil {
		toSerialize["input"] = o.Input
	}

	if o.Description != nil {
		toSerialize["description"] = o.Description
	}

	if o.AuthenticationIDs != nil {
		toSerialize["authenticationIDs"] = o.AuthenticationIDs
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TransformationCreate: %w", err)
	}

	return serialized, nil
}

func (o TransformationCreate) String() string {
	out := ""
	out += fmt.Sprintf("  code=%v\n", o.Code)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	out += fmt.Sprintf("  input=%v\n", o.Input)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  authenticationIDs=%v\n", o.AuthenticationIDs)

	return fmt.Sprintf("TransformationCreate {\n%s}", out)
}
