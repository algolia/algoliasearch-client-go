// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationCreate API request body for creating a transformation.
type TransformationCreate struct {
	// The source code of the transformation.
	Code string `json:"code"`
	// The uniquely identified name of your transformation.
	Name string `json:"name"`
	// A descriptive name for your transformation of what it does.
	Description *string `json:"description,omitempty"`
}

type TransformationCreateOption func(f *TransformationCreate)

func WithTransformationCreateDescription(val string) TransformationCreateOption {
	return func(f *TransformationCreate) {
		f.Description = &val
	}
}

// NewTransformationCreate instantiates a new TransformationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformationCreate(code string, name string, opts ...TransformationCreateOption) *TransformationCreate {
	this := &TransformationCreate{}
	this.Code = code
	this.Name = name
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyTransformationCreate return a pointer to an empty TransformationCreate object.
func NewEmptyTransformationCreate() *TransformationCreate {
	return &TransformationCreate{}
}

// GetCode returns the Code field value.
func (o *TransformationCreate) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value.
func (o *TransformationCreate) SetCode(v string) *TransformationCreate {
	o.Code = v
	return o
}

// GetName returns the Name field value.
func (o *TransformationCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *TransformationCreate) SetName(v string) *TransformationCreate {
	o.Name = v
	return o
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransformationCreate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransformationCreate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransformationCreate) SetDescription(v string) *TransformationCreate {
	o.Description = &v
	return o
}

func (o TransformationCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TransformationCreate: %w", err)
	}

	return serialized, nil
}

func (o TransformationCreate) String() string {
	out := ""
	out += fmt.Sprintf("  code=%v\n", o.Code)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	return fmt.Sprintf("TransformationCreate {\n%s}", out)
}
