// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// MappingFieldDirective Describes how a field should be resolved by applying a set of directives.
type MappingFieldDirective struct {
	// Destination field key.
	FieldKey string `json:"fieldKey"`
	// How the destination field should be resolved from the source.
	Value map[string]interface{} `json:"value"`
}

// NewMappingFieldDirective instantiates a new MappingFieldDirective object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMappingFieldDirective(fieldKey string, value map[string]interface{}) *MappingFieldDirective {
	this := &MappingFieldDirective{}
	this.FieldKey = fieldKey
	this.Value = value
	return this
}

// NewEmptyMappingFieldDirective return a pointer to an empty MappingFieldDirective object.
func NewEmptyMappingFieldDirective() *MappingFieldDirective {
	return &MappingFieldDirective{}
}

// GetFieldKey returns the FieldKey field value.
func (o *MappingFieldDirective) GetFieldKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldKey
}

// GetFieldKeyOk returns a tuple with the FieldKey field value
// and a boolean to check if the value has been set.
func (o *MappingFieldDirective) GetFieldKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldKey, true
}

// SetFieldKey sets field value.
func (o *MappingFieldDirective) SetFieldKey(v string) *MappingFieldDirective {
	o.FieldKey = v
	return o
}

// GetValue returns the Value field value.
func (o *MappingFieldDirective) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MappingFieldDirective) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value.
func (o *MappingFieldDirective) SetValue(v map[string]interface{}) *MappingFieldDirective {
	o.Value = v
	return o
}

func (o MappingFieldDirective) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["fieldKey"] = o.FieldKey
	}
	if true {
		toSerialize["value"] = o.Value
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MappingFieldDirective: %w", err)
	}

	return serialized, nil
}

func (o MappingFieldDirective) String() string {
	out := ""
	out += fmt.Sprintf("  fieldKey=%v\n", o.FieldKey)
	out += fmt.Sprintf("  value=%v\n", o.Value)
	return fmt.Sprintf("MappingFieldDirective {\n%s}", out)
}

type NullableMappingFieldDirective struct {
	value *MappingFieldDirective
	isSet bool
}

func (v NullableMappingFieldDirective) Get() *MappingFieldDirective {
	return v.value
}

func (v *NullableMappingFieldDirective) Set(val *MappingFieldDirective) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingFieldDirective) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingFieldDirective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingFieldDirective(val *MappingFieldDirective) *NullableMappingFieldDirective {
	return &NullableMappingFieldDirective{value: val, isSet: true}
}

func (v NullableMappingFieldDirective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableMappingFieldDirective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
