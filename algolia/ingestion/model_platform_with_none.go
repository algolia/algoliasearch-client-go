// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// PlatformWithNone - struct for PlatformWithNone.
type PlatformWithNone struct {
	Platform     *Platform
	PlatformNone *PlatformNone
}

// PlatformAsPlatformWithNone is a convenience function that returns Platform wrapped in PlatformWithNone.
func PlatformAsPlatformWithNone(v Platform) *PlatformWithNone {
	return &PlatformWithNone{
		Platform: &v,
	}
}

// PlatformNoneAsPlatformWithNone is a convenience function that returns PlatformNone wrapped in PlatformWithNone.
func PlatformNoneAsPlatformWithNone(v PlatformNone) *PlatformWithNone {
	return &PlatformWithNone{
		PlatformNone: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *PlatformWithNone) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Platform
	err = newStrictDecoder(data).Decode(&dst.Platform)
	if err == nil && validateStruct(dst.Platform) == nil {
		jsonPlatform, _ := json.Marshal(dst.Platform)
		if string(jsonPlatform) == "{}" { // empty struct
			dst.Platform = nil
		} else {
			return nil
		}
	} else {
		dst.Platform = nil
	}

	// try to unmarshal data into PlatformNone
	err = newStrictDecoder(data).Decode(&dst.PlatformNone)
	if err == nil && validateStruct(dst.PlatformNone) == nil {
		jsonPlatformNone, _ := json.Marshal(dst.PlatformNone)
		if string(jsonPlatformNone) == "{}" { // empty struct
			dst.PlatformNone = nil
		} else {
			return nil
		}
	} else {
		dst.PlatformNone = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(PlatformWithNone)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src PlatformWithNone) MarshalJSON() ([]byte, error) {
	if src.Platform != nil {
		serialized, err := json.Marshal(&src.Platform)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Platform of PlatformWithNone: %w", err)
		}

		return serialized, nil
	}

	if src.PlatformNone != nil {
		serialized, err := json.Marshal(&src.PlatformNone)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of PlatformNone of PlatformWithNone: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj PlatformWithNone) GetActualInstance() any {
	if obj.Platform != nil {
		return *obj.Platform
	}

	if obj.PlatformNone != nil {
		return *obj.PlatformNone
	}

	// all schemas are nil
	return nil
}
