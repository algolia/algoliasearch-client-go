// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// DestinationIndexName struct for DestinationIndexName
type DestinationIndexName struct {
	// The index name to store data in.
	IndexName string `json:"indexName"`
}

// NewDestinationIndexName instantiates a new DestinationIndexName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationIndexName(indexName string) *DestinationIndexName {
	this := &DestinationIndexName{}
	this.IndexName = indexName
	return this
}

// NewDestinationIndexNameWithDefaults instantiates a new DestinationIndexName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationIndexNameWithDefaults() *DestinationIndexName {
	this := &DestinationIndexName{}
	return this
}

// GetIndexName returns the IndexName field value
func (o *DestinationIndexName) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *DestinationIndexName) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *DestinationIndexName) SetIndexName(v string) {
	o.IndexName = v
}

func (o DestinationIndexName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	return json.Marshal(toSerialize)
}

func (o DestinationIndexName) String() string {
	out := "DestinationIndexName {\n"
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += "}"
	return out
}

type NullableDestinationIndexName struct {
	value *DestinationIndexName
	isSet bool
}

func (v NullableDestinationIndexName) Get() *DestinationIndexName {
	return v.value
}

func (v *NullableDestinationIndexName) Set(val *DestinationIndexName) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationIndexName) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationIndexName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationIndexName(val *DestinationIndexName) *NullableDestinationIndexName {
	return &NullableDestinationIndexName{value: val, isSet: true}
}

func (v NullableDestinationIndexName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationIndexName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
