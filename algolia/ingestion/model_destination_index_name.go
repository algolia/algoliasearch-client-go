// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// DestinationIndexName struct for DestinationIndexName.
type DestinationIndexName struct {
	// Algolia index name.
	IndexName  string      `json:"indexName"`
	RecordType *RecordType `json:"recordType,omitempty"`
	// Attributes from your source to exclude from Algolia records.  Not all your data attributes will be useful for searching. Keeping your Algolia records small increases indexing and search performance.  - Exclude nested attributes with `.` notation. For example, `foo.bar` indexes the `foo` attribute and all its children **except** the `bar` attribute. - Exclude attributes from arrays with `[i]`, where `i` is the index of the array element.   For example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo` array, but indexes the complete `foo` attribute for all other elements.   Use `*` as wildcard: `foo.[*].bar` excludes `bar` from all elements of the `foo` array.
	AttributesToExclude []string `json:"attributesToExclude,omitempty"`
}

type DestinationIndexNameOption func(f *DestinationIndexName)

func WithDestinationIndexNameRecordType(val RecordType) DestinationIndexNameOption {
	return func(f *DestinationIndexName) {
		f.RecordType = &val
	}
}

func WithDestinationIndexNameAttributesToExclude(val []string) DestinationIndexNameOption {
	return func(f *DestinationIndexName) {
		f.AttributesToExclude = val
	}
}

// NewDestinationIndexName instantiates a new DestinationIndexName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewDestinationIndexName(indexName string, opts ...DestinationIndexNameOption) *DestinationIndexName {
	this := &DestinationIndexName{}
	this.IndexName = indexName
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyDestinationIndexName return a pointer to an empty DestinationIndexName object.
func NewEmptyDestinationIndexName() *DestinationIndexName {
	return &DestinationIndexName{}
}

// GetIndexName returns the IndexName field value.
func (o *DestinationIndexName) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *DestinationIndexName) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value.
func (o *DestinationIndexName) SetIndexName(v string) *DestinationIndexName {
	o.IndexName = v
	return o
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *DestinationIndexName) GetRecordType() RecordType {
	if o == nil || o.RecordType == nil {
		var ret RecordType
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationIndexName) GetRecordTypeOk() (*RecordType, bool) {
	if o == nil || o.RecordType == nil {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *DestinationIndexName) HasRecordType() bool {
	if o != nil && o.RecordType != nil {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given RecordType and assigns it to the RecordType field.
func (o *DestinationIndexName) SetRecordType(v RecordType) *DestinationIndexName {
	o.RecordType = &v
	return o
}

// GetAttributesToExclude returns the AttributesToExclude field value if set, zero value otherwise.
func (o *DestinationIndexName) GetAttributesToExclude() []string {
	if o == nil || o.AttributesToExclude == nil {
		var ret []string
		return ret
	}
	return o.AttributesToExclude
}

// GetAttributesToExcludeOk returns a tuple with the AttributesToExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationIndexName) GetAttributesToExcludeOk() ([]string, bool) {
	if o == nil || o.AttributesToExclude == nil {
		return nil, false
	}
	return o.AttributesToExclude, true
}

// HasAttributesToExclude returns a boolean if a field has been set.
func (o *DestinationIndexName) HasAttributesToExclude() bool {
	if o != nil && o.AttributesToExclude != nil {
		return true
	}

	return false
}

// SetAttributesToExclude gets a reference to the given []string and assigns it to the AttributesToExclude field.
func (o *DestinationIndexName) SetAttributesToExclude(v []string) *DestinationIndexName {
	o.AttributesToExclude = v
	return o
}

func (o DestinationIndexName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if o.RecordType != nil {
		toSerialize["recordType"] = o.RecordType
	}
	if o.AttributesToExclude != nil {
		toSerialize["attributesToExclude"] = o.AttributesToExclude
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DestinationIndexName: %w", err)
	}

	return serialized, nil
}

func (o DestinationIndexName) String() string {
	out := ""
	out += fmt.Sprintf("  indexName=%v\n", o.IndexName)
	out += fmt.Sprintf("  recordType=%v\n", o.RecordType)
	out += fmt.Sprintf("  attributesToExclude=%v\n", o.AttributesToExclude)
	return fmt.Sprintf("DestinationIndexName {\n%s}", out)
}

type NullableDestinationIndexName struct {
	value *DestinationIndexName
	isSet bool
}

func (v NullableDestinationIndexName) Get() *DestinationIndexName {
	return v.value
}

func (v *NullableDestinationIndexName) Set(val *DestinationIndexName) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationIndexName) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationIndexName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationIndexName(val *DestinationIndexName) *NullableDestinationIndexName {
	return &NullableDestinationIndexName{value: val, isSet: true}
}

func (v NullableDestinationIndexName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableDestinationIndexName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
