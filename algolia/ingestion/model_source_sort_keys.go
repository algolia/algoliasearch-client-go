// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceSortKeys Property by which to sort the list of sources.
type SourceSortKeys string

// List of sourceSortKeys.
const (
	SOURCESORTKEYS_NAME       SourceSortKeys = "name"
	SOURCESORTKEYS_TYPE       SourceSortKeys = "type"
	SOURCESORTKEYS_UPDATED_AT SourceSortKeys = "updatedAt"
	SOURCESORTKEYS_CREATED_AT SourceSortKeys = "createdAt"
)

// All allowed values of SourceSortKeys enum.
var AllowedSourceSortKeysEnumValues = []SourceSortKeys{
	"name",
	"type",
	"updatedAt",
	"createdAt",
}

func (v *SourceSortKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'SourceSortKeys': %w", string(src), err)
	}
	enumTypeValue := SourceSortKeys(value)
	for _, existing := range AllowedSourceSortKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SourceSortKeys", value)
}

// NewSourceSortKeysFromValue returns a pointer to a valid SourceSortKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewSourceSortKeysFromValue(v string) (*SourceSortKeys, error) {
	ev := SourceSortKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SourceSortKeys: valid values are %v", v, AllowedSourceSortKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v SourceSortKeys) IsValid() bool {
	for _, existing := range AllowedSourceSortKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sourceSortKeys value.
func (v SourceSortKeys) Ptr() *SourceSortKeys {
	return &v
}

type NullableSourceSortKeys struct {
	value *SourceSortKeys
	isSet bool
}

func (v NullableSourceSortKeys) Get() *SourceSortKeys {
	return v.value
}

func (v *NullableSourceSortKeys) Set(val *SourceSortKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceSortKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceSortKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceSortKeys(val *SourceSortKeys) *NullableSourceSortKeys {
	return &NullableSourceSortKeys{value: val, isSet: true}
}

func (v NullableSourceSortKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableSourceSortKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
