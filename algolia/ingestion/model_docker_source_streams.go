// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// DockerSourceStreams struct for DockerSourceStreams.
type DockerSourceStreams struct {
	Streams []map[string]any `json:"streams"`
}

// NewDockerSourceStreams instantiates a new DockerSourceStreams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewDockerSourceStreams(streams []map[string]any) *DockerSourceStreams {
	this := &DockerSourceStreams{}
	this.Streams = streams
	return this
}

// NewEmptyDockerSourceStreams return a pointer to an empty DockerSourceStreams object.
func NewEmptyDockerSourceStreams() *DockerSourceStreams {
	return &DockerSourceStreams{}
}

// GetStreams returns the Streams field value.
func (o *DockerSourceStreams) GetStreams() []map[string]any {
	if o == nil {
		var ret []map[string]any
		return ret
	}

	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value
// and a boolean to check if the value has been set.
func (o *DockerSourceStreams) GetStreamsOk() ([]map[string]any, bool) {
	if o == nil {
		return nil, false
	}
	return o.Streams, true
}

// SetStreams sets field value.
func (o *DockerSourceStreams) SetStreams(v []map[string]any) *DockerSourceStreams {
	o.Streams = v
	return o
}

func (o DockerSourceStreams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["streams"] = o.Streams
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DockerSourceStreams: %w", err)
	}

	return serialized, nil
}

func (o DockerSourceStreams) String() string {
	out := ""
	out += fmt.Sprintf("  streams=%v\n", o.Streams)
	return fmt.Sprintf("DockerSourceStreams {\n%s}", out)
}

type NullableDockerSourceStreams struct {
	value *DockerSourceStreams
	isSet bool
}

func (v NullableDockerSourceStreams) Get() *DockerSourceStreams {
	return v.value
}

func (v *NullableDockerSourceStreams) Set(val *DockerSourceStreams) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerSourceStreams) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerSourceStreams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerSourceStreams(val *DockerSourceStreams) *NullableDockerSourceStreams {
	return &NullableDockerSourceStreams{value: val, isSet: true}
}

func (v NullableDockerSourceStreams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableDockerSourceStreams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
