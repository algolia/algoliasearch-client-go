// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// AuthenticationSortKeys Property by which to sort the list of authentication resources.
type AuthenticationSortKeys string

// List of authenticationSortKeys.
const (
	AUTHENTICATIONSORTKEYS_NAME       AuthenticationSortKeys = "name"
	AUTHENTICATIONSORTKEYS_AUTH_TYPE  AuthenticationSortKeys = "auth_type"
	AUTHENTICATIONSORTKEYS_PLATFORM   AuthenticationSortKeys = "platform"
	AUTHENTICATIONSORTKEYS_UPDATED_AT AuthenticationSortKeys = "updatedAt"
	AUTHENTICATIONSORTKEYS_CREATED_AT AuthenticationSortKeys = "createdAt"
)

// All allowed values of AuthenticationSortKeys enum.
var AllowedAuthenticationSortKeysEnumValues = []AuthenticationSortKeys{
	"name",
	"auth_type",
	"platform",
	"updatedAt",
	"createdAt",
}

func (v *AuthenticationSortKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'AuthenticationSortKeys': %w", string(src), err)
	}
	enumTypeValue := AuthenticationSortKeys(value)
	for _, existing := range AllowedAuthenticationSortKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticationSortKeys", value)
}

// NewAuthenticationSortKeysFromValue returns a pointer to a valid AuthenticationSortKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewAuthenticationSortKeysFromValue(v string) (*AuthenticationSortKeys, error) {
	ev := AuthenticationSortKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationSortKeys: valid values are %v", v, AllowedAuthenticationSortKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v AuthenticationSortKeys) IsValid() bool {
	for _, existing := range AllowedAuthenticationSortKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to authenticationSortKeys value.
func (v AuthenticationSortKeys) Ptr() *AuthenticationSortKeys {
	return &v
}

type NullableAuthenticationSortKeys struct {
	value *AuthenticationSortKeys
	isSet bool
}

func (v NullableAuthenticationSortKeys) Get() *AuthenticationSortKeys {
	return v.value
}

func (v *NullableAuthenticationSortKeys) Set(val *AuthenticationSortKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationSortKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationSortKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationSortKeys(val *AuthenticationSortKeys) *NullableAuthenticationSortKeys {
	return &NullableAuthenticationSortKeys{value: val, isSet: true}
}

func (v NullableAuthenticationSortKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableAuthenticationSortKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
