// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// SourceInput - struct for SourceInput.
type SourceInput struct {
	SourceBigCommerce       *SourceBigCommerce
	SourceBigQuery          *SourceBigQuery
	SourceCSV               *SourceCSV
	SourceCommercetools     *SourceCommercetools
	SourceDocker            *SourceDocker
	SourceGA4BigQueryExport *SourceGA4BigQueryExport
	SourceJSON              *SourceJSON
	SourceShopify           *SourceShopify
}

// SourceDockerAsSourceInput is a convenience function that returns SourceDocker wrapped in SourceInput.
func SourceDockerAsSourceInput(v *SourceDocker) *SourceInput {
	return &SourceInput{
		SourceDocker: v,
	}
}

// SourceGA4BigQueryExportAsSourceInput is a convenience function that returns SourceGA4BigQueryExport wrapped in SourceInput.
func SourceGA4BigQueryExportAsSourceInput(v *SourceGA4BigQueryExport) *SourceInput {
	return &SourceInput{
		SourceGA4BigQueryExport: v,
	}
}

// SourceCommercetoolsAsSourceInput is a convenience function that returns SourceCommercetools wrapped in SourceInput.
func SourceCommercetoolsAsSourceInput(v *SourceCommercetools) *SourceInput {
	return &SourceInput{
		SourceCommercetools: v,
	}
}

// SourceBigCommerceAsSourceInput is a convenience function that returns SourceBigCommerce wrapped in SourceInput.
func SourceBigCommerceAsSourceInput(v *SourceBigCommerce) *SourceInput {
	return &SourceInput{
		SourceBigCommerce: v,
	}
}

// SourceBigQueryAsSourceInput is a convenience function that returns SourceBigQuery wrapped in SourceInput.
func SourceBigQueryAsSourceInput(v *SourceBigQuery) *SourceInput {
	return &SourceInput{
		SourceBigQuery: v,
	}
}

// SourceShopifyAsSourceInput is a convenience function that returns SourceShopify wrapped in SourceInput.
func SourceShopifyAsSourceInput(v *SourceShopify) *SourceInput {
	return &SourceInput{
		SourceShopify: v,
	}
}

// SourceJSONAsSourceInput is a convenience function that returns SourceJSON wrapped in SourceInput.
func SourceJSONAsSourceInput(v *SourceJSON) *SourceInput {
	return &SourceInput{
		SourceJSON: v,
	}
}

// SourceCSVAsSourceInput is a convenience function that returns SourceCSV wrapped in SourceInput.
func SourceCSVAsSourceInput(v *SourceCSV) *SourceInput {
	return &SourceInput{
		SourceCSV: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *SourceInput) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "registry") && utils.HasKey(jsonDict, "image") && utils.HasKey(jsonDict, "imageType") && utils.HasKey(jsonDict, "configuration") {
		// try to unmarshal data into SourceDocker
		err = newStrictDecoder(data).Decode(&dst.SourceDocker)
		if err == nil && validateStruct(dst.SourceDocker) == nil {
			return nil // found the correct type
		} else {
			dst.SourceDocker = nil
		}
	}
	if utils.HasKey(jsonDict, "projectID") && utils.HasKey(jsonDict, "datasetID") && utils.HasKey(jsonDict, "tablePrefix") {
		// try to unmarshal data into SourceGA4BigQueryExport
		err = newStrictDecoder(data).Decode(&dst.SourceGA4BigQueryExport)
		if err == nil && validateStruct(dst.SourceGA4BigQueryExport) == nil {
			return nil // found the correct type
		} else {
			dst.SourceGA4BigQueryExport = nil
		}
	}
	if utils.HasKey(jsonDict, "projectKey") {
		// try to unmarshal data into SourceCommercetools
		err = newStrictDecoder(data).Decode(&dst.SourceCommercetools)
		if err == nil && validateStruct(dst.SourceCommercetools) == nil {
			return nil // found the correct type
		} else {
			dst.SourceCommercetools = nil
		}
	}
	if utils.HasKey(jsonDict, "storeHash") {
		// try to unmarshal data into SourceBigCommerce
		err = newStrictDecoder(data).Decode(&dst.SourceBigCommerce)
		if err == nil && validateStruct(dst.SourceBigCommerce) == nil {
			return nil // found the correct type
		} else {
			dst.SourceBigCommerce = nil
		}
	}
	if utils.HasKey(jsonDict, "projectID") {
		// try to unmarshal data into SourceBigQuery
		err = newStrictDecoder(data).Decode(&dst.SourceBigQuery)
		if err == nil && validateStruct(dst.SourceBigQuery) == nil {
			return nil // found the correct type
		} else {
			dst.SourceBigQuery = nil
		}
	}
	if utils.HasKey(jsonDict, "shopURL") {
		// try to unmarshal data into SourceShopify
		err = newStrictDecoder(data).Decode(&dst.SourceShopify)
		if err == nil && validateStruct(dst.SourceShopify) == nil {
			return nil // found the correct type
		} else {
			dst.SourceShopify = nil
		}
	}
	// try to unmarshal data into SourceJSON
	err = newStrictDecoder(data).Decode(&dst.SourceJSON)
	if err == nil && validateStruct(dst.SourceJSON) == nil {
		return nil // found the correct type
	} else {
		dst.SourceJSON = nil
	}
	// try to unmarshal data into SourceCSV
	err = newStrictDecoder(data).Decode(&dst.SourceCSV)
	if err == nil && validateStruct(dst.SourceCSV) == nil {
		return nil // found the correct type
	} else {
		dst.SourceCSV = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(SourceInput)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src SourceInput) MarshalJSON() ([]byte, error) {
	if src.SourceBigCommerce != nil {
		serialized, err := json.Marshal(&src.SourceBigCommerce)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceBigCommerce of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceBigQuery != nil {
		serialized, err := json.Marshal(&src.SourceBigQuery)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceBigQuery of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceCSV != nil {
		serialized, err := json.Marshal(&src.SourceCSV)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceCSV of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceCommercetools != nil {
		serialized, err := json.Marshal(&src.SourceCommercetools)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceCommercetools of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceDocker != nil {
		serialized, err := json.Marshal(&src.SourceDocker)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceDocker of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceGA4BigQueryExport != nil {
		serialized, err := json.Marshal(&src.SourceGA4BigQueryExport)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceGA4BigQueryExport of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceJSON != nil {
		serialized, err := json.Marshal(&src.SourceJSON)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceJSON of SourceInput: %w", err)
		}

		return serialized, nil
	}

	if src.SourceShopify != nil {
		serialized, err := json.Marshal(&src.SourceShopify)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of SourceShopify of SourceInput: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj SourceInput) GetActualInstance() any {
	if obj.SourceBigCommerce != nil {
		return *obj.SourceBigCommerce
	}

	if obj.SourceBigQuery != nil {
		return *obj.SourceBigQuery
	}

	if obj.SourceCSV != nil {
		return *obj.SourceCSV
	}

	if obj.SourceCommercetools != nil {
		return *obj.SourceCommercetools
	}

	if obj.SourceDocker != nil {
		return *obj.SourceDocker
	}

	if obj.SourceGA4BigQueryExport != nil {
		return *obj.SourceGA4BigQueryExport
	}

	if obj.SourceJSON != nil {
		return *obj.SourceJSON
	}

	if obj.SourceShopify != nil {
		return *obj.SourceShopify
	}

	// all schemas are nil
	return nil
}
