// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// EventStatus the model 'EventStatus'.
type EventStatus string

// List of EventStatus.
const (
	EVENT_STATUS_CREATED   EventStatus = "created"
	EVENT_STATUS_STARTED   EventStatus = "started"
	EVENT_STATUS_RETRIED   EventStatus = "retried"
	EVENT_STATUS_FAILED    EventStatus = "failed"
	EVENT_STATUS_SUCCEEDED EventStatus = "succeeded"
	EVENT_STATUS_CRITICAL  EventStatus = "critical"
)

// All allowed values of EventStatus enum.
var AllowedEventStatusEnumValues = []EventStatus{
	"created",
	"started",
	"retried",
	"failed",
	"succeeded",
	"critical",
}

func (v *EventStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'EventStatus': %w", string(src), err)
	}
	enumTypeValue := EventStatus(value)
	for _, existing := range AllowedEventStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventStatus", value)
}

// NewEventStatusFromValue returns a pointer to a valid EventStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEventStatusFromValue(v string) (*EventStatus, error) {
	ev := EventStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventStatus: valid values are %v", v, AllowedEventStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v EventStatus) IsValid() bool {
	for _, existing := range AllowedEventStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventStatus value.
func (v EventStatus) Ptr() *EventStatus {
	return &v
}
