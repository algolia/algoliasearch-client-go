// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// EventSortKeys Property by which to sort the list of task run events.
type EventSortKeys string

// List of eventSortKeys.
const (
	EVENTSORTKEYS_STATUS       EventSortKeys = "status"
	EVENTSORTKEYS_TYPE         EventSortKeys = "type"
	EVENTSORTKEYS_PUBLISHED_AT EventSortKeys = "publishedAt"
)

// All allowed values of EventSortKeys enum.
var AllowedEventSortKeysEnumValues = []EventSortKeys{
	"status",
	"type",
	"publishedAt",
}

func (v *EventSortKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'EventSortKeys': %w", string(src), err)
	}
	enumTypeValue := EventSortKeys(value)
	for _, existing := range AllowedEventSortKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventSortKeys", value)
}

// NewEventSortKeysFromValue returns a pointer to a valid EventSortKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEventSortKeysFromValue(v string) (*EventSortKeys, error) {
	ev := EventSortKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventSortKeys: valid values are %v", v, AllowedEventSortKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v EventSortKeys) IsValid() bool {
	for _, existing := range AllowedEventSortKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eventSortKeys value.
func (v EventSortKeys) Ptr() *EventSortKeys {
	return &v
}

type NullableEventSortKeys struct {
	value *EventSortKeys
	isSet bool
}

func (v NullableEventSortKeys) Get() *EventSortKeys {
	return v.value
}

func (v *NullableEventSortKeys) Set(val *EventSortKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSortKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSortKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSortKeys(val *EventSortKeys) *NullableEventSortKeys {
	return &NullableEventSortKeys{value: val, isSet: true}
}

func (v NullableEventSortKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableEventSortKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
