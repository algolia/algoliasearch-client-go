// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunReasonCode A code for the task run's outcome. A readable description of the code is included in the `reason` response property.
type RunReasonCode string

// List of RunReasonCode.
const (
	RUN_REASON_CODE_INTERNAL        RunReasonCode = "internal"
	RUN_REASON_CODE_CRITICAL        RunReasonCode = "critical"
	RUN_REASON_CODE_NO_EVENTS       RunReasonCode = "no_events"
	RUN_REASON_CODE_TOO_MANY_ERRORS RunReasonCode = "too_many_errors"
	RUN_REASON_CODE_OK              RunReasonCode = "ok"
	RUN_REASON_CODE_DISCARDED       RunReasonCode = "discarded"
	RUN_REASON_CODE_BLOCKING        RunReasonCode = "blocking"
)

// All allowed values of RunReasonCode enum.
var AllowedRunReasonCodeEnumValues = []RunReasonCode{
	"internal",
	"critical",
	"no_events",
	"too_many_errors",
	"ok",
	"discarded",
	"blocking",
}

func (v *RunReasonCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RunReasonCode': %w", string(src), err)
	}
	enumTypeValue := RunReasonCode(value)
	for _, existing := range AllowedRunReasonCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunReasonCode", value)
}

// NewRunReasonCodeFromValue returns a pointer to a valid RunReasonCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRunReasonCodeFromValue(v string) (*RunReasonCode, error) {
	ev := RunReasonCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunReasonCode: valid values are %v", v, AllowedRunReasonCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RunReasonCode) IsValid() bool {
	for _, existing := range AllowedRunReasonCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunReasonCode value.
func (v RunReasonCode) Ptr() *RunReasonCode {
	return &v
}
