// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// PlatformNone Authentication resource not tied to any ecommerce platform, used for filtering.
type PlatformNone string

// List of platformNone.
const (
	PLATFORMNONE_NONE PlatformNone = "none"
)

// All allowed values of PlatformNone enum.
var AllowedPlatformNoneEnumValues = []PlatformNone{
	"none",
}

func (v *PlatformNone) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'PlatformNone': %w", string(src), err)
	}
	enumTypeValue := PlatformNone(value)
	for _, existing := range AllowedPlatformNoneEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlatformNone", value)
}

// NewPlatformNoneFromValue returns a pointer to a valid PlatformNone
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewPlatformNoneFromValue(v string) (*PlatformNone, error) {
	ev := PlatformNone(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlatformNone: valid values are %v", v, AllowedPlatformNoneEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v PlatformNone) IsValid() bool {
	for _, existing := range AllowedPlatformNoneEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to platformNone value.
func (v PlatformNone) Ptr() *PlatformNone {
	return &v
}

type NullablePlatformNone struct {
	value *PlatformNone
	isSet bool
}

func (v NullablePlatformNone) Get() *PlatformNone {
	return v.value
}

func (v *NullablePlatformNone) Set(val *PlatformNone) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformNone) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformNone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformNone(val *PlatformNone) *NullablePlatformNone {
	return &NullablePlatformNone{value: val, isSet: true}
}

func (v NullablePlatformNone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullablePlatformNone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
