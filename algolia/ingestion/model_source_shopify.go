// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceShopify struct for SourceShopify.
type SourceShopify struct {
	// Feature flags for the Shopify source.
	FeatureFlags map[string]any `json:"featureFlags,omitempty"`
	// URL of the Shopify store.
	ShopURL string `json:"shopURL"`
}

type SourceShopifyOption func(f *SourceShopify)

func WithSourceShopifyFeatureFlags(val map[string]any) SourceShopifyOption {
	return func(f *SourceShopify) {
		f.FeatureFlags = val
	}
}

// NewSourceShopify instantiates a new SourceShopify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSourceShopify(shopURL string, opts ...SourceShopifyOption) *SourceShopify {
	this := &SourceShopify{}
	this.ShopURL = shopURL
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySourceShopify return a pointer to an empty SourceShopify object.
func NewEmptySourceShopify() *SourceShopify {
	return &SourceShopify{}
}

// GetFeatureFlags returns the FeatureFlags field value if set, zero value otherwise.
func (o *SourceShopify) GetFeatureFlags() map[string]any {
	if o == nil || o.FeatureFlags == nil {
		var ret map[string]any
		return ret
	}
	return o.FeatureFlags
}

// GetFeatureFlagsOk returns a tuple with the FeatureFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceShopify) GetFeatureFlagsOk() (map[string]any, bool) {
	if o == nil || o.FeatureFlags == nil {
		return nil, false
	}
	return o.FeatureFlags, true
}

// HasFeatureFlags returns a boolean if a field has been set.
func (o *SourceShopify) HasFeatureFlags() bool {
	if o != nil && o.FeatureFlags != nil {
		return true
	}

	return false
}

// SetFeatureFlags gets a reference to the given map[string]any and assigns it to the FeatureFlags field.
func (o *SourceShopify) SetFeatureFlags(v map[string]any) *SourceShopify {
	o.FeatureFlags = v
	return o
}

// GetShopURL returns the ShopURL field value.
func (o *SourceShopify) GetShopURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopURL
}

// GetShopURLOk returns a tuple with the ShopURL field value
// and a boolean to check if the value has been set.
func (o *SourceShopify) GetShopURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopURL, true
}

// SetShopURL sets field value.
func (o *SourceShopify) SetShopURL(v string) *SourceShopify {
	o.ShopURL = v
	return o
}

func (o SourceShopify) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.FeatureFlags != nil {
		toSerialize["featureFlags"] = o.FeatureFlags
	}
	if true {
		toSerialize["shopURL"] = o.ShopURL
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SourceShopify: %w", err)
	}

	return serialized, nil
}

func (o SourceShopify) String() string {
	out := ""
	out += fmt.Sprintf("  featureFlags=%v\n", o.FeatureFlags)
	out += fmt.Sprintf("  shopURL=%v\n", o.ShopURL)
	return fmt.Sprintf("SourceShopify {\n%s}", out)
}
