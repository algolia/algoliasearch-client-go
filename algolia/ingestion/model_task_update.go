// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TaskUpdate The payload for a task update.
type TaskUpdate struct {
	// The destination UUID.
	DestinationID *string       `json:"destinationID,omitempty"`
	Trigger       *TriggerInput `json:"trigger,omitempty"`
	// Whether the task is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
}

type TaskUpdateOption func(f *TaskUpdate)

func WithTaskUpdateDestinationID(val string) TaskUpdateOption {
	return func(f *TaskUpdate) {
		f.DestinationID = &val
	}
}

func WithTaskUpdateTrigger(val TriggerInput) TaskUpdateOption {
	return func(f *TaskUpdate) {
		f.Trigger = &val
	}
}

func WithTaskUpdateEnabled(val bool) TaskUpdateOption {
	return func(f *TaskUpdate) {
		f.Enabled = &val
	}
}

// NewTaskUpdate instantiates a new TaskUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskUpdate(opts ...TaskUpdateOption) *TaskUpdate {
	this := &TaskUpdate{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewTaskUpdateWithDefaults instantiates a new TaskUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskUpdateWithDefaults() *TaskUpdate {
	this := &TaskUpdate{}
	return this
}

// GetDestinationID returns the DestinationID field value if set, zero value otherwise.
func (o *TaskUpdate) GetDestinationID() string {
	if o == nil || o.DestinationID == nil {
		var ret string
		return ret
	}
	return *o.DestinationID
}

// GetDestinationIDOk returns a tuple with the DestinationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdate) GetDestinationIDOk() (*string, bool) {
	if o == nil || o.DestinationID == nil {
		return nil, false
	}
	return o.DestinationID, true
}

// HasDestinationID returns a boolean if a field has been set.
func (o *TaskUpdate) HasDestinationID() bool {
	if o != nil && o.DestinationID != nil {
		return true
	}

	return false
}

// SetDestinationID gets a reference to the given string and assigns it to the DestinationID field.
func (o *TaskUpdate) SetDestinationID(v string) {
	o.DestinationID = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *TaskUpdate) GetTrigger() TriggerInput {
	if o == nil || o.Trigger == nil {
		var ret TriggerInput
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdate) GetTriggerOk() (*TriggerInput, bool) {
	if o == nil || o.Trigger == nil {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *TaskUpdate) HasTrigger() bool {
	if o != nil && o.Trigger != nil {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given TriggerInput and assigns it to the Trigger field.
func (o *TaskUpdate) SetTrigger(v TriggerInput) {
	o.Trigger = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TaskUpdate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TaskUpdate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TaskUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o TaskUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.DestinationID != nil {
		toSerialize["destinationID"] = o.DestinationID
	}
	if o.Trigger != nil {
		toSerialize["trigger"] = o.Trigger
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

func (o TaskUpdate) String() string {
	out := "TaskUpdate {\n"
	out += fmt.Sprintf("  destinationID=%v\n", o.DestinationID)
	out += fmt.Sprintf("  trigger=%v\n", o.Trigger)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	out += "}"
	return out
}

type NullableTaskUpdate struct {
	value *TaskUpdate
	isSet bool
}

func (v NullableTaskUpdate) Get() *TaskUpdate {
	return v.value
}

func (v *NullableTaskUpdate) Set(val *TaskUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskUpdate(val *TaskUpdate) *NullableTaskUpdate {
	return &NullableTaskUpdate{value: val, isSet: true}
}

func (v NullableTaskUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
