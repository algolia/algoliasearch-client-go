// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// AuthInput - struct for AuthInput.
type AuthInput struct {
	AuthAPIKey               *AuthAPIKey
	AuthAlgolia              *AuthAlgolia
	AuthAlgoliaInsights      *AuthAlgoliaInsights
	AuthBasic                *AuthBasic
	AuthGoogleServiceAccount *AuthGoogleServiceAccount
	AuthOAuth                *AuthOAuth
	MapmapOfStringstring     *map[string]string
}

// AuthOAuthAsAuthInput is a convenience function that returns AuthOAuth wrapped in AuthInput.
func AuthOAuthAsAuthInput(v *AuthOAuth) *AuthInput {
	return &AuthInput{
		AuthOAuth: v,
	}
}

// AuthGoogleServiceAccountAsAuthInput is a convenience function that returns AuthGoogleServiceAccount wrapped in AuthInput.
func AuthGoogleServiceAccountAsAuthInput(v *AuthGoogleServiceAccount) *AuthInput {
	return &AuthInput{
		AuthGoogleServiceAccount: v,
	}
}

// AuthBasicAsAuthInput is a convenience function that returns AuthBasic wrapped in AuthInput.
func AuthBasicAsAuthInput(v *AuthBasic) *AuthInput {
	return &AuthInput{
		AuthBasic: v,
	}
}

// AuthAPIKeyAsAuthInput is a convenience function that returns AuthAPIKey wrapped in AuthInput.
func AuthAPIKeyAsAuthInput(v *AuthAPIKey) *AuthInput {
	return &AuthInput{
		AuthAPIKey: v,
	}
}

// AuthAlgoliaAsAuthInput is a convenience function that returns AuthAlgolia wrapped in AuthInput.
func AuthAlgoliaAsAuthInput(v *AuthAlgolia) *AuthInput {
	return &AuthInput{
		AuthAlgolia: v,
	}
}

// AuthAlgoliaInsightsAsAuthInput is a convenience function that returns AuthAlgoliaInsights wrapped in AuthInput.
func AuthAlgoliaInsightsAsAuthInput(v *AuthAlgoliaInsights) *AuthInput {
	return &AuthInput{
		AuthAlgoliaInsights: v,
	}
}

// map[string]stringAsAuthInput is a convenience function that returns map[string]string wrapped in AuthInput.
func MapmapOfStringstringAsAuthInput(v map[string]string) *AuthInput {
	return &AuthInput{
		MapmapOfStringstring: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *AuthInput) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "url") && utils.HasKey(jsonDict, "client_id") && utils.HasKey(jsonDict, "client_secret") {
		// try to unmarshal data into AuthOAuth
		err = newStrictDecoder(data).Decode(&dst.AuthOAuth)
		if err == nil && validateStruct(dst.AuthOAuth) == nil {
			return nil // found the correct type
		} else {
			dst.AuthOAuth = nil
		}
	}
	if utils.HasKey(jsonDict, "clientEmail") && utils.HasKey(jsonDict, "privateKey") {
		// try to unmarshal data into AuthGoogleServiceAccount
		err = newStrictDecoder(data).Decode(&dst.AuthGoogleServiceAccount)
		if err == nil && validateStruct(dst.AuthGoogleServiceAccount) == nil {
			return nil // found the correct type
		} else {
			dst.AuthGoogleServiceAccount = nil
		}
	}
	if utils.HasKey(jsonDict, "username") && utils.HasKey(jsonDict, "password") {
		// try to unmarshal data into AuthBasic
		err = newStrictDecoder(data).Decode(&dst.AuthBasic)
		if err == nil && validateStruct(dst.AuthBasic) == nil {
			return nil // found the correct type
		} else {
			dst.AuthBasic = nil
		}
	}
	if utils.HasKey(jsonDict, "key") {
		// try to unmarshal data into AuthAPIKey
		err = newStrictDecoder(data).Decode(&dst.AuthAPIKey)
		if err == nil && validateStruct(dst.AuthAPIKey) == nil {
			return nil // found the correct type
		} else {
			dst.AuthAPIKey = nil
		}
	}
	// try to unmarshal data into AuthAlgolia
	err = newStrictDecoder(data).Decode(&dst.AuthAlgolia)
	if err == nil && validateStruct(dst.AuthAlgolia) == nil {
		return nil // found the correct type
	} else {
		dst.AuthAlgolia = nil
	}
	// try to unmarshal data into AuthAlgoliaInsights
	err = newStrictDecoder(data).Decode(&dst.AuthAlgoliaInsights)
	if err == nil && validateStruct(dst.AuthAlgoliaInsights) == nil {
		return nil // found the correct type
	} else {
		dst.AuthAlgoliaInsights = nil
	}
	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil && validateStruct(dst.MapmapOfStringstring) == nil {
		return nil // found the correct type
	} else {
		dst.MapmapOfStringstring = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(AuthInput)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src AuthInput) MarshalJSON() ([]byte, error) {
	if src.AuthAPIKey != nil {
		serialized, err := json.Marshal(&src.AuthAPIKey)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAPIKey of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.AuthAlgolia != nil {
		serialized, err := json.Marshal(&src.AuthAlgolia)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAlgolia of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.AuthAlgoliaInsights != nil {
		serialized, err := json.Marshal(&src.AuthAlgoliaInsights)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAlgoliaInsights of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.AuthBasic != nil {
		serialized, err := json.Marshal(&src.AuthBasic)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthBasic of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.AuthGoogleServiceAccount != nil {
		serialized, err := json.Marshal(&src.AuthGoogleServiceAccount)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthGoogleServiceAccount of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.AuthOAuth != nil {
		serialized, err := json.Marshal(&src.AuthOAuth)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthOAuth of AuthInput: %w", err)
		}

		return serialized, nil
	}

	if src.MapmapOfStringstring != nil {
		serialized, err := json.Marshal(&src.MapmapOfStringstring)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of MapmapOfStringstring of AuthInput: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj AuthInput) GetActualInstance() any {
	if obj.AuthAPIKey != nil {
		return *obj.AuthAPIKey
	}

	if obj.AuthAlgolia != nil {
		return *obj.AuthAlgolia
	}

	if obj.AuthAlgoliaInsights != nil {
		return *obj.AuthAlgoliaInsights
	}

	if obj.AuthBasic != nil {
		return *obj.AuthBasic
	}

	if obj.AuthGoogleServiceAccount != nil {
		return *obj.AuthGoogleServiceAccount
	}

	if obj.AuthOAuth != nil {
		return *obj.AuthOAuth
	}

	if obj.MapmapOfStringstring != nil {
		return *obj.MapmapOfStringstring
	}

	// all schemas are nil
	return nil
}
