// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceUpdateCommercetools struct for SourceUpdateCommercetools.
type SourceUpdateCommercetools struct {
	// Unique and immutable key of the referenced Store.
	StoreKeys []string `json:"storeKeys,omitempty"`
	// Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].
	Locales []string `json:"locales,omitempty"`
}

type SourceUpdateCommercetoolsOption func(f *SourceUpdateCommercetools)

func WithSourceUpdateCommercetoolsStoreKeys(val []string) SourceUpdateCommercetoolsOption {
	return func(f *SourceUpdateCommercetools) {
		f.StoreKeys = val
	}
}

func WithSourceUpdateCommercetoolsLocales(val []string) SourceUpdateCommercetoolsOption {
	return func(f *SourceUpdateCommercetools) {
		f.Locales = val
	}
}

// NewSourceUpdateCommercetools instantiates a new SourceUpdateCommercetools object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSourceUpdateCommercetools(opts ...SourceUpdateCommercetoolsOption) *SourceUpdateCommercetools {
	this := &SourceUpdateCommercetools{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySourceUpdateCommercetools return a pointer to an empty SourceUpdateCommercetools object.
func NewEmptySourceUpdateCommercetools() *SourceUpdateCommercetools {
	return &SourceUpdateCommercetools{}
}

// GetStoreKeys returns the StoreKeys field value if set, zero value otherwise.
func (o *SourceUpdateCommercetools) GetStoreKeys() []string {
	if o == nil || o.StoreKeys == nil {
		var ret []string
		return ret
	}
	return o.StoreKeys
}

// GetStoreKeysOk returns a tuple with the StoreKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceUpdateCommercetools) GetStoreKeysOk() ([]string, bool) {
	if o == nil || o.StoreKeys == nil {
		return nil, false
	}
	return o.StoreKeys, true
}

// HasStoreKeys returns a boolean if a field has been set.
func (o *SourceUpdateCommercetools) HasStoreKeys() bool {
	if o != nil && o.StoreKeys != nil {
		return true
	}

	return false
}

// SetStoreKeys gets a reference to the given []string and assigns it to the StoreKeys field.
func (o *SourceUpdateCommercetools) SetStoreKeys(v []string) *SourceUpdateCommercetools {
	o.StoreKeys = v
	return o
}

// GetLocales returns the Locales field value if set, zero value otherwise.
func (o *SourceUpdateCommercetools) GetLocales() []string {
	if o == nil || o.Locales == nil {
		var ret []string
		return ret
	}
	return o.Locales
}

// GetLocalesOk returns a tuple with the Locales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceUpdateCommercetools) GetLocalesOk() ([]string, bool) {
	if o == nil || o.Locales == nil {
		return nil, false
	}
	return o.Locales, true
}

// HasLocales returns a boolean if a field has been set.
func (o *SourceUpdateCommercetools) HasLocales() bool {
	if o != nil && o.Locales != nil {
		return true
	}

	return false
}

// SetLocales gets a reference to the given []string and assigns it to the Locales field.
func (o *SourceUpdateCommercetools) SetLocales(v []string) *SourceUpdateCommercetools {
	o.Locales = v
	return o
}

func (o SourceUpdateCommercetools) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.StoreKeys != nil {
		toSerialize["storeKeys"] = o.StoreKeys
	}
	if o.Locales != nil {
		toSerialize["locales"] = o.Locales
	}
	return json.Marshal(toSerialize)
}

func (o SourceUpdateCommercetools) String() string {
	out := ""
	out += fmt.Sprintf("  storeKeys=%v\n", o.StoreKeys)
	out += fmt.Sprintf("  locales=%v\n", o.Locales)
	return fmt.Sprintf("SourceUpdateCommercetools {\n%s}", out)
}

type NullableSourceUpdateCommercetools struct {
	value *SourceUpdateCommercetools
	isSet bool
}

func (v NullableSourceUpdateCommercetools) Get() *SourceUpdateCommercetools {
	return v.value
}

func (v *NullableSourceUpdateCommercetools) Set(val *SourceUpdateCommercetools) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceUpdateCommercetools) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceUpdateCommercetools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceUpdateCommercetools(val *SourceUpdateCommercetools) *NullableSourceUpdateCommercetools {
	return &NullableSourceUpdateCommercetools{value: val, isSet: true}
}

func (v NullableSourceUpdateCommercetools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceUpdateCommercetools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
