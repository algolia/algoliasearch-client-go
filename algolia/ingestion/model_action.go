// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// Action Which indexing operation to perform:  - `addObject`: adds records to an index.    Equivalent to the \"Add a new record (with auto-generated object ID)\" operation. - `updateObject`: adds or replaces records in an index.    Equivalent to the \"Add or replace a record\" operation. - `partialUpdateObject`: adds or updates attributes within records.    Equivalent to the \"Add or update attributes\" operation with the `createIfNoExists` parameter set to true.    (If a record with the specified `objectID` doesn't exist in the specified index, this action creates adds the record to the index) - `partialUpdateObjectNoCreate`: same as `partialUpdateObject`, but with `createIfNoExists` set to false.    (A record isn't added to the index if its `objectID` doesn't exist) - `deleteObject`: delete records from an index.   Equivalent to the \"Delete a record\" operation. - `delete`. Delete an index. Equivalent to the \"Delete an index\" operation. - `clear`: delete all records from an index. Equivalent to the \"Delete all records from an index operation\".
type Action string

// List of action.
const (
	ACTION_ADD_OBJECT                      Action = "addObject"
	ACTION_UPDATE_OBJECT                   Action = "updateObject"
	ACTION_PARTIAL_UPDATE_OBJECT           Action = "partialUpdateObject"
	ACTION_PARTIAL_UPDATE_OBJECT_NO_CREATE Action = "partialUpdateObjectNoCreate"
	ACTION_DELETE_OBJECT                   Action = "deleteObject"
	ACTION_DELETE                          Action = "delete"
	ACTION_CLEAR                           Action = "clear"
)

// All allowed values of Action enum.
var AllowedActionEnumValues = []Action{
	"addObject",
	"updateObject",
	"partialUpdateObject",
	"partialUpdateObjectNoCreate",
	"deleteObject",
	"delete",
	"clear",
}

// NewActionFromValue returns a pointer to a valid Action.
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewActionFromValue(v string) (*Action, error) {
	ev := Action(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Action: valid values are %v", v, AllowedActionEnumValues)
	}
}

func (v *Action) UnmarshalJSON(src []byte) error {
	var value string

	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Action': %w", string(src), err)
	}

	enumTypeValue := Action(value)
	for _, existing := range AllowedActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue

			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Action", value)
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Action) IsValid() bool {
	for _, existing := range AllowedActionEnumValues {
		if existing == v {
			return true
		}
	}

	return false
}

// Ptr returns reference to action value.
func (v Action) Ptr() *Action {
	return &v
}
