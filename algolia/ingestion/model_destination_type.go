// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// DestinationType Destination type.  - `search`.   Data is stored in an Algolia index.  - `insights`.   Data is recorded as user events in the Insights API.
type DestinationType string

// List of DestinationType.
const (
	DESTINATION_TYPE_SEARCH   DestinationType = "search"
	DESTINATION_TYPE_INSIGHTS DestinationType = "insights"
)

// All allowed values of DestinationType enum.
var AllowedDestinationTypeEnumValues = []DestinationType{
	"search",
	"insights",
}

func (v *DestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'DestinationType': %w", string(src), err)
	}
	enumTypeValue := DestinationType(value)
	for _, existing := range AllowedDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationType", value)
}

// NewDestinationTypeFromValue returns a pointer to a valid DestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewDestinationTypeFromValue(v string) (*DestinationType, error) {
	ev := DestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationType: valid values are %v", v, AllowedDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v DestinationType) IsValid() bool {
	for _, existing := range AllowedDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationType value.
func (v DestinationType) Ptr() *DestinationType {
	return &v
}
