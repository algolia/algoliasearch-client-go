// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationType The type of transformation, which can be either 'code' or 'noCode'.
type TransformationType string

// List of TransformationType.
const (
	TRANSFORMATION_TYPE_CODE    TransformationType = "code"
	TRANSFORMATION_TYPE_NO_CODE TransformationType = "noCode"
)

// All allowed values of TransformationType enum.
var AllowedTransformationTypeEnumValues = []TransformationType{
	"code",
	"noCode",
}

func (v *TransformationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'TransformationType': %w", string(src), err)
	}
	enumTypeValue := TransformationType(value)
	for _, existing := range AllowedTransformationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransformationType", value)
}

// NewTransformationTypeFromValue returns a pointer to a valid TransformationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewTransformationTypeFromValue(v string) (*TransformationType, error) {
	ev := TransformationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransformationType: valid values are %v", v, AllowedTransformationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v TransformationType) IsValid() bool {
	for _, existing := range AllowedTransformationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransformationType value.
func (v TransformationType) Ptr() *TransformationType {
	return &v
}
