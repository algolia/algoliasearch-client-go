// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceValidateResponse struct for SourceValidateResponse.
type SourceValidateResponse struct {
	// Universally unique identifier (UUID) of a task run.
	RunID *string `json:"runID,omitempty"`
	// depending on the source type, the validation returns sampling data of your source (JSON, CSV, BigQuery).
	Data []map[string]any `json:"data,omitempty"`
	// in case of error, observability events will be added to the response, if any.
	Events []Event `json:"events,omitempty"`
	// a message describing the outcome of a validate run.
	Message string `json:"message"`
}

type SourceValidateResponseOption func(f *SourceValidateResponse)

func WithSourceValidateResponseRunID(val string) SourceValidateResponseOption {
	return func(f *SourceValidateResponse) {
		f.RunID = &val
	}
}

func WithSourceValidateResponseData(val []map[string]any) SourceValidateResponseOption {
	return func(f *SourceValidateResponse) {
		f.Data = val
	}
}

func WithSourceValidateResponseEvents(val []Event) SourceValidateResponseOption {
	return func(f *SourceValidateResponse) {
		f.Events = val
	}
}

// NewSourceValidateResponse instantiates a new SourceValidateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSourceValidateResponse(message string, opts ...SourceValidateResponseOption) *SourceValidateResponse {
	this := &SourceValidateResponse{}
	this.Message = message
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySourceValidateResponse return a pointer to an empty SourceValidateResponse object.
func NewEmptySourceValidateResponse() *SourceValidateResponse {
	return &SourceValidateResponse{}
}

// GetRunID returns the RunID field value if set, zero value otherwise.
func (o *SourceValidateResponse) GetRunID() string {
	if o == nil || o.RunID == nil {
		var ret string
		return ret
	}
	return *o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceValidateResponse) GetRunIDOk() (*string, bool) {
	if o == nil || o.RunID == nil {
		return nil, false
	}
	return o.RunID, true
}

// HasRunID returns a boolean if a field has been set.
func (o *SourceValidateResponse) HasRunID() bool {
	if o != nil && o.RunID != nil {
		return true
	}

	return false
}

// SetRunID gets a reference to the given string and assigns it to the RunID field.
func (o *SourceValidateResponse) SetRunID(v string) *SourceValidateResponse {
	o.RunID = &v
	return o
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SourceValidateResponse) GetData() []map[string]any {
	if o == nil || o.Data == nil {
		var ret []map[string]any
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceValidateResponse) GetDataOk() ([]map[string]any, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SourceValidateResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]any and assigns it to the Data field.
func (o *SourceValidateResponse) SetData(v []map[string]any) *SourceValidateResponse {
	o.Data = v
	return o
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SourceValidateResponse) GetEvents() []Event {
	if o == nil || o.Events == nil {
		var ret []Event
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceValidateResponse) GetEventsOk() ([]Event, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SourceValidateResponse) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []Event and assigns it to the Events field.
func (o *SourceValidateResponse) SetEvents(v []Event) *SourceValidateResponse {
	o.Events = v
	return o
}

// GetMessage returns the Message field value.
func (o *SourceValidateResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SourceValidateResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value.
func (o *SourceValidateResponse) SetMessage(v string) *SourceValidateResponse {
	o.Message = v
	return o
}

func (o SourceValidateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.RunID != nil {
		toSerialize["runID"] = o.RunID
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if true {
		toSerialize["message"] = o.Message
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SourceValidateResponse: %w", err)
	}

	return serialized, nil
}

func (o SourceValidateResponse) String() string {
	out := ""
	out += fmt.Sprintf("  runID=%v\n", o.RunID)
	out += fmt.Sprintf("  data=%v\n", o.Data)
	out += fmt.Sprintf("  events=%v\n", o.Events)
	out += fmt.Sprintf("  message=%v\n", o.Message)
	return fmt.Sprintf("SourceValidateResponse {\n%s}", out)
}
