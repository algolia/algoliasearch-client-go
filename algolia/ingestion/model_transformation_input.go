// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationInput - The input for the transformation, which can be either code or a no-code configuration.
type TransformationInput struct {
	TransformationCode   *TransformationCode
	TransformationNoCode *TransformationNoCode
}

// TransformationCodeAsTransformationInput is a convenience function that returns TransformationCode wrapped in TransformationInput.
func TransformationCodeAsTransformationInput(v *TransformationCode) *TransformationInput {
	return &TransformationInput{
		TransformationCode: v,
	}
}

// TransformationNoCodeAsTransformationInput is a convenience function that returns TransformationNoCode wrapped in TransformationInput.
func TransformationNoCodeAsTransformationInput(v *TransformationNoCode) *TransformationInput {
	return &TransformationInput{
		TransformationNoCode: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *TransformationInput) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into TransformationCode
	err = json.Unmarshal(data, &dst.TransformationCode)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.TransformationCode = nil
	}
	// try to unmarshal data into TransformationNoCode
	err = json.Unmarshal(data, &dst.TransformationNoCode)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.TransformationNoCode = nil
	}

	return fmt.Errorf("data failed to match schemas in oneOf(TransformationInput)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src TransformationInput) MarshalJSON() ([]byte, error) {
	if src.TransformationCode != nil {
		serialized, err := json.Marshal(&src.TransformationCode)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of TransformationCode of TransformationInput: %w", err)
		}

		return serialized, nil
	}

	if src.TransformationNoCode != nil {
		serialized, err := json.Marshal(&src.TransformationNoCode)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of TransformationNoCode of TransformationInput: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj TransformationInput) GetActualInstance() any {
	if obj.TransformationCode != nil {
		return *obj.TransformationCode
	}

	if obj.TransformationNoCode != nil {
		return *obj.TransformationNoCode
	}

	// all schemas are nil
	return nil
}
