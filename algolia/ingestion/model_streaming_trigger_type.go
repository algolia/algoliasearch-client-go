// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// StreamingTriggerType Task runs continuously.
type StreamingTriggerType string

// List of StreamingTriggerType.
const (
	STREAMING_TRIGGER_TYPE_STREAMING StreamingTriggerType = "streaming"
)

// All allowed values of StreamingTriggerType enum.
var AllowedStreamingTriggerTypeEnumValues = []StreamingTriggerType{
	"streaming",
}

func (v *StreamingTriggerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'StreamingTriggerType': %w", string(src), err)
	}
	enumTypeValue := StreamingTriggerType(value)
	for _, existing := range AllowedStreamingTriggerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamingTriggerType", value)
}

// NewStreamingTriggerTypeFromValue returns a pointer to a valid StreamingTriggerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewStreamingTriggerTypeFromValue(v string) (*StreamingTriggerType, error) {
	ev := StreamingTriggerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamingTriggerType: valid values are %v", v, AllowedStreamingTriggerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v StreamingTriggerType) IsValid() bool {
	for _, existing := range AllowedStreamingTriggerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamingTriggerType value.
func (v StreamingTriggerType) Ptr() *StreamingTriggerType {
	return &v
}
