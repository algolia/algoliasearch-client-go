// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceJSON struct for SourceJSON.
type SourceJSON struct {
	// URL of the file.
	Url string `json:"url"`
	// Name of a column that contains a unique ID which will be used as `objectID` in Algolia.
	UniqueIDColumn *string     `json:"uniqueIDColumn,omitempty"`
	Method         *MethodType `json:"method,omitempty"`
}

type SourceJSONOption func(f *SourceJSON)

func WithSourceJSONUniqueIDColumn(val string) SourceJSONOption {
	return func(f *SourceJSON) {
		f.UniqueIDColumn = &val
	}
}

func WithSourceJSONMethod(val MethodType) SourceJSONOption {
	return func(f *SourceJSON) {
		f.Method = &val
	}
}

// NewSourceJSON instantiates a new SourceJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSourceJSON(url string, opts ...SourceJSONOption) *SourceJSON {
	this := &SourceJSON{}
	this.Url = url
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptySourceJSON return a pointer to an empty SourceJSON object.
func NewEmptySourceJSON() *SourceJSON {
	return &SourceJSON{}
}

// GetUrl returns the Url field value.
func (o *SourceJSON) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SourceJSON) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value.
func (o *SourceJSON) SetUrl(v string) *SourceJSON {
	o.Url = v
	return o
}

// GetUniqueIDColumn returns the UniqueIDColumn field value if set, zero value otherwise.
func (o *SourceJSON) GetUniqueIDColumn() string {
	if o == nil || o.UniqueIDColumn == nil {
		var ret string
		return ret
	}
	return *o.UniqueIDColumn
}

// GetUniqueIDColumnOk returns a tuple with the UniqueIDColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceJSON) GetUniqueIDColumnOk() (*string, bool) {
	if o == nil || o.UniqueIDColumn == nil {
		return nil, false
	}
	return o.UniqueIDColumn, true
}

// HasUniqueIDColumn returns a boolean if a field has been set.
func (o *SourceJSON) HasUniqueIDColumn() bool {
	if o != nil && o.UniqueIDColumn != nil {
		return true
	}

	return false
}

// SetUniqueIDColumn gets a reference to the given string and assigns it to the UniqueIDColumn field.
func (o *SourceJSON) SetUniqueIDColumn(v string) *SourceJSON {
	o.UniqueIDColumn = &v
	return o
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *SourceJSON) GetMethod() MethodType {
	if o == nil || o.Method == nil {
		var ret MethodType
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceJSON) GetMethodOk() (*MethodType, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *SourceJSON) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given MethodType and assigns it to the Method field.
func (o *SourceJSON) SetMethod(v MethodType) *SourceJSON {
	o.Method = &v
	return o
}

func (o SourceJSON) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.UniqueIDColumn != nil {
		toSerialize["uniqueIDColumn"] = o.UniqueIDColumn
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SourceJSON: %w", err)
	}

	return serialized, nil
}

func (o SourceJSON) String() string {
	out := ""
	out += fmt.Sprintf("  url=%v\n", o.Url)
	out += fmt.Sprintf("  uniqueIDColumn=%v\n", o.UniqueIDColumn)
	out += fmt.Sprintf("  method=%v\n", o.Method)
	return fmt.Sprintf("SourceJSON {\n%s}", out)
}

type NullableSourceJSON struct {
	value *SourceJSON
	isSet bool
}

func (v NullableSourceJSON) Get() *SourceJSON {
	return v.value
}

func (v *NullableSourceJSON) Set(val *SourceJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceJSON(val *SourceJSON) *NullableSourceJSON {
	return &NullableSourceJSON{value: val, isSet: true}
}

func (v NullableSourceJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableSourceJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
