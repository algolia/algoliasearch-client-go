// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// AuthOAuth Credentials for authenticating with OAuth 2.0.
type AuthOAuth struct {
	// URL for the OAuth endpoint.
	Url string `json:"url"`
	// Client ID.
	ClientId string `json:"client_id"`
	// Client secret. This field is `null` in the API response.
	ClientSecret string `json:"client_secret"`
	// OAuth scope.
	Scope *string `json:"scope,omitempty"`
}

type AuthOAuthOption func(f *AuthOAuth)

func WithAuthOAuthScope(val string) AuthOAuthOption {
	return func(f *AuthOAuth) {
		f.Scope = &val
	}
}

// NewAuthOAuth instantiates a new AuthOAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewAuthOAuth(url string, clientId string, clientSecret string, opts ...AuthOAuthOption) *AuthOAuth {
	this := &AuthOAuth{}
	this.Url = url
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyAuthOAuth return a pointer to an empty AuthOAuth object.
func NewEmptyAuthOAuth() *AuthOAuth {
	return &AuthOAuth{}
}

// GetUrl returns the Url field value.
func (o *AuthOAuth) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AuthOAuth) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value.
func (o *AuthOAuth) SetUrl(v string) *AuthOAuth {
	o.Url = v
	return o
}

// GetClientId returns the ClientId field value.
func (o *AuthOAuth) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *AuthOAuth) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value.
func (o *AuthOAuth) SetClientId(v string) *AuthOAuth {
	o.ClientId = v
	return o
}

// GetClientSecret returns the ClientSecret field value.
func (o *AuthOAuth) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *AuthOAuth) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value.
func (o *AuthOAuth) SetClientSecret(v string) *AuthOAuth {
	o.ClientSecret = v
	return o
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AuthOAuth) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthOAuth) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AuthOAuth) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *AuthOAuth) SetScope(v string) *AuthOAuth {
	o.Scope = &v
	return o
}

func (o AuthOAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["client_id"] = o.ClientId
	}
	if true {
		toSerialize["client_secret"] = o.ClientSecret
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal AuthOAuth: %w", err)
	}

	return serialized, nil
}

func (o AuthOAuth) String() string {
	out := ""
	out += fmt.Sprintf("  url=%v\n", o.Url)
	out += fmt.Sprintf("  client_id=%v\n", o.ClientId)
	out += fmt.Sprintf("  client_secret=%v\n", o.ClientSecret)
	out += fmt.Sprintf("  scope=%v\n", o.Scope)
	return fmt.Sprintf("AuthOAuth {\n%s}", out)
}

type NullableAuthOAuth struct {
	value *AuthOAuth
	isSet bool
}

func (v NullableAuthOAuth) Get() *AuthOAuth {
	return v.value
}

func (v *NullableAuthOAuth) Set(val *AuthOAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthOAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthOAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthOAuth(val *AuthOAuth) *NullableAuthOAuth {
	return &NullableAuthOAuth{value: val, isSet: true}
}

func (v NullableAuthOAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableAuthOAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
