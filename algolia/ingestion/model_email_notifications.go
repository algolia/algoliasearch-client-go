// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// EmailNotifications struct for EmailNotifications.
type EmailNotifications struct {
	// Whether to send email notifications, note that this doesn't prevent the task from being blocked.
	Enabled *bool `json:"enabled,omitempty"`
}

type EmailNotificationsOption func(f *EmailNotifications)

func WithEmailNotificationsEnabled(val bool) EmailNotificationsOption {
	return func(f *EmailNotifications) {
		f.Enabled = &val
	}
}

// NewEmailNotifications instantiates a new EmailNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewEmailNotifications(opts ...EmailNotificationsOption) *EmailNotifications {
	this := &EmailNotifications{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyEmailNotifications return a pointer to an empty EmailNotifications object.
func NewEmptyEmailNotifications() *EmailNotifications {
	return &EmailNotifications{}
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EmailNotifications) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailNotifications) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EmailNotifications) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EmailNotifications) SetEnabled(v bool) *EmailNotifications {
	o.Enabled = &v
	return o
}

func (o EmailNotifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal EmailNotifications: %w", err)
	}

	return serialized, nil
}

func (o EmailNotifications) String() string {
	out := ""
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	return fmt.Sprintf("EmailNotifications {\n%s}", out)
}
