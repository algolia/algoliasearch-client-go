// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TaskSearch struct for TaskSearch
type TaskSearch struct {
	TaskIDs []string `json:"taskIDs"`
}

// NewTaskSearch instantiates a new TaskSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskSearch(taskIDs []string) *TaskSearch {
	this := &TaskSearch{}
	this.TaskIDs = taskIDs
	return this
}

// NewTaskSearchWithDefaults instantiates a new TaskSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskSearchWithDefaults() *TaskSearch {
	this := &TaskSearch{}
	return this
}

// GetTaskIDs returns the TaskIDs field value
func (o *TaskSearch) GetTaskIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TaskIDs
}

// GetTaskIDsOk returns a tuple with the TaskIDs field value
// and a boolean to check if the value has been set.
func (o *TaskSearch) GetTaskIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskIDs, true
}

// SetTaskIDs sets field value
func (o *TaskSearch) SetTaskIDs(v []string) {
	o.TaskIDs = v
}

func (o TaskSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["taskIDs"] = o.TaskIDs
	}
	return json.Marshal(toSerialize)
}

func (o TaskSearch) String() string {
	out := ""
	out += fmt.Sprintf("  taskIDs=%v\n", o.TaskIDs)
	return fmt.Sprintf("TaskSearch {\n%s}", out)
}

type NullableTaskSearch struct {
	value *TaskSearch
	isSet bool
}

func (v NullableTaskSearch) Get() *TaskSearch {
	return v.value
}

func (v *NullableTaskSearch) Set(val *TaskSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSearch(val *TaskSearch) *NullableTaskSearch {
	return &NullableTaskSearch{value: val, isSet: true}
}

func (v NullableTaskSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
