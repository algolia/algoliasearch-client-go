// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunSortKeys Property by which to sort the list of task runs.
type RunSortKeys string

// List of runSortKeys.
const (
	RUNSORTKEYS_STATUS     RunSortKeys = "status"
	RUNSORTKEYS_UPDATED_AT RunSortKeys = "updatedAt"
	RUNSORTKEYS_CREATED_AT RunSortKeys = "createdAt"
)

// All allowed values of RunSortKeys enum.
var AllowedRunSortKeysEnumValues = []RunSortKeys{
	"status",
	"updatedAt",
	"createdAt",
}

func (v *RunSortKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RunSortKeys': %w", string(src), err)
	}
	enumTypeValue := RunSortKeys(value)
	for _, existing := range AllowedRunSortKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunSortKeys", value)
}

// NewRunSortKeysFromValue returns a pointer to a valid RunSortKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRunSortKeysFromValue(v string) (*RunSortKeys, error) {
	ev := RunSortKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunSortKeys: valid values are %v", v, AllowedRunSortKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RunSortKeys) IsValid() bool {
	for _, existing := range AllowedRunSortKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to runSortKeys value.
func (v RunSortKeys) Ptr() *RunSortKeys {
	return &v
}

type NullableRunSortKeys struct {
	value *RunSortKeys
	isSet bool
}

func (v NullableRunSortKeys) Get() *RunSortKeys {
	return v.value
}

func (v *NullableRunSortKeys) Set(val *RunSortKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableRunSortKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableRunSortKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunSortKeys(val *RunSortKeys) *NullableRunSortKeys {
	return &NullableRunSortKeys{value: val, isSet: true}
}

func (v NullableRunSortKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRunSortKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
