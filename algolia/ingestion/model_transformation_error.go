// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationError The error if the transformation failed.
type TransformationError struct {
	// The error status code.
	Code *int32 `json:"code,omitempty"`
	// A descriptive message explaining the failure.
	Message *string `json:"message,omitempty"`
}

type TransformationErrorOption func(f *TransformationError)

func WithTransformationErrorCode(val int32) TransformationErrorOption {
	return func(f *TransformationError) {
		f.Code = &val
	}
}

func WithTransformationErrorMessage(val string) TransformationErrorOption {
	return func(f *TransformationError) {
		f.Message = &val
	}
}

// NewTransformationError instantiates a new TransformationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformationError(opts ...TransformationErrorOption) *TransformationError {
	this := &TransformationError{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyTransformationError return a pointer to an empty TransformationError object.
func NewEmptyTransformationError() *TransformationError {
	return &TransformationError{}
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TransformationError) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationError) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TransformationError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *TransformationError) SetCode(v int32) *TransformationError {
	o.Code = &v
	return o
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TransformationError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformationError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TransformationError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TransformationError) SetMessage(v string) *TransformationError {
	o.Message = &v
	return o
}

func (o TransformationError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TransformationError: %w", err)
	}

	return serialized, nil
}

func (o TransformationError) String() string {
	out := ""
	out += fmt.Sprintf("  code=%v\n", o.Code)
	out += fmt.Sprintf("  message=%v\n", o.Message)
	return fmt.Sprintf("TransformationError {\n%s}", out)
}
