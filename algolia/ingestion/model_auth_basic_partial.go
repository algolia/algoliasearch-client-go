// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// AuthBasicPartial Authentication input for Basic login with username and password.
type AuthBasicPartial struct {
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
}

type AuthBasicPartialOption func(f *AuthBasicPartial)

func WithAuthBasicPartialUsername(val string) AuthBasicPartialOption {
	return func(f *AuthBasicPartial) {
		f.Username = &val
	}
}

func WithAuthBasicPartialPassword(val string) AuthBasicPartialOption {
	return func(f *AuthBasicPartial) {
		f.Password = &val
	}
}

// NewAuthBasicPartial instantiates a new AuthBasicPartial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewAuthBasicPartial(opts ...AuthBasicPartialOption) *AuthBasicPartial {
	this := &AuthBasicPartial{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewAuthBasicPartialWithDefaults instantiates a new AuthBasicPartial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set.
func NewAuthBasicPartialWithDefaults() *AuthBasicPartial {
	this := &AuthBasicPartial{}
	return this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthBasicPartial) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthBasicPartial) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthBasicPartial) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthBasicPartial) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthBasicPartial) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthBasicPartial) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthBasicPartial) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthBasicPartial) SetPassword(v string) {
	o.Password = &v
}

func (o AuthBasicPartial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

func (o AuthBasicPartial) String() string {
	out := ""
	out += fmt.Sprintf("  username=%v\n", o.Username)
	out += fmt.Sprintf("  password=%v\n", o.Password)
	return fmt.Sprintf("AuthBasicPartial {\n%s}", out)
}

type NullableAuthBasicPartial struct {
	value *AuthBasicPartial
	isSet bool
}

func (v NullableAuthBasicPartial) Get() *AuthBasicPartial {
	return v.value
}

func (v *NullableAuthBasicPartial) Set(val *AuthBasicPartial) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthBasicPartial) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthBasicPartial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthBasicPartial(val *AuthBasicPartial) *NullableAuthBasicPartial {
	return &NullableAuthBasicPartial{value: val, isSet: true}
}

func (v NullableAuthBasicPartial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthBasicPartial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
