// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// DockerStreams struct for DockerStreams.
type DockerStreams struct {
	// The name of the stream to fetch the data from (e.g. table name).
	Name string `json:"name"`
	// The properties of the stream to select (e.g. column).
	Properties []string              `json:"properties,omitempty"`
	SyncMode   DockerStreamsSyncMode `json:"syncMode"`
}

type DockerStreamsOption func(f *DockerStreams)

func WithDockerStreamsProperties(val []string) DockerStreamsOption {
	return func(f *DockerStreams) {
		f.Properties = val
	}
}

// NewDockerStreams instantiates a new DockerStreams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewDockerStreams(name string, syncMode DockerStreamsSyncMode, opts ...DockerStreamsOption) *DockerStreams {
	this := &DockerStreams{}
	this.Name = name
	this.SyncMode = syncMode
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyDockerStreams return a pointer to an empty DockerStreams object.
func NewEmptyDockerStreams() *DockerStreams {
	return &DockerStreams{}
}

// GetName returns the Name field value.
func (o *DockerStreams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DockerStreams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *DockerStreams) SetName(v string) *DockerStreams {
	o.Name = v
	return o
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DockerStreams) GetProperties() []string {
	if o == nil || o.Properties == nil {
		var ret []string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerStreams) GetPropertiesOk() ([]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DockerStreams) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []string and assigns it to the Properties field.
func (o *DockerStreams) SetProperties(v []string) *DockerStreams {
	o.Properties = v
	return o
}

// GetSyncMode returns the SyncMode field value.
func (o *DockerStreams) GetSyncMode() DockerStreamsSyncMode {
	if o == nil {
		var ret DockerStreamsSyncMode
		return ret
	}

	return o.SyncMode
}

// GetSyncModeOk returns a tuple with the SyncMode field value
// and a boolean to check if the value has been set.
func (o *DockerStreams) GetSyncModeOk() (*DockerStreamsSyncMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncMode, true
}

// SetSyncMode sets field value.
func (o *DockerStreams) SetSyncMode(v DockerStreamsSyncMode) *DockerStreams {
	o.SyncMode = v
	return o
}

func (o DockerStreams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["syncMode"] = o.SyncMode
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal DockerStreams: %w", err)
	}

	return serialized, nil
}

func (o DockerStreams) String() string {
	out := ""
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  properties=%v\n", o.Properties)
	out += fmt.Sprintf("  syncMode=%v\n", o.SyncMode)
	return fmt.Sprintf("DockerStreams {\n%s}", out)
}
