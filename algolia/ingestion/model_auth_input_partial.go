// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// AuthInputPartial - struct for AuthInputPartial.
type AuthInputPartial struct {
	AuthAPIKeyPartial               *AuthAPIKeyPartial
	AuthAlgoliaInsightsPartial      *AuthAlgoliaInsightsPartial
	AuthAlgoliaPartial              *AuthAlgoliaPartial
	AuthBasicPartial                *AuthBasicPartial
	AuthGoogleServiceAccountPartial *AuthGoogleServiceAccountPartial
	AuthOAuthPartial                *AuthOAuthPartial
	MapmapOfStringstring            *map[string]string
}

// AuthGoogleServiceAccountPartialAsAuthInputPartial is a convenience function that returns AuthGoogleServiceAccountPartial wrapped in AuthInputPartial.
func AuthGoogleServiceAccountPartialAsAuthInputPartial(v *AuthGoogleServiceAccountPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthGoogleServiceAccountPartial: v,
	}
}

// AuthBasicPartialAsAuthInputPartial is a convenience function that returns AuthBasicPartial wrapped in AuthInputPartial.
func AuthBasicPartialAsAuthInputPartial(v *AuthBasicPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthBasicPartial: v,
	}
}

// AuthAPIKeyPartialAsAuthInputPartial is a convenience function that returns AuthAPIKeyPartial wrapped in AuthInputPartial.
func AuthAPIKeyPartialAsAuthInputPartial(v *AuthAPIKeyPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthAPIKeyPartial: v,
	}
}

// AuthOAuthPartialAsAuthInputPartial is a convenience function that returns AuthOAuthPartial wrapped in AuthInputPartial.
func AuthOAuthPartialAsAuthInputPartial(v *AuthOAuthPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthOAuthPartial: v,
	}
}

// AuthAlgoliaPartialAsAuthInputPartial is a convenience function that returns AuthAlgoliaPartial wrapped in AuthInputPartial.
func AuthAlgoliaPartialAsAuthInputPartial(v *AuthAlgoliaPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthAlgoliaPartial: v,
	}
}

// AuthAlgoliaInsightsPartialAsAuthInputPartial is a convenience function that returns AuthAlgoliaInsightsPartial wrapped in AuthInputPartial.
func AuthAlgoliaInsightsPartialAsAuthInputPartial(v *AuthAlgoliaInsightsPartial) *AuthInputPartial {
	return &AuthInputPartial{
		AuthAlgoliaInsightsPartial: v,
	}
}

// map[string]stringAsAuthInputPartial is a convenience function that returns map[string]string wrapped in AuthInputPartial.
func MapmapOfStringstringAsAuthInputPartial(v map[string]string) *AuthInputPartial {
	return &AuthInputPartial{
		MapmapOfStringstring: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *AuthInputPartial) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "clientEmail") {
		// try to unmarshal data into AuthGoogleServiceAccountPartial
		err = newStrictDecoder(data).Decode(&dst.AuthGoogleServiceAccountPartial)
		if err == nil && validateStruct(dst.AuthGoogleServiceAccountPartial) == nil {
			return nil // found the correct type
		} else {
			dst.AuthGoogleServiceAccountPartial = nil
		}
	}
	if utils.HasKey(jsonDict, "username") {
		// try to unmarshal data into AuthBasicPartial
		err = newStrictDecoder(data).Decode(&dst.AuthBasicPartial)
		if err == nil && validateStruct(dst.AuthBasicPartial) == nil {
			return nil // found the correct type
		} else {
			dst.AuthBasicPartial = nil
		}
	}
	if utils.HasKey(jsonDict, "key") {
		// try to unmarshal data into AuthAPIKeyPartial
		err = newStrictDecoder(data).Decode(&dst.AuthAPIKeyPartial)
		if err == nil && validateStruct(dst.AuthAPIKeyPartial) == nil {
			return nil // found the correct type
		} else {
			dst.AuthAPIKeyPartial = nil
		}
	}
	if utils.HasKey(jsonDict, "url") {
		// try to unmarshal data into AuthOAuthPartial
		err = newStrictDecoder(data).Decode(&dst.AuthOAuthPartial)
		if err == nil && validateStruct(dst.AuthOAuthPartial) == nil {
			return nil // found the correct type
		} else {
			dst.AuthOAuthPartial = nil
		}
	}
	// try to unmarshal data into AuthAlgoliaPartial
	err = newStrictDecoder(data).Decode(&dst.AuthAlgoliaPartial)
	if err == nil && validateStruct(dst.AuthAlgoliaPartial) == nil {
		return nil // found the correct type
	} else {
		dst.AuthAlgoliaPartial = nil
	}
	// try to unmarshal data into AuthAlgoliaInsightsPartial
	err = newStrictDecoder(data).Decode(&dst.AuthAlgoliaInsightsPartial)
	if err == nil && validateStruct(dst.AuthAlgoliaInsightsPartial) == nil {
		return nil // found the correct type
	} else {
		dst.AuthAlgoliaInsightsPartial = nil
	}
	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil && validateStruct(dst.MapmapOfStringstring) == nil {
		return nil // found the correct type
	} else {
		dst.MapmapOfStringstring = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(AuthInputPartial)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src AuthInputPartial) MarshalJSON() ([]byte, error) {
	if src.AuthAPIKeyPartial != nil {
		serialized, err := json.Marshal(&src.AuthAPIKeyPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAPIKeyPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.AuthAlgoliaInsightsPartial != nil {
		serialized, err := json.Marshal(&src.AuthAlgoliaInsightsPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAlgoliaInsightsPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.AuthAlgoliaPartial != nil {
		serialized, err := json.Marshal(&src.AuthAlgoliaPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthAlgoliaPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.AuthBasicPartial != nil {
		serialized, err := json.Marshal(&src.AuthBasicPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthBasicPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.AuthGoogleServiceAccountPartial != nil {
		serialized, err := json.Marshal(&src.AuthGoogleServiceAccountPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthGoogleServiceAccountPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.AuthOAuthPartial != nil {
		serialized, err := json.Marshal(&src.AuthOAuthPartial)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of AuthOAuthPartial of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	if src.MapmapOfStringstring != nil {
		serialized, err := json.Marshal(&src.MapmapOfStringstring)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of MapmapOfStringstring of AuthInputPartial: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj AuthInputPartial) GetActualInstance() any {
	if obj.AuthAPIKeyPartial != nil {
		return *obj.AuthAPIKeyPartial
	}

	if obj.AuthAlgoliaInsightsPartial != nil {
		return *obj.AuthAlgoliaInsightsPartial
	}

	if obj.AuthAlgoliaPartial != nil {
		return *obj.AuthAlgoliaPartial
	}

	if obj.AuthBasicPartial != nil {
		return *obj.AuthBasicPartial
	}

	if obj.AuthGoogleServiceAccountPartial != nil {
		return *obj.AuthGoogleServiceAccountPartial
	}

	if obj.AuthOAuthPartial != nil {
		return *obj.AuthOAuthPartial
	}

	if obj.MapmapOfStringstring != nil {
		return *obj.MapmapOfStringstring
	}

	// all schemas are nil
	return nil
}
