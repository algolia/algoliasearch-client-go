// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunStatus Task run status.
type RunStatus string

// List of RunStatus.
const (
	RUNSTATUS_CREATED  RunStatus = "created"
	RUNSTATUS_STARTED  RunStatus = "started"
	RUNSTATUS_IDLED    RunStatus = "idled"
	RUNSTATUS_FINISHED RunStatus = "finished"
	RUNSTATUS_SKIPPED  RunStatus = "skipped"
)

// All allowed values of RunStatus enum.
var AllowedRunStatusEnumValues = []RunStatus{
	"created",
	"started",
	"idled",
	"finished",
	"skipped",
}

func (v *RunStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RunStatus': %w", string(src), err)
	}
	enumTypeValue := RunStatus(value)
	for _, existing := range AllowedRunStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunStatus", value)
}

// NewRunStatusFromValue returns a pointer to a valid RunStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRunStatusFromValue(v string) (*RunStatus, error) {
	ev := RunStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunStatus: valid values are %v", v, AllowedRunStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RunStatus) IsValid() bool {
	for _, existing := range AllowedRunStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunStatus value.
func (v RunStatus) Ptr() *RunStatus {
	return &v
}

type NullableRunStatus struct {
	value *RunStatus
	isSet bool
}

func (v NullableRunStatus) Get() *RunStatus {
	return v.value
}

func (v *NullableRunStatus) Set(val *RunStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStatus(val *RunStatus) *NullableRunStatus {
	return &NullableRunStatus{value: val, isSet: true}
}

func (v NullableRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRunStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
