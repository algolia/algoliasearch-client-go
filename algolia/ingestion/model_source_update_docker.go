// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceUpdateDocker struct for SourceUpdateDocker.
type SourceUpdateDocker struct {
	// Configuration of the spec.
	Configuration map[string]any `json:"configuration"`
}

// NewSourceUpdateDocker instantiates a new SourceUpdateDocker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewSourceUpdateDocker(configuration map[string]any) *SourceUpdateDocker {
	this := &SourceUpdateDocker{}
	this.Configuration = configuration
	return this
}

// NewEmptySourceUpdateDocker return a pointer to an empty SourceUpdateDocker object.
func NewEmptySourceUpdateDocker() *SourceUpdateDocker {
	return &SourceUpdateDocker{}
}

// GetConfiguration returns the Configuration field value.
func (o *SourceUpdateDocker) GetConfiguration() map[string]any {
	if o == nil {
		var ret map[string]any
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *SourceUpdateDocker) GetConfigurationOk() (map[string]any, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configuration, true
}

// SetConfiguration sets field value.
func (o *SourceUpdateDocker) SetConfiguration(v map[string]any) *SourceUpdateDocker {
	o.Configuration = v
	return o
}

func (o SourceUpdateDocker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["configuration"] = o.Configuration
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal SourceUpdateDocker: %w", err)
	}

	return serialized, nil
}

func (o SourceUpdateDocker) String() string {
	out := ""
	out += fmt.Sprintf("  configuration=%v\n", o.Configuration)
	return fmt.Sprintf("SourceUpdateDocker {\n%s}", out)
}
