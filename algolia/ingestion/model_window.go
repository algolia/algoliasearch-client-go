// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// Window Time window by which to filter the observability data.
type Window struct {
	// Date in RFC 3339 format representing the oldest data in the time window.
	StartDate string `json:"startDate"`
	// Date in RFC 3339 format representing the newest data in the time window.
	EndDate string `json:"endDate"`
}

// NewWindow instantiates a new Window object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewWindow(startDate string, endDate string) *Window {
	this := &Window{}
	this.StartDate = startDate
	this.EndDate = endDate
	return this
}

// NewEmptyWindow return a pointer to an empty Window object.
func NewEmptyWindow() *Window {
	return &Window{}
}

// GetStartDate returns the StartDate field value.
func (o *Window) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *Window) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value.
func (o *Window) SetStartDate(v string) *Window {
	o.StartDate = v
	return o
}

// GetEndDate returns the EndDate field value.
func (o *Window) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *Window) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value.
func (o *Window) SetEndDate(v string) *Window {
	o.EndDate = v
	return o
}

func (o Window) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["endDate"] = o.EndDate
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Window: %w", err)
	}

	return serialized, nil
}

func (o Window) String() string {
	out := ""
	out += fmt.Sprintf("  startDate=%v\n", o.StartDate)
	out += fmt.Sprintf("  endDate=%v\n", o.EndDate)
	return fmt.Sprintf("Window {\n%s}", out)
}
