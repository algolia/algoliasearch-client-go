// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TriggerInput The trigger input of a task.
type TriggerInput struct {
	Type TriggerType `json:"type" validate:"required"`
}

// NewTriggerInput instantiates a new TriggerInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerInput(type_ TriggerType) *TriggerInput {
	this := &TriggerInput{}
	this.Type = type_
	return this
}

// NewTriggerInputWithDefaults instantiates a new TriggerInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerInputWithDefaults() *TriggerInput {
	this := &TriggerInput{}
	return this
}

// GetType returns the Type field value
func (o *TriggerInput) GetType() TriggerType {
	if o == nil {
		var ret TriggerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TriggerInput) GetTypeOk() (*TriggerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TriggerInput) SetType(v TriggerType) {
	o.Type = v
}

func (o TriggerInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

func (o TriggerInput) String() string {
	out := ""
	out += fmt.Sprintf("  type=%v\n", o.Type)
	return fmt.Sprintf("TriggerInput {\n%s}", out)
}

type NullableTriggerInput struct {
	value *TriggerInput
	isSet bool
}

func (v NullableTriggerInput) Get() *TriggerInput {
	return v.value
}

func (v *NullableTriggerInput) Set(val *TriggerInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerInput(val *TriggerInput) *NullableTriggerInput {
	return &NullableTriggerInput{value: val, isSet: true}
}

func (v NullableTriggerInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
