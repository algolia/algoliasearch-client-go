// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// TaskInput - Configuration of the task, depending on its type.
type TaskInput struct {
	DockerStreamsInput *DockerStreamsInput
	ShopifyInput       *ShopifyInput
	StreamingInput     *StreamingInput
}

// StreamingInputAsTaskInput is a convenience function that returns StreamingInput wrapped in TaskInput.
func StreamingInputAsTaskInput(v *StreamingInput) *TaskInput {
	return &TaskInput{
		StreamingInput: v,
	}
}

// DockerStreamsInputAsTaskInput is a convenience function that returns DockerStreamsInput wrapped in TaskInput.
func DockerStreamsInputAsTaskInput(v *DockerStreamsInput) *TaskInput {
	return &TaskInput{
		DockerStreamsInput: v,
	}
}

// ShopifyInputAsTaskInput is a convenience function that returns ShopifyInput wrapped in TaskInput.
func ShopifyInputAsTaskInput(v *ShopifyInput) *TaskInput {
	return &TaskInput{
		ShopifyInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *TaskInput) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup if possible, if not we will try every possibility
	var jsonDict map[string]any
	_ = newStrictDecoder(data).Decode(&jsonDict)
	if utils.HasKey(jsonDict, "mapping") {
		// try to unmarshal data into StreamingInput
		err = newStrictDecoder(data).Decode(&dst.StreamingInput)
		if err == nil && validateStruct(dst.StreamingInput) == nil {
			return nil // found the correct type
		} else {
			dst.StreamingInput = nil
		}
	}
	if utils.HasKey(jsonDict, "streams") {
		// try to unmarshal data into DockerStreamsInput
		err = newStrictDecoder(data).Decode(&dst.DockerStreamsInput)
		if err == nil && validateStruct(dst.DockerStreamsInput) == nil {
			return nil // found the correct type
		} else {
			dst.DockerStreamsInput = nil
		}
	}
	// try to unmarshal data into ShopifyInput
	err = newStrictDecoder(data).Decode(&dst.ShopifyInput)
	if err == nil && validateStruct(dst.ShopifyInput) == nil {
		return nil // found the correct type
	} else {
		dst.ShopifyInput = nil
	}

	return fmt.Errorf("Data failed to match schemas in oneOf(TaskInput)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src TaskInput) MarshalJSON() ([]byte, error) {
	if src.DockerStreamsInput != nil {
		serialized, err := json.Marshal(&src.DockerStreamsInput)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of DockerStreamsInput of TaskInput: %w", err)
		}

		return serialized, nil
	}

	if src.ShopifyInput != nil {
		serialized, err := json.Marshal(&src.ShopifyInput)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of ShopifyInput of TaskInput: %w", err)
		}

		return serialized, nil
	}

	if src.StreamingInput != nil {
		serialized, err := json.Marshal(&src.StreamingInput)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of StreamingInput of TaskInput: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj TaskInput) GetActualInstance() any {
	if obj.DockerStreamsInput != nil {
		return *obj.DockerStreamsInput
	}

	if obj.ShopifyInput != nil {
		return *obj.ShopifyInput
	}

	if obj.StreamingInput != nil {
		return *obj.StreamingInput
	}

	// all schemas are nil
	return nil
}
