// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// MappingKitAction Describes how a destination object should be resolved by means of applying a set of directives.
type MappingKitAction struct {
	// ID to uniquely identify this action.
	Id *string `json:"id,omitempty"`
	// Whether this action has any effect.
	Enabled bool `json:"enabled"`
	// Condition which must be satisfied to apply the action. If this evaluates to false, the action is not applied, and the process attempts to apply the next action, if any.
	Trigger         string                  `json:"trigger"`
	FieldDirectives []MappingFieldDirective `json:"fieldDirectives"`
}

type MappingKitActionOption func(f *MappingKitAction)

func WithMappingKitActionId(val string) MappingKitActionOption {
	return func(f *MappingKitAction) {
		f.Id = &val
	}
}

// NewMappingKitAction instantiates a new MappingKitAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewMappingKitAction(enabled bool, trigger string, fieldDirectives []MappingFieldDirective, opts ...MappingKitActionOption) *MappingKitAction {
	this := &MappingKitAction{}
	this.Enabled = enabled
	this.Trigger = trigger
	this.FieldDirectives = fieldDirectives
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyMappingKitAction return a pointer to an empty MappingKitAction object.
func NewEmptyMappingKitAction() *MappingKitAction {
	return &MappingKitAction{}
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MappingKitAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingKitAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MappingKitAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MappingKitAction) SetId(v string) *MappingKitAction {
	o.Id = &v
	return o
}

// GetEnabled returns the Enabled field value.
func (o *MappingKitAction) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MappingKitAction) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value.
func (o *MappingKitAction) SetEnabled(v bool) *MappingKitAction {
	o.Enabled = v
	return o
}

// GetTrigger returns the Trigger field value.
func (o *MappingKitAction) GetTrigger() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *MappingKitAction) GetTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value.
func (o *MappingKitAction) SetTrigger(v string) *MappingKitAction {
	o.Trigger = v
	return o
}

// GetFieldDirectives returns the FieldDirectives field value.
func (o *MappingKitAction) GetFieldDirectives() []MappingFieldDirective {
	if o == nil {
		var ret []MappingFieldDirective
		return ret
	}

	return o.FieldDirectives
}

// GetFieldDirectivesOk returns a tuple with the FieldDirectives field value
// and a boolean to check if the value has been set.
func (o *MappingKitAction) GetFieldDirectivesOk() ([]MappingFieldDirective, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldDirectives, true
}

// SetFieldDirectives sets field value.
func (o *MappingKitAction) SetFieldDirectives(v []MappingFieldDirective) *MappingKitAction {
	o.FieldDirectives = v
	return o
}

func (o MappingKitAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["trigger"] = o.Trigger
	}
	if true {
		toSerialize["fieldDirectives"] = o.FieldDirectives
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal MappingKitAction: %w", err)
	}

	return serialized, nil
}

func (o MappingKitAction) String() string {
	out := ""
	out += fmt.Sprintf("  id=%v\n", o.Id)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	out += fmt.Sprintf("  trigger=%v\n", o.Trigger)
	out += fmt.Sprintf("  fieldDirectives=%v\n", o.FieldDirectives)
	return fmt.Sprintf("MappingKitAction {\n%s}", out)
}

type NullableMappingKitAction struct {
	value *MappingKitAction
	isSet bool
}

func (v NullableMappingKitAction) Get() *MappingKitAction {
	return v.value
}

func (v *NullableMappingKitAction) Set(val *MappingKitAction) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingKitAction) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingKitAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingKitAction(val *MappingKitAction) *NullableMappingKitAction {
	return &NullableMappingKitAction{value: val, isSet: true}
}

func (v NullableMappingKitAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableMappingKitAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
