// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SortKeys Property by which to sort the list.
type SortKeys string

// List of sortKeys.
const (
	SORT_KEYS_NAME       SortKeys = "name"
	SORT_KEYS_TYPE       SortKeys = "type"
	SORT_KEYS_UPDATED_AT SortKeys = "updatedAt"
	SORT_KEYS_CREATED_AT SortKeys = "createdAt"
)

// All allowed values of SortKeys enum.
var AllowedSortKeysEnumValues = []SortKeys{
	"name",
	"type",
	"updatedAt",
	"createdAt",
}

func (v *SortKeys) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'SortKeys': %w", string(src), err)
	}
	enumTypeValue := SortKeys(value)
	for _, existing := range AllowedSortKeysEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortKeys", value)
}

// NewSortKeysFromValue returns a pointer to a valid SortKeys
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewSortKeysFromValue(v string) (*SortKeys, error) {
	ev := SortKeys(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortKeys: valid values are %v", v, AllowedSortKeysEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v SortKeys) IsValid() bool {
	for _, existing := range AllowedSortKeysEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sortKeys value.
func (v SortKeys) Ptr() *SortKeys {
	return &v
}
