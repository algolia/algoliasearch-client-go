// File generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunType Task run type.
type RunType string

// List of RunType.
const (
	RUNTYPE_REINDEX  RunType = "reindex"
	RUNTYPE_UPDATE   RunType = "update"
	RUNTYPE_DISCOVER RunType = "discover"
)

// All allowed values of RunType enum.
var AllowedRunTypeEnumValues = []RunType{
	"reindex",
	"update",
	"discover",
}

func (v *RunType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RunType': %w", string(src), err)
	}
	enumTypeValue := RunType(value)
	for _, existing := range AllowedRunTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunType", value)
}

// NewRunTypeFromValue returns a pointer to a valid RunType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRunTypeFromValue(v string) (*RunType, error) {
	ev := RunType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunType: valid values are %v", v, AllowedRunTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RunType) IsValid() bool {
	for _, existing := range AllowedRunTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunType value.
func (v RunType) Ptr() *RunType {
	return &v
}

type NullableRunType struct {
	value *RunType
	isSet bool
}

func (v NullableRunType) Get() *RunType {
	return v.value
}

func (v *NullableRunType) Set(val *RunType) {
	v.value = val
	v.isSet = true
}

func (v NullableRunType) IsSet() bool {
	return v.isSet
}

func (v *NullableRunType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunType(val *RunType) *NullableRunType {
	return &NullableRunType{value: val, isSet: true}
}

func (v NullableRunType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableRunType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
