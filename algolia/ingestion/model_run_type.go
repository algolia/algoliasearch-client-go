// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunType Task run type.
type RunType string

// List of RunType.
const (
	RUN_TYPE_REINDEX  RunType = "reindex"
	RUN_TYPE_UPDATE   RunType = "update"
	RUN_TYPE_DISCOVER RunType = "discover"
	RUN_TYPE_VALIDATE RunType = "validate"
	RUN_TYPE_PUSH     RunType = "push"
)

// All allowed values of RunType enum.
var AllowedRunTypeEnumValues = []RunType{
	"reindex",
	"update",
	"discover",
	"validate",
	"push",
}

func (v *RunType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'RunType': %w", string(src), err)
	}
	enumTypeValue := RunType(value)
	for _, existing := range AllowedRunTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunType", value)
}

// NewRunTypeFromValue returns a pointer to a valid RunType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewRunTypeFromValue(v string) (*RunType, error) {
	ev := RunType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunType: valid values are %v", v, AllowedRunTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v RunType) IsValid() bool {
	for _, existing := range AllowedRunTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunType value.
func (v RunType) Ptr() *RunType {
	return &v
}
