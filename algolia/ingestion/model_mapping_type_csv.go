// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// MappingTypeCSV the model 'MappingTypeCSV'.
type MappingTypeCSV string

// List of MappingTypeCSV.
const (
	MAPPINGTYPECSV_STRING  MappingTypeCSV = "string"
	MAPPINGTYPECSV_INTEGER MappingTypeCSV = "integer"
	MAPPINGTYPECSV_FLOAT   MappingTypeCSV = "float"
	MAPPINGTYPECSV_BOOLEAN MappingTypeCSV = "boolean"
	MAPPINGTYPECSV_JSON    MappingTypeCSV = "json"
)

// All allowed values of MappingTypeCSV enum.
var AllowedMappingTypeCSVEnumValues = []MappingTypeCSV{
	"string",
	"integer",
	"float",
	"boolean",
	"json",
}

func (v *MappingTypeCSV) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'MappingTypeCSV': %w", string(src), err)
	}
	enumTypeValue := MappingTypeCSV(value)
	for _, existing := range AllowedMappingTypeCSVEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MappingTypeCSV", value)
}

// NewMappingTypeCSVFromValue returns a pointer to a valid MappingTypeCSV
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewMappingTypeCSVFromValue(v string) (*MappingTypeCSV, error) {
	ev := MappingTypeCSV(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MappingTypeCSV: valid values are %v", v, AllowedMappingTypeCSVEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v MappingTypeCSV) IsValid() bool {
	for _, existing := range AllowedMappingTypeCSVEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MappingTypeCSV value.
func (v MappingTypeCSV) Ptr() *MappingTypeCSV {
	return &v
}

type NullableMappingTypeCSV struct {
	value *MappingTypeCSV
	isSet bool
}

func (v NullableMappingTypeCSV) Get() *MappingTypeCSV {
	return v.value
}

func (v *NullableMappingTypeCSV) Set(val *MappingTypeCSV) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingTypeCSV) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingTypeCSV) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingTypeCSV(val *MappingTypeCSV) *NullableMappingTypeCSV {
	return &NullableMappingTypeCSV{value: val, isSet: true}
}

func (v NullableMappingTypeCSV) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value) //nolint:wrapcheck
}

func (v *NullableMappingTypeCSV) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value) //nolint:wrapcheck
}
