// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// Event An event describe a step of the task execution flow..
type Event struct {
	// The event UUID.
	EventID string `json:"eventID" validate:"required"`
	// The run UUID.
	RunID string `json:"runID" validate:"required"`
	// The parent event, the cause of this event.
	ParentID *string     `json:"parentID,omitempty"`
	Status   EventStatus `json:"status" validate:"required"`
	Type     EventType   `json:"type" validate:"required"`
	// The extracted record batch size.
	BatchSize int32                  `json:"batchSize" validate:"required"`
	Data      map[string]interface{} `json:"data,omitempty"`
	// Date of publish (RFC3339 format).
	PublishedAt string `json:"publishedAt" validate:"required"`
}

type EventOption func(f *Event)

func WithEventParentID(val string) EventOption {
	return func(f *Event) {
		f.ParentID = &val
	}
}

func WithEventData(val map[string]interface{}) EventOption {
	return func(f *Event) {
		f.Data = val
	}
}

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(eventID string, runID string, status EventStatus, type_ EventType, batchSize int32, publishedAt string, opts ...EventOption) *Event {
	this := &Event{}
	this.EventID = eventID
	this.RunID = runID
	this.Status = status
	this.Type = type_
	this.BatchSize = batchSize
	this.PublishedAt = publishedAt
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := &Event{}
	return this
}

// GetEventID returns the EventID field value
func (o *Event) GetEventID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventID, true
}

// SetEventID sets field value
func (o *Event) SetEventID(v string) {
	o.EventID = v
}

// GetRunID returns the RunID field value
func (o *Event) GetRunID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *Event) GetRunIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *Event) SetRunID(v string) {
	o.RunID = v
}

// GetParentID returns the ParentID field value if set, zero value otherwise.
func (o *Event) GetParentID() string {
	if o == nil || o.ParentID == nil {
		var ret string
		return ret
	}
	return *o.ParentID
}

// GetParentIDOk returns a tuple with the ParentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetParentIDOk() (*string, bool) {
	if o == nil || o.ParentID == nil {
		return nil, false
	}
	return o.ParentID, true
}

// HasParentID returns a boolean if a field has been set.
func (o *Event) HasParentID() bool {
	if o != nil && o.ParentID != nil {
		return true
	}

	return false
}

// SetParentID gets a reference to the given string and assigns it to the ParentID field.
func (o *Event) SetParentID(v string) {
	o.ParentID = &v
}

// GetStatus returns the Status field value
func (o *Event) GetStatus() EventStatus {
	if o == nil {
		var ret EventStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Event) GetStatusOk() (*EventStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Event) SetStatus(v EventStatus) {
	o.Status = v
}

// GetType returns the Type field value
func (o *Event) GetType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Event) GetTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Event) SetType(v EventType) {
	o.Type = v
}

// GetBatchSize returns the BatchSize field value
func (o *Event) GetBatchSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value
// and a boolean to check if the value has been set.
func (o *Event) GetBatchSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatchSize, true
}

// SetBatchSize sets field value
func (o *Event) SetBatchSize(v int32) {
	o.BatchSize = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Event) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Event) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Event) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetPublishedAt returns the PublishedAt field value
func (o *Event) GetPublishedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
func (o *Event) GetPublishedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedAt, true
}

// SetPublishedAt sets field value
func (o *Event) SetPublishedAt(v string) {
	o.PublishedAt = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["eventID"] = o.EventID
	}
	if true {
		toSerialize["runID"] = o.RunID
	}
	if o.ParentID != nil {
		toSerialize["parentID"] = o.ParentID
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["batchSize"] = o.BatchSize
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	return json.Marshal(toSerialize)
}

func (o Event) String() string {
	out := ""
	out += fmt.Sprintf("  eventID=%v\n", o.EventID)
	out += fmt.Sprintf("  runID=%v\n", o.RunID)
	out += fmt.Sprintf("  parentID=%v\n", o.ParentID)
	out += fmt.Sprintf("  status=%v\n", o.Status)
	out += fmt.Sprintf("  type=%v\n", o.Type)
	out += fmt.Sprintf("  batchSize=%v\n", o.BatchSize)
	out += fmt.Sprintf("  data=%v\n", o.Data)
	out += fmt.Sprintf("  publishedAt=%v\n", o.PublishedAt)
	return fmt.Sprintf("Event {\n%s}", out)
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
