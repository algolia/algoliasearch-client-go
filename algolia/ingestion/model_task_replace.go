// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TaskReplace API request body for updating a task.
type TaskReplace struct {
	// Universally unique identifier (UUID) of a destination resource.
	DestinationID      string      `json:"destinationID"`
	Action             ActionType  `json:"action"`
	SubscriptionAction *ActionType `json:"subscriptionAction,omitempty"`
	// Cron expression for the task's schedule.
	Cron *string `json:"cron,omitempty"`
	// Whether the task is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Maximum accepted percentage of failures for a task run to finish successfully.
	FailureThreshold *int32     `json:"failureThreshold,omitempty"`
	Input            *TaskInput `json:"input,omitempty"`
	// Date of the last cursor in RFC 3339 format.
	Cursor        *string        `json:"cursor,omitempty"`
	Notifications *Notifications `json:"notifications,omitempty"`
	Policies      *Policies      `json:"policies,omitempty"`
}

type TaskReplaceOption func(f *TaskReplace)

func WithTaskReplaceSubscriptionAction(val ActionType) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.SubscriptionAction = &val
	}
}

func WithTaskReplaceCron(val string) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Cron = &val
	}
}

func WithTaskReplaceEnabled(val bool) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Enabled = &val
	}
}

func WithTaskReplaceFailureThreshold(val int32) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.FailureThreshold = &val
	}
}

func WithTaskReplaceInput(val TaskInput) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Input = &val
	}
}

func WithTaskReplaceCursor(val string) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Cursor = &val
	}
}

func WithTaskReplaceNotifications(val Notifications) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Notifications = &val
	}
}

func WithTaskReplacePolicies(val Policies) TaskReplaceOption {
	return func(f *TaskReplace) {
		f.Policies = &val
	}
}

// NewTaskReplace instantiates a new TaskReplace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTaskReplace(destinationID string, action ActionType, opts ...TaskReplaceOption) *TaskReplace {
	this := &TaskReplace{}
	this.DestinationID = destinationID

	this.Action = action
	for _, opt := range opts {
		opt(this)
	}

	return this
}

// NewEmptyTaskReplace return a pointer to an empty TaskReplace object.
func NewEmptyTaskReplace() *TaskReplace {
	return &TaskReplace{}
}

// GetDestinationID returns the DestinationID field value.
func (o *TaskReplace) GetDestinationID() string {
	if o == nil {
		var ret string

		return ret
	}

	return o.DestinationID
}

// GetDestinationIDOk returns a tuple with the DestinationID field value
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetDestinationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return &o.DestinationID, true
}

// SetDestinationID sets field value.
func (o *TaskReplace) SetDestinationID(v string) *TaskReplace {
	o.DestinationID = v

	return o
}

// GetAction returns the Action field value.
func (o *TaskReplace) GetAction() ActionType {
	if o == nil {
		var ret ActionType

		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetActionOk() (*ActionType, bool) {
	if o == nil {
		return nil, false
	}

	return &o.Action, true
}

// SetAction sets field value.
func (o *TaskReplace) SetAction(v ActionType) *TaskReplace {
	o.Action = v

	return o
}

// GetSubscriptionAction returns the SubscriptionAction field value if set, zero value otherwise.
func (o *TaskReplace) GetSubscriptionAction() ActionType {
	if o == nil || o.SubscriptionAction == nil {
		var ret ActionType

		return ret
	}

	return *o.SubscriptionAction
}

// GetSubscriptionActionOk returns a tuple with the SubscriptionAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetSubscriptionActionOk() (*ActionType, bool) {
	if o == nil || o.SubscriptionAction == nil {
		return nil, false
	}

	return o.SubscriptionAction, true
}

// HasSubscriptionAction returns a boolean if a field has been set.
func (o *TaskReplace) HasSubscriptionAction() bool {
	if o != nil && o.SubscriptionAction != nil {
		return true
	}

	return false
}

// SetSubscriptionAction gets a reference to the given ActionType and assigns it to the SubscriptionAction field.
func (o *TaskReplace) SetSubscriptionAction(v ActionType) *TaskReplace {
	o.SubscriptionAction = &v

	return o
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *TaskReplace) GetCron() string {
	if o == nil || o.Cron == nil {
		var ret string

		return ret
	}

	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetCronOk() (*string, bool) {
	if o == nil || o.Cron == nil {
		return nil, false
	}

	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *TaskReplace) HasCron() bool {
	if o != nil && o.Cron != nil {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *TaskReplace) SetCron(v string) *TaskReplace {
	o.Cron = &v

	return o
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TaskReplace) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool

		return ret
	}

	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}

	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TaskReplace) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TaskReplace) SetEnabled(v bool) *TaskReplace {
	o.Enabled = &v

	return o
}

// GetFailureThreshold returns the FailureThreshold field value if set, zero value otherwise.
func (o *TaskReplace) GetFailureThreshold() int32 {
	if o == nil || o.FailureThreshold == nil {
		var ret int32

		return ret
	}

	return *o.FailureThreshold
}

// GetFailureThresholdOk returns a tuple with the FailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetFailureThresholdOk() (*int32, bool) {
	if o == nil || o.FailureThreshold == nil {
		return nil, false
	}

	return o.FailureThreshold, true
}

// HasFailureThreshold returns a boolean if a field has been set.
func (o *TaskReplace) HasFailureThreshold() bool {
	if o != nil && o.FailureThreshold != nil {
		return true
	}

	return false
}

// SetFailureThreshold gets a reference to the given int32 and assigns it to the FailureThreshold field.
func (o *TaskReplace) SetFailureThreshold(v int32) *TaskReplace {
	o.FailureThreshold = &v

	return o
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TaskReplace) GetInput() TaskInput {
	if o == nil || o.Input == nil {
		var ret TaskInput

		return ret
	}

	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetInputOk() (*TaskInput, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}

	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TaskReplace) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given TaskInput and assigns it to the Input field.
func (o *TaskReplace) SetInput(v *TaskInput) *TaskReplace {
	o.Input = v

	return o
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *TaskReplace) GetCursor() string {
	if o == nil || o.Cursor == nil {
		var ret string

		return ret
	}

	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetCursorOk() (*string, bool) {
	if o == nil || o.Cursor == nil {
		return nil, false
	}

	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *TaskReplace) HasCursor() bool {
	if o != nil && o.Cursor != nil {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *TaskReplace) SetCursor(v string) *TaskReplace {
	o.Cursor = &v

	return o
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *TaskReplace) GetNotifications() Notifications {
	if o == nil || o.Notifications == nil {
		var ret Notifications

		return ret
	}

	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetNotificationsOk() (*Notifications, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}

	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *TaskReplace) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given Notifications and assigns it to the Notifications field.
func (o *TaskReplace) SetNotifications(v *Notifications) *TaskReplace {
	o.Notifications = v

	return o
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *TaskReplace) GetPolicies() Policies {
	if o == nil || o.Policies == nil {
		var ret Policies

		return ret
	}

	return *o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskReplace) GetPoliciesOk() (*Policies, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}

	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *TaskReplace) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given Policies and assigns it to the Policies field.
func (o *TaskReplace) SetPolicies(v *Policies) *TaskReplace {
	o.Policies = v

	return o
}

func (o TaskReplace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["destinationID"] = o.DestinationID

	toSerialize["action"] = o.Action
	if o.SubscriptionAction != nil {
		toSerialize["subscriptionAction"] = o.SubscriptionAction
	}

	if o.Cron != nil {
		toSerialize["cron"] = o.Cron
	}

	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}

	if o.FailureThreshold != nil {
		toSerialize["failureThreshold"] = o.FailureThreshold
	}

	if o.Input != nil {
		toSerialize["input"] = o.Input
	}

	if o.Cursor != nil {
		toSerialize["cursor"] = o.Cursor
	}

	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}

	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}

	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TaskReplace: %w", err)
	}

	return serialized, nil
}

func (o TaskReplace) String() string {
	out := ""
	out += fmt.Sprintf("  destinationID=%v\n", o.DestinationID)
	out += fmt.Sprintf("  action=%v\n", o.Action)
	out += fmt.Sprintf("  subscriptionAction=%v\n", o.SubscriptionAction)
	out += fmt.Sprintf("  cron=%v\n", o.Cron)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	out += fmt.Sprintf("  failureThreshold=%v\n", o.FailureThreshold)
	out += fmt.Sprintf("  input=%v\n", o.Input)
	out += fmt.Sprintf("  cursor=%v\n", o.Cursor)
	out += fmt.Sprintf("  notifications=%v\n", o.Notifications)
	out += fmt.Sprintf("  policies=%v\n", o.Policies)

	return fmt.Sprintf("TaskReplace {\n%s}", out)
}
