// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// Transformation struct for Transformation.
type Transformation struct {
	// Universally unique identifier (UUID) of a transformation.
	TransformationID string `json:"transformationID"`
	// The source code of the transformation.
	Code string `json:"code"`
	// The uniquely identified name of your transformation.
	Name string `json:"name"`
	// A descriptive name for your transformation of what it does.
	Description string `json:"description"`
	// Date of creation in RFC 3339 format.
	CreatedAt string `json:"createdAt"`
	// Date of last update in RFC 3339 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type TransformationOption func(f *Transformation)

func WithTransformationUpdatedAt(val string) TransformationOption {
	return func(f *Transformation) {
		f.UpdatedAt = &val
	}
}

// NewTransformation instantiates a new Transformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformation(transformationID string, code string, name string, description string, createdAt string, opts ...TransformationOption) *Transformation {
	this := &Transformation{}
	this.TransformationID = transformationID
	this.Code = code
	this.Name = name
	this.Description = description
	this.CreatedAt = createdAt
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyTransformation return a pointer to an empty Transformation object.
func NewEmptyTransformation() *Transformation {
	return &Transformation{}
}

// GetTransformationID returns the TransformationID field value.
func (o *Transformation) GetTransformationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransformationID
}

// GetTransformationIDOk returns a tuple with the TransformationID field value
// and a boolean to check if the value has been set.
func (o *Transformation) GetTransformationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransformationID, true
}

// SetTransformationID sets field value.
func (o *Transformation) SetTransformationID(v string) *Transformation {
	o.TransformationID = v
	return o
}

// GetCode returns the Code field value.
func (o *Transformation) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Transformation) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value.
func (o *Transformation) SetCode(v string) *Transformation {
	o.Code = v
	return o
}

// GetName returns the Name field value.
func (o *Transformation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Transformation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value.
func (o *Transformation) SetName(v string) *Transformation {
	o.Name = v
	return o
}

// GetDescription returns the Description field value.
func (o *Transformation) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Transformation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value.
func (o *Transformation) SetDescription(v string) *Transformation {
	o.Description = v
	return o
}

// GetCreatedAt returns the CreatedAt field value.
func (o *Transformation) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transformation) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value.
func (o *Transformation) SetCreatedAt(v string) *Transformation {
	o.CreatedAt = v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Transformation) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transformation) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Transformation) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Transformation) SetUpdatedAt(v string) *Transformation {
	o.UpdatedAt = &v
	return o
}

func (o Transformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["transformationID"] = o.TransformationID
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal Transformation: %w", err)
	}

	return serialized, nil
}

func (o Transformation) String() string {
	out := ""
	out += fmt.Sprintf("  transformationID=%v\n", o.TransformationID)
	out += fmt.Sprintf("  code=%v\n", o.Code)
	out += fmt.Sprintf("  name=%v\n", o.Name)
	out += fmt.Sprintf("  description=%v\n", o.Description)
	out += fmt.Sprintf("  createdAt=%v\n", o.CreatedAt)
	out += fmt.Sprintf("  updatedAt=%v\n", o.UpdatedAt)
	return fmt.Sprintf("Transformation {\n%s}", out)
}
