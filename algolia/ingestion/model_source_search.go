// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceSearch struct for SourceSearch
type SourceSearch struct {
	SourceIDs []string `json:"sourceIDs"`
}

// NewSourceSearch instantiates a new SourceSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceSearch(sourceIDs []string) *SourceSearch {
	this := &SourceSearch{}
	this.SourceIDs = sourceIDs
	return this
}

// NewSourceSearchWithDefaults instantiates a new SourceSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceSearchWithDefaults() *SourceSearch {
	this := &SourceSearch{}
	return this
}

// GetSourceIDs returns the SourceIDs field value
func (o *SourceSearch) GetSourceIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SourceIDs
}

// GetSourceIDsOk returns a tuple with the SourceIDs field value
// and a boolean to check if the value has been set.
func (o *SourceSearch) GetSourceIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceIDs, true
}

// SetSourceIDs sets field value
func (o *SourceSearch) SetSourceIDs(v []string) {
	o.SourceIDs = v
}

func (o SourceSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["sourceIDs"] = o.SourceIDs
	}
	return json.Marshal(toSerialize)
}

func (o SourceSearch) String() string {
	out := ""
	out += fmt.Sprintf("  sourceIDs=%v\n", o.SourceIDs)
	return fmt.Sprintf("SourceSearch {\n%s}", out)
}

type NullableSourceSearch struct {
	value *SourceSearch
	isSet bool
}

func (v NullableSourceSearch) Get() *SourceSearch {
	return v.value
}

func (v *NullableSourceSearch) Set(val *SourceSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceSearch(val *SourceSearch) *NullableSourceSearch {
	return &NullableSourceSearch{value: val, isSet: true}
}

func (v NullableSourceSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
