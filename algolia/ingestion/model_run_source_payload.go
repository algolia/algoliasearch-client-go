// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// RunSourcePayload struct for RunSourcePayload.
type RunSourcePayload struct {
	// List of index names to include in reidexing/update.
	IndexToInclude []string `json:"indexToInclude,omitempty"`
	// List of index names to exclude in reidexing/update.
	IndexToExclude []string `json:"indexToExclude,omitempty"`
	// List of entityID to update.
	EntityIDs  []string    `json:"entityIDs,omitempty"`
	EntityType *EntityType `json:"entityType,omitempty"`
}

type RunSourcePayloadOption func(f *RunSourcePayload)

func WithRunSourcePayloadIndexToInclude(val []string) RunSourcePayloadOption {
	return func(f *RunSourcePayload) {
		f.IndexToInclude = val
	}
}

func WithRunSourcePayloadIndexToExclude(val []string) RunSourcePayloadOption {
	return func(f *RunSourcePayload) {
		f.IndexToExclude = val
	}
}

func WithRunSourcePayloadEntityIDs(val []string) RunSourcePayloadOption {
	return func(f *RunSourcePayload) {
		f.EntityIDs = val
	}
}

func WithRunSourcePayloadEntityType(val EntityType) RunSourcePayloadOption {
	return func(f *RunSourcePayload) {
		f.EntityType = &val
	}
}

// NewRunSourcePayload instantiates a new RunSourcePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewRunSourcePayload(opts ...RunSourcePayloadOption) *RunSourcePayload {
	this := &RunSourcePayload{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyRunSourcePayload return a pointer to an empty RunSourcePayload object.
func NewEmptyRunSourcePayload() *RunSourcePayload {
	return &RunSourcePayload{}
}

// GetIndexToInclude returns the IndexToInclude field value if set, zero value otherwise.
func (o *RunSourcePayload) GetIndexToInclude() []string {
	if o == nil || o.IndexToInclude == nil {
		var ret []string
		return ret
	}
	return o.IndexToInclude
}

// GetIndexToIncludeOk returns a tuple with the IndexToInclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSourcePayload) GetIndexToIncludeOk() ([]string, bool) {
	if o == nil || o.IndexToInclude == nil {
		return nil, false
	}
	return o.IndexToInclude, true
}

// HasIndexToInclude returns a boolean if a field has been set.
func (o *RunSourcePayload) HasIndexToInclude() bool {
	if o != nil && o.IndexToInclude != nil {
		return true
	}

	return false
}

// SetIndexToInclude gets a reference to the given []string and assigns it to the IndexToInclude field.
func (o *RunSourcePayload) SetIndexToInclude(v []string) *RunSourcePayload {
	o.IndexToInclude = v
	return o
}

// GetIndexToExclude returns the IndexToExclude field value if set, zero value otherwise.
func (o *RunSourcePayload) GetIndexToExclude() []string {
	if o == nil || o.IndexToExclude == nil {
		var ret []string
		return ret
	}
	return o.IndexToExclude
}

// GetIndexToExcludeOk returns a tuple with the IndexToExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSourcePayload) GetIndexToExcludeOk() ([]string, bool) {
	if o == nil || o.IndexToExclude == nil {
		return nil, false
	}
	return o.IndexToExclude, true
}

// HasIndexToExclude returns a boolean if a field has been set.
func (o *RunSourcePayload) HasIndexToExclude() bool {
	if o != nil && o.IndexToExclude != nil {
		return true
	}

	return false
}

// SetIndexToExclude gets a reference to the given []string and assigns it to the IndexToExclude field.
func (o *RunSourcePayload) SetIndexToExclude(v []string) *RunSourcePayload {
	o.IndexToExclude = v
	return o
}

// GetEntityIDs returns the EntityIDs field value if set, zero value otherwise.
func (o *RunSourcePayload) GetEntityIDs() []string {
	if o == nil || o.EntityIDs == nil {
		var ret []string
		return ret
	}
	return o.EntityIDs
}

// GetEntityIDsOk returns a tuple with the EntityIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSourcePayload) GetEntityIDsOk() ([]string, bool) {
	if o == nil || o.EntityIDs == nil {
		return nil, false
	}
	return o.EntityIDs, true
}

// HasEntityIDs returns a boolean if a field has been set.
func (o *RunSourcePayload) HasEntityIDs() bool {
	if o != nil && o.EntityIDs != nil {
		return true
	}

	return false
}

// SetEntityIDs gets a reference to the given []string and assigns it to the EntityIDs field.
func (o *RunSourcePayload) SetEntityIDs(v []string) *RunSourcePayload {
	o.EntityIDs = v
	return o
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *RunSourcePayload) GetEntityType() EntityType {
	if o == nil || o.EntityType == nil {
		var ret EntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunSourcePayload) GetEntityTypeOk() (*EntityType, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *RunSourcePayload) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityType and assigns it to the EntityType field.
func (o *RunSourcePayload) SetEntityType(v EntityType) *RunSourcePayload {
	o.EntityType = &v
	return o
}

func (o RunSourcePayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.IndexToInclude != nil {
		toSerialize["indexToInclude"] = o.IndexToInclude
	}
	if o.IndexToExclude != nil {
		toSerialize["indexToExclude"] = o.IndexToExclude
	}
	if o.EntityIDs != nil {
		toSerialize["entityIDs"] = o.EntityIDs
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal RunSourcePayload: %w", err)
	}

	return serialized, nil
}

func (o RunSourcePayload) String() string {
	out := ""
	out += fmt.Sprintf("  indexToInclude=%v\n", o.IndexToInclude)
	out += fmt.Sprintf("  indexToExclude=%v\n", o.IndexToExclude)
	out += fmt.Sprintf("  entityIDs=%v\n", o.EntityIDs)
	out += fmt.Sprintf("  entityType=%v\n", o.EntityType)
	return fmt.Sprintf("RunSourcePayload {\n%s}", out)
}
