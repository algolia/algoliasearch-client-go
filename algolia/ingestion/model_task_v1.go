// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TaskV1 The V1 task object, please use methods and types that don't contain the V1 suffix.
type TaskV1 struct {
	// Universally unique identifier (UUID) of a task.
	TaskID string `json:"taskID"`
	// Universally uniqud identifier (UUID) of a source.
	SourceID string `json:"sourceID"`
	// Universally unique identifier (UUID) of a destination resource.
	DestinationID string     `json:"destinationID"`
	Trigger       Trigger    `json:"trigger"`
	Input         *TaskInput `json:"input,omitempty"`
	// Whether the task is enabled.
	Enabled bool `json:"enabled"`
	// Maximum accepted percentage of failures for a task run to finish successfully.
	FailureThreshold *int32     `json:"failureThreshold,omitempty"`
	Action           ActionType `json:"action"`
	// Date of the last cursor in RFC 3339 format.
	Cursor *string `json:"cursor,omitempty"`
	// Date of creation in RFC 3339 format.
	CreatedAt string `json:"createdAt"`
	// Date of last update in RFC 3339 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type TaskV1Option func(f *TaskV1)

func WithTaskV1Input(val TaskInput) TaskV1Option {
	return func(f *TaskV1) {
		f.Input = &val
	}
}

func WithTaskV1FailureThreshold(val int32) TaskV1Option {
	return func(f *TaskV1) {
		f.FailureThreshold = &val
	}
}

func WithTaskV1Cursor(val string) TaskV1Option {
	return func(f *TaskV1) {
		f.Cursor = &val
	}
}

func WithTaskV1UpdatedAt(val string) TaskV1Option {
	return func(f *TaskV1) {
		f.UpdatedAt = &val
	}
}

// NewTaskV1 instantiates a new TaskV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTaskV1(taskID string, sourceID string, destinationID string, trigger Trigger, enabled bool, action ActionType, createdAt string, opts ...TaskV1Option) *TaskV1 {
	this := &TaskV1{}
	this.TaskID = taskID
	this.SourceID = sourceID
	this.DestinationID = destinationID
	this.Trigger = trigger
	this.Enabled = enabled
	this.Action = action
	this.CreatedAt = createdAt
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyTaskV1 return a pointer to an empty TaskV1 object.
func NewEmptyTaskV1() *TaskV1 {
	return &TaskV1{}
}

// GetTaskID returns the TaskID field value.
func (o *TaskV1) GetTaskID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskID
}

// GetTaskIDOk returns a tuple with the TaskID field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetTaskIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskID, true
}

// SetTaskID sets field value.
func (o *TaskV1) SetTaskID(v string) *TaskV1 {
	o.TaskID = v
	return o
}

// GetSourceID returns the SourceID field value.
func (o *TaskV1) GetSourceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceID
}

// GetSourceIDOk returns a tuple with the SourceID field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetSourceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceID, true
}

// SetSourceID sets field value.
func (o *TaskV1) SetSourceID(v string) *TaskV1 {
	o.SourceID = v
	return o
}

// GetDestinationID returns the DestinationID field value.
func (o *TaskV1) GetDestinationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationID
}

// GetDestinationIDOk returns a tuple with the DestinationID field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetDestinationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationID, true
}

// SetDestinationID sets field value.
func (o *TaskV1) SetDestinationID(v string) *TaskV1 {
	o.DestinationID = v
	return o
}

// GetTrigger returns the Trigger field value.
func (o *TaskV1) GetTrigger() Trigger {
	if o == nil {
		var ret Trigger
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetTriggerOk() (*Trigger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value.
func (o *TaskV1) SetTrigger(v *Trigger) *TaskV1 {
	o.Trigger = *v
	return o
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TaskV1) GetInput() TaskInput {
	if o == nil || o.Input == nil {
		var ret TaskInput
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskV1) GetInputOk() (*TaskInput, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TaskV1) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given TaskInput and assigns it to the Input field.
func (o *TaskV1) SetInput(v *TaskInput) *TaskV1 {
	o.Input = v
	return o
}

// GetEnabled returns the Enabled field value.
func (o *TaskV1) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value.
func (o *TaskV1) SetEnabled(v bool) *TaskV1 {
	o.Enabled = v
	return o
}

// GetFailureThreshold returns the FailureThreshold field value if set, zero value otherwise.
func (o *TaskV1) GetFailureThreshold() int32 {
	if o == nil || o.FailureThreshold == nil {
		var ret int32
		return ret
	}
	return *o.FailureThreshold
}

// GetFailureThresholdOk returns a tuple with the FailureThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskV1) GetFailureThresholdOk() (*int32, bool) {
	if o == nil || o.FailureThreshold == nil {
		return nil, false
	}
	return o.FailureThreshold, true
}

// HasFailureThreshold returns a boolean if a field has been set.
func (o *TaskV1) HasFailureThreshold() bool {
	if o != nil && o.FailureThreshold != nil {
		return true
	}

	return false
}

// SetFailureThreshold gets a reference to the given int32 and assigns it to the FailureThreshold field.
func (o *TaskV1) SetFailureThreshold(v int32) *TaskV1 {
	o.FailureThreshold = &v
	return o
}

// GetAction returns the Action field value.
func (o *TaskV1) GetAction() ActionType {
	if o == nil {
		var ret ActionType
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetActionOk() (*ActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value.
func (o *TaskV1) SetAction(v ActionType) *TaskV1 {
	o.Action = v
	return o
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *TaskV1) GetCursor() string {
	if o == nil || o.Cursor == nil {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskV1) GetCursorOk() (*string, bool) {
	if o == nil || o.Cursor == nil {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *TaskV1) HasCursor() bool {
	if o != nil && o.Cursor != nil {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *TaskV1) SetCursor(v string) *TaskV1 {
	o.Cursor = &v
	return o
}

// GetCreatedAt returns the CreatedAt field value.
func (o *TaskV1) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TaskV1) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value.
func (o *TaskV1) SetCreatedAt(v string) *TaskV1 {
	o.CreatedAt = v
	return o
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TaskV1) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskV1) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TaskV1) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TaskV1) SetUpdatedAt(v string) *TaskV1 {
	o.UpdatedAt = &v
	return o
}

func (o TaskV1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["taskID"] = o.TaskID
	}
	if true {
		toSerialize["sourceID"] = o.SourceID
	}
	if true {
		toSerialize["destinationID"] = o.DestinationID
	}
	if true {
		toSerialize["trigger"] = o.Trigger
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FailureThreshold != nil {
		toSerialize["failureThreshold"] = o.FailureThreshold
	}
	if true {
		toSerialize["action"] = o.Action
	}
	if o.Cursor != nil {
		toSerialize["cursor"] = o.Cursor
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TaskV1: %w", err)
	}

	return serialized, nil
}

func (o TaskV1) String() string {
	out := ""
	out += fmt.Sprintf("  taskID=%v\n", o.TaskID)
	out += fmt.Sprintf("  sourceID=%v\n", o.SourceID)
	out += fmt.Sprintf("  destinationID=%v\n", o.DestinationID)
	out += fmt.Sprintf("  trigger=%v\n", o.Trigger)
	out += fmt.Sprintf("  input=%v\n", o.Input)
	out += fmt.Sprintf("  enabled=%v\n", o.Enabled)
	out += fmt.Sprintf("  failureThreshold=%v\n", o.FailureThreshold)
	out += fmt.Sprintf("  action=%v\n", o.Action)
	out += fmt.Sprintf("  cursor=%v\n", o.Cursor)
	out += fmt.Sprintf("  createdAt=%v\n", o.CreatedAt)
	out += fmt.Sprintf("  updatedAt=%v\n", o.UpdatedAt)
	return fmt.Sprintf("TaskV1 {\n%s}", out)
}
