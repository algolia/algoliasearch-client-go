// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationNoCode Input for a no-code transformation that contains a series of steps.
type TransformationNoCode struct {
	Steps []map[string]any `json:"steps"`
}

// NewTransformationNoCode instantiates a new TransformationNoCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformationNoCode(steps []map[string]any) *TransformationNoCode {
	this := &TransformationNoCode{}
	this.Steps = steps
	return this
}

// NewEmptyTransformationNoCode return a pointer to an empty TransformationNoCode object.
func NewEmptyTransformationNoCode() *TransformationNoCode {
	return &TransformationNoCode{}
}

// GetSteps returns the Steps field value.
func (o *TransformationNoCode) GetSteps() []map[string]any {
	if o == nil {
		var ret []map[string]any
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *TransformationNoCode) GetStepsOk() ([]map[string]any, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steps, true
}

// SetSteps sets field value.
func (o *TransformationNoCode) SetSteps(v []map[string]any) *TransformationNoCode {
	o.Steps = v
	return o
}

func (o TransformationNoCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["steps"] = o.Steps
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TransformationNoCode: %w", err)
	}

	return serialized, nil
}

func (o TransformationNoCode) String() string {
	out := ""
	out += fmt.Sprintf("  steps=%v\n", o.Steps)
	return fmt.Sprintf("TransformationNoCode {\n%s}", out)
}
