// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package ingestion

import (
	"encoding/json"
	"fmt"
)

// TransformationCode Input for a transformation that contains the source code of the transformation.
type TransformationCode struct {
	// The source code of the transformation.
	Code string `json:"code"`
}

// NewTransformationCode instantiates a new TransformationCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewTransformationCode(code string) *TransformationCode {
	this := &TransformationCode{}
	this.Code = code
	return this
}

// NewEmptyTransformationCode return a pointer to an empty TransformationCode object.
func NewEmptyTransformationCode() *TransformationCode {
	return &TransformationCode{}
}

// GetCode returns the Code field value.
func (o *TransformationCode) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TransformationCode) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value.
func (o *TransformationCode) SetCode(v string) *TransformationCode {
	o.Code = v
	return o
}

func (o TransformationCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	toSerialize["code"] = o.Code
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal TransformationCode: %w", err)
	}

	return serialized, nil
}

func (o TransformationCode) String() string {
	out := ""
	out += fmt.Sprintf("  code=%v\n", o.Code)
	return fmt.Sprintf("TransformationCode {\n%s}", out)
}
