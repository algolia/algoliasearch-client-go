// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package usage

import (
	"encoding/json"
	"fmt"
)

// InvalidRequest struct for InvalidRequest.
type InvalidRequest struct {
	Error InvalidRequestError `json:"error"`
}

// NewInvalidRequest instantiates a new InvalidRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewInvalidRequest(error_ InvalidRequestError) *InvalidRequest {
	this := &InvalidRequest{}
	this.Error = error_
	return this
}

// NewEmptyInvalidRequest return a pointer to an empty InvalidRequest object.
func NewEmptyInvalidRequest() *InvalidRequest {
	return &InvalidRequest{}
}

// GetError returns the Error field value.
func (o *InvalidRequest) GetError() InvalidRequestError {
	if o == nil {
		var ret InvalidRequestError
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *InvalidRequest) GetErrorOk() (*InvalidRequestError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value.
func (o *InvalidRequest) SetError(v *InvalidRequestError) *InvalidRequest {
	o.Error = *v
	return o
}

func (o InvalidRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if true {
		toSerialize["error"] = o.Error
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal InvalidRequest: %w", err)
	}

	return serialized, nil
}

func (o InvalidRequest) String() string {
	out := ""
	out += fmt.Sprintf("  error=%v\n", o.Error)
	return fmt.Sprintf("InvalidRequest {\n%s}", out)
}
