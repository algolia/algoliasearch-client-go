// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package usage

import (
	"encoding/json"
	"fmt"
)

// Granularity the model 'Granularity'.
type Granularity string

// List of granularity.
const (
	GRANULARITY_HOURLY Granularity = "hourly"
	GRANULARITY_DAILY  Granularity = "daily"
)

// All allowed values of Granularity enum.
var AllowedGranularityEnumValues = []Granularity{
	"hourly",
	"daily",
}

func (v *Granularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return fmt.Errorf("failed to unmarshal value '%s' for enum 'Granularity': %w", string(src), err)
	}
	enumTypeValue := Granularity(value)
	for _, existing := range AllowedGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Granularity", value)
}

// NewGranularityFromValue returns a pointer to a valid Granularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewGranularityFromValue(v string) (*Granularity, error) {
	ev := Granularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Granularity: valid values are %v", v, AllowedGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v Granularity) IsValid() bool {
	for _, existing := range AllowedGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to granularity value.
func (v Granularity) Ptr() *Granularity {
	return &v
}
