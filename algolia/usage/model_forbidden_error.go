// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package usage

import (
	"encoding/json"
	"fmt"
)

// ForbiddenError struct for ForbiddenError.
type ForbiddenError struct {
	Code    *string     `json:"code,omitempty"`
	Message *string     `json:"message,omitempty"`
	Errors  []ErrorItem `json:"errors,omitempty"`
}

type ForbiddenErrorOption func(f *ForbiddenError)

func WithForbiddenErrorCode(val string) ForbiddenErrorOption {
	return func(f *ForbiddenError) {
		f.Code = &val
	}
}

func WithForbiddenErrorMessage(val string) ForbiddenErrorOption {
	return func(f *ForbiddenError) {
		f.Message = &val
	}
}

func WithForbiddenErrorErrors(val []ErrorItem) ForbiddenErrorOption {
	return func(f *ForbiddenError) {
		f.Errors = val
	}
}

// NewForbiddenError instantiates a new ForbiddenError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewForbiddenError(opts ...ForbiddenErrorOption) *ForbiddenError {
	this := &ForbiddenError{}
	for _, opt := range opts {
		opt(this)
	}
	return this
}

// NewEmptyForbiddenError return a pointer to an empty ForbiddenError object.
func NewEmptyForbiddenError() *ForbiddenError {
	return &ForbiddenError{}
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ForbiddenError) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ForbiddenError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ForbiddenError) SetCode(v string) *ForbiddenError {
	o.Code = &v
	return o
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ForbiddenError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ForbiddenError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ForbiddenError) SetMessage(v string) *ForbiddenError {
	o.Message = &v
	return o
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ForbiddenError) GetErrors() []ErrorItem {
	if o == nil || o.Errors == nil {
		var ret []ErrorItem
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenError) GetErrorsOk() ([]ErrorItem, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ForbiddenError) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorItem and assigns it to the Errors field.
func (o *ForbiddenError) SetErrors(v []ErrorItem) *ForbiddenError {
	o.Errors = v
	return o
}

func (o ForbiddenError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]any{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	serialized, err := json.Marshal(toSerialize)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal ForbiddenError: %w", err)
	}

	return serialized, nil
}

func (o ForbiddenError) String() string {
	out := ""
	out += fmt.Sprintf("  code=%v\n", o.Code)
	out += fmt.Sprintf("  message=%v\n", o.Message)
	out += fmt.Sprintf("  errors=%v\n", o.Errors)
	return fmt.Sprintf("ForbiddenError {\n%s}", out)
}
